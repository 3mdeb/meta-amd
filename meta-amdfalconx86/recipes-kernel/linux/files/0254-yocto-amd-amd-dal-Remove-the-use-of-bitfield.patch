From bbc839cc2ae53bbdce57233b0df4ee231d4f107d Mon Sep 17 00:00:00 2001
From: Mohammad Mohammadnia <Mohammad.Mohammadnia@amd.com>
Date: Tue, 21 Jul 2015 11:18:48 -0400
Subject: [PATCH 371/401] amd/dal: Remove the use of bitfield

Use of bitfield is not accepted by the Linux kernel community. It should be removed from our code.

Reviewed-By: Harry Wentland <Harry.Wentland@amd.com>
Signed-off-by: Mohammad Mohammadnia <Mohammad.Mohammadnia@amd.com>
Signed-off-by: Sanjay R Mehta <sanju.mehta@amd.com>
---
 .../gpu/drm/amd/dal/controller/dce110/vga_dce110.c |   1 -
 .../drm/amd/dal/display_service/display_service.c  |  25 ----
 .../amd/dal/gpu/dce110/bandwidth_manager_dce110.c  |  13 +--
 .../amd/dal/include/display_service_interface.h    |  14 ---
 .../drm/amd/dal/include/display_service_types.h    | 128 ---------------------
 5 files changed, 2 insertions(+), 179 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/controller/dce110/vga_dce110.c b/drivers/gpu/drm/amd/dal/controller/dce110/vga_dce110.c
index 271907c..401dddc 100644
--- a/drivers/gpu/drm/amd/dal/controller/dce110/vga_dce110.c
+++ b/drivers/gpu/drm/amd/dal/controller/dce110/vga_dce110.c
@@ -128,7 +128,6 @@ static void disable_vga(struct vga *vga)
 	set_reg_field_value(value, 0, D1VGA_CONTROL, D1VGA_TIMING_SELECT);
 	set_reg_field_value(
 			value, 0, D1VGA_CONTROL, D1VGA_SYNC_POLARITY_SELECT);
-	/* RegFields1.bitfields.D1VGA_OVERSCAN_TIMING_SELECT = 0; */
 	set_reg_field_value(value, 0, D1VGA_CONTROL, D1VGA_OVERSCAN_COLOR_EN);
 
 	dal_write_reg(vga->ctx, addr, value);
diff --git a/drivers/gpu/drm/amd/dal/display_service/display_service.c b/drivers/gpu/drm/amd/dal/display_service/display_service.c
index ada8753..92a28225 100644
--- a/drivers/gpu/drm/amd/dal/display_service/display_service.c
+++ b/drivers/gpu/drm/amd/dal/display_service/display_service.c
@@ -568,14 +568,6 @@ enum ds_return dal_display_service_enable_advanced_request(
 }
 
 /*Audio related*/
-enum ds_return dal_display_service_get_audio_info(
-	struct display_service *ds,
-	uint32_t display_index,
-	struct ds_display_audio_info *audio_info)
-{
-	/*TODO: add implementation*/
-	return DS_ERROR;
-}
 
 enum ds_return dal_display_service_enable_audio_endpoint(
 	struct display_service *ds,
@@ -595,23 +587,6 @@ enum ds_return dal_display_service_mute_audio_endpoint(
 	return DS_ERROR;
 }
 
-enum ds_return dal_display_service_get_audio_channel_split_config(
-	struct display_service *ds,
-	struct ds_adapter_audio_azalia_channel_mapping_set *audio_set)
-{
-	/*TODO: add implementation*/
-	return DS_ERROR;
-}
-
-enum ds_return dal_display_service_enable_audio_channel_split(
-	struct display_service *ds,
-	const struct ds_adapter_audio_azalia_channel_mapping_set *audio_set,
-	bool enable)
-{
-	/*TODO: add implementation*/
-	return DS_ERROR;
-}
-
 bool dal_display_service_calc_view_port_for_wide_display(
 	struct display_service *ds,
 	uint32_t display_index,
diff --git a/drivers/gpu/drm/amd/dal/gpu/dce110/bandwidth_manager_dce110.c b/drivers/gpu/drm/amd/dal/gpu/dce110/bandwidth_manager_dce110.c
index 9914f0d..69d0761 100644
--- a/drivers/gpu/drm/amd/dal/gpu/dce110/bandwidth_manager_dce110.c
+++ b/drivers/gpu/drm/amd/dal/gpu/dce110/bandwidth_manager_dce110.c
@@ -269,10 +269,6 @@ static void program_self_refresh_dmif_watermark_crtc(
 	uint32_t wm_addr = regs->reg_dpg_watermark_mask_ctrl;
 
 	/*Write mask to enable reading/writing of watermark set A*/
-	/* TODO: check whether this Hersen's change is correct
-	 * (2 following lines)
-	stutter_cntl.u32All = 0;
-	stutter_cntl.bitfields.STUTTER_WM_HIGH_EXCLUDES_VBLANK = 0x1;*/
 
 	wm_mask_cntl = dal_read_reg(dal_ctx, wm_addr);
 	set_reg_field_value(wm_mask_cntl,
@@ -538,11 +534,6 @@ static void program_self_refresh_dmif_watermark_underlay_hw_seq(
 
 	/*Write mask to enable reading/writing of watermark set A*/
 
-	/* TODO: check whether this Hersen's change is correct
-	 * (2 following lines)
-	stutter_cntl.u32All = 0;
-	stutter_cntl.bitfields.STUTTER_WM_HIGH_EXCLUDES_VBLANK = 0x1;*/
-
 	value = dal_read_reg(dal_ctx, wm_addr);
 	set_reg_field_value(value,
 		1,
@@ -2827,7 +2818,7 @@ static void allocate_dmif_buffer(
 	/*
 	 * Stella Wong proposed the following change
 	 *
-	 * Value of mcHubRdReqDmifLimit.bitfields.ENABLE:
+	 * Value of mcHubRdReqDmifLimit.ENABLE:
 	 * 00 - disable DMIF rdreq limit
 	 * 01 - enable DMIF rdreq limit, disabled by DMIF stall = 1 || urg != 0
 	 * 02 - enable DMIF rdreq limit, disable by DMIF stall = 1
@@ -4745,7 +4736,7 @@ static void deallocate_dmif_buffer(
 	}
 	*/
 
-	/* Value of mcHubRdReqDmifLimit.bitfields.ENABLE.
+	/* Value of mcHubRdReqDmifLimit.ENABLE.
 	 * 00 - disable dmif rdreq limit
 	 * 01 - enable dmif rdreq limit, disable by dmif stall=1||urg!=0
 	 * 02 - enable dmif rdreq limit, disable by dmif stall=1
diff --git a/drivers/gpu/drm/amd/dal/include/display_service_interface.h b/drivers/gpu/drm/amd/dal/include/display_service_interface.h
index 220812f..7b31466 100644
--- a/drivers/gpu/drm/amd/dal/include/display_service_interface.h
+++ b/drivers/gpu/drm/amd/dal/include/display_service_interface.h
@@ -146,11 +146,6 @@ enum ds_return dal_display_service_enable_advanced_request(
 	bool enable);
 
 /*Audio related*/
-enum ds_return dal_display_service_get_audio_info(
-	struct display_service *ds,
-	uint32_t display_index,
-	struct ds_display_audio_info *audio_info);
-
 enum ds_return dal_display_service_enable_audio_endpoint(
 	struct display_service *ds,
 	uint32_t display_index,
@@ -161,15 +156,6 @@ enum ds_return dal_display_service_mute_audio_endpoint(
 	uint32_t display_index,
 	bool mute);
 
-enum ds_return dal_display_service_get_audio_channel_split_config(
-	struct display_service *ds,
-	struct ds_adapter_audio_azalia_channel_mapping_set *audio_set);
-
-enum ds_return dal_display_service_enable_audio_channel_split(
-	struct display_service *ds,
-	const struct ds_adapter_audio_azalia_channel_mapping_set *audio_set,
-	bool enable);
-
 bool dal_display_service_calc_view_port_for_wide_display(
 	struct display_service *ds,
 	uint32_t display_index,
diff --git a/drivers/gpu/drm/amd/dal/include/display_service_types.h b/drivers/gpu/drm/amd/dal/include/display_service_types.h
index 6b91ba3..c678c66 100644
--- a/drivers/gpu/drm/amd/dal/include/display_service_types.h
+++ b/drivers/gpu/drm/amd/dal/include/display_service_types.h
@@ -114,26 +114,6 @@ enum ds_audio_azalia_channel_name {
 	DS_AUDIO_AZALIA_CHANNEL_NO_ASSOCIATION = 15
 };
 
-struct ds_audio_encoding_format_cap {
-	union {
-		struct {
-			uint32_t ENCODING_FORMAT_LPCM:1;
-			uint32_t ENCODING_FORMAT_AC3:1;
-			uint32_t ENCODING_FORMAT_MPEG1:1;
-			uint32_t ENCODING_FORMAT_MP3:1;
-			uint32_t ENCODING_FORMAT_MPEG2:1;
-			uint32_t ENCODING_FORMAT_AAC:1;
-			uint32_t ENCODING_FORMAT_DTS:1;
-			uint32_t ENCODING_FORMAT_ATRAC:1;
-			uint32_t ENCODING_FORMAT_DOLBYDIGITALPLUS:1;
-			uint32_t ENCODING_FORMAT_DTSHD:1;
-			uint32_t ENCODING_FORMAT_DOLBYTRUEHD:1;
-			uint32_t ENCODING_FORMAT_WMAPRO:1;
-		} bitfields;
-		uint32_t u32all;
-	};
-};
-
 enum ds_audio_channel_format {
 	DS_AUDIO_CHANNEL_FORMAT_2P0 = 0,
 	DS_AUDIO_CHANNEL_FORMAT_2P1,
@@ -141,73 +121,6 @@ enum ds_audio_channel_format {
 	DS_AUDIO_CHANNEL_FORMAT_7P1
 };
 
-struct ds_audio_sample_rate_cap {
-	union {
-		struct {
-			uint32_t SAMPLE_RATE_32KHZ:1;
-			uint32_t SAMPLE_RATE_44P1KHZ:1;
-			uint32_t SAMPLE_RATE_48KHZ:1;
-			uint32_t SAMPLE_RATE_88P2KHZ:1;
-			uint32_t SAMPLE_RATE_96KHZ:1;
-			uint32_t SAMPLE_RATE_176P4KHZ:1;
-			uint32_t SAMPLE_RATE_192KHZ:1;
-		} bitfields;
-		uint32_t u32all;
-	};
-};
-
-struct ds_audio_bits_per_sample_cap {
-	union {
-		struct {
-			uint32_t BITS_PER_SAMPLE_16BPS:1;
-			uint32_t BITS_PER_SAMPLE_20BPS:1;
-			uint32_t BITS_PER_SAMPLE_24BPS:1;
-		} bitfields;
-		uint32_t u32all;
-	};
-};
-
-/* audio capability from EDID*/
-struct ds_audio_data_cap {
-	struct ds_audio_encoding_format_cap format;
-	enum ds_audio_channel_format channels;
-	struct ds_audio_sample_rate_cap sample_rate;
-	struct ds_audio_bits_per_sample_cap bit_per_sample;
-};
-
-struct ds_audio_os_channel_mapping {
-	union {
-		struct {
-			uint32_t channel_l:4;
-			uint32_t channel_r:4;
-			uint32_t channel_c:4;
-			uint32_t channel_sub:4;
-			uint32_t channel_rl:4;
-			uint32_t channel_rr:4;
-			uint32_t channel_sl:4;
-			uint32_t channel_sr:4;
-
-		} bitfields;
-		uint32_t u32all;
-	};
-};
-
-struct ds_audio_azalia_channel_mapping {
-	union {
-		struct {
-			uint32_t CHANNEL_FL:4;
-			uint32_t CHANNEL_FR:4;
-			uint32_t CHANNEL_FC:4;
-			uint32_t CHANNEL_SUB:4;
-			uint32_t CHANNEL_SL:4;
-			uint32_t CHANNEL_SR:4;
-			uint32_t CHANNEL_BL:4;
-			uint32_t CHANNEL_BR:4;
-		} bitfields;
-		uint32_t u32all;
-	};
-};
-
 /*Used for get/set Mirabilis*/
 enum ds_mirabilis_control_option {
 	DS_MIRABILIS_UNINITIALIZE = 0,
@@ -223,47 +136,6 @@ struct ds_disp_identifier {
 	uint32_t serial_no;
 };
 
-struct ds_display_audio_os_channel_mapping {
-	struct ds_disp_identifier identifier;
-	struct ds_audio_os_channel_mapping mapping;
-};
-
-struct ds_display_audio_azalia_channel_mapping {
-	struct ds_disp_identifier identifier;
-	struct ds_audio_azalia_channel_mapping mapping;
-};
-
-/*Used for GetDisplayAudioInfo is per display*/
-#define DS_MAX_AUDIO_CONFIG 16
-struct ds_display_audio_info {
-	uint32_t size;
-	uint32_t num_of_audio_formats_supported;
-	struct ds_disp_identifier identifier;
-	struct ds_audio_data_cap audio_caps[DS_MAX_AUDIO_CONFIG];
-	struct ds_audio_os_channel_mapping mapping;
-};
-
-struct ds_display_audio_config {
-	uint32_t size;
-	bool mirabilis_enabled;
-	struct ds_display_audio_azalia_channel_mapping channel_mapping;
-};
-
-#define DS_MAX_MIRABILIS_DISPLAY_COUNT 6
-struct ds_adapter_audio_os_channel_mapping_set {
-	enum ds_mirabilis_control_option options;
-	uint32_t num_of_displays;
-	struct ds_display_audio_os_channel_mapping
-		channel_mapping[DS_MAX_MIRABILIS_DISPLAY_COUNT];
-};
-
-struct ds_adapter_audio_azalia_channel_mapping_set {
-	enum ds_mirabilis_control_option options;
-	uint32_t num_of_displays;
-	struct ds_display_audio_azalia_channel_mapping
-		channel_mapping[DS_MAX_MIRABILIS_DISPLAY_COUNT];
-};
-
 struct ds_view_port {
 	uint32_t x_start;
 	uint32_t y_start;
-- 
1.9.1

