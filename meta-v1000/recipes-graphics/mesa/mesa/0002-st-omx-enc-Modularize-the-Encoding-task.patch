From 0c000a7466b4670e68469fd021adaeccbf20e8e1 Mon Sep 17 00:00:00 2001
From: Nishanth Peethambaran <nishanth.peethambaran@amd.com>
Date: Thu, 29 Jun 2017 18:33:44 +0530
Subject: [PATCH 2/3] st/omx/enc: Modularize the Encoding task

Prepare for integrating the FRC logic in encoder

Signed-off-by: Indrajit Das <indrajit-kumar.das@amd.com>
---
 src/gallium/state_trackers/omx_bellagio/vid_enc.c | 78 ++++++++++++++++++--------------
 1 file changed, 44 insertions(+), 34 deletions(-)

diff --git a/src/gallium/state_trackers/omx_bellagio/vid_enc.c b/src/gallium/state_trackers/omx_bellagio/vid_enc.c
index 9004ddd..a6502ce 100644
--- a/src/gallium/state_trackers/omx_bellagio/vid_enc.c
+++ b/src/gallium/state_trackers/omx_bellagio/vid_enc.c
@@ -1138,44 +1138,13 @@ static void enc_ClearBframes(omx_base_PortType *port, struct input_buf_private *
    enc_MoveTasks(&priv->b_frames, &inp->tasks);
 }
 
-static OMX_ERRORTYPE vid_enc_EncodeFrame(omx_base_PortType *port, OMX_BUFFERHEADERTYPE *buf)
+static void enc_HandleFrame(omx_base_PortType *port, struct encode_task *task,
+                            OMX_U32 flags, struct input_buf_private *inp)
 {
    OMX_COMPONENTTYPE* comp = port->standCompContainer;
    vid_enc_PrivateType *priv = comp->pComponentPrivate;
-   struct input_buf_private *inp = buf->pInputPortPrivate;
    enum pipe_h264_enc_picture_type picture_type;
-   struct encode_task *task;
    unsigned stacked_num = 0;
-   OMX_ERRORTYPE err;
-
-   enc_MoveTasks(&inp->tasks, &priv->free_tasks);
-   task = enc_NeedTask(port);
-   if (!task)
-      return OMX_ErrorInsufficientResources;
-
-   if (buf->nFilledLen == 0) {
-      if (buf->nFlags & OMX_BUFFERFLAG_EOS) {
-         buf->nFilledLen = buf->nAllocLen;
-         enc_ClearBframes(port, inp);
-         enc_MoveTasks(&priv->stacked_tasks, &inp->tasks);
-         priv->codec->flush(priv->codec);
-      }
-      return base_port_SendBufferFunction(port, buf);
-   }
-
-   if (buf->pOutputPortPrivate) {
-      struct pipe_video_buffer *vbuf = buf->pOutputPortPrivate;
-      buf->pOutputPortPrivate = task->buf;
-      task->buf = vbuf;
-   } else {
-      /* ------- load input image into video buffer ---- */
-      err = enc_LoadImage(port, buf, task->buf);
-      if (err != OMX_ErrorNone) {
-         FREE(task);
-         return err;
-      }
-   }
-   task->timestamp = buf->nTimeStamp;
 
    /* -------------- determine picture type --------- */
    if (!(priv->pic_order_cnt % OMX_VID_ENC_IDR_PERIOD_DEFAULT) ||
@@ -1186,7 +1155,7 @@ static OMX_ERRORTYPE vid_enc_EncodeFrame(omx_base_PortType *port, OMX_BUFFERHEAD
       priv->frame_num = 0;
    } else if (priv->codec->profile == PIPE_VIDEO_PROFILE_MPEG4_AVC_BASELINE ||
               !(priv->pic_order_cnt % OMX_VID_ENC_P_PERIOD_DEFAULT) ||
-              (buf->nFlags & OMX_BUFFERFLAG_EOS)) {
+              (flags & OMX_BUFFERFLAG_EOS)) {
       picture_type = PIPE_H264_ENC_PICTURE_TYPE_P;
    } else {
       picture_type = PIPE_H264_ENC_PICTURE_TYPE_B;
@@ -1223,6 +1192,47 @@ static OMX_ERRORTYPE vid_enc_EncodeFrame(omx_base_PortType *port, OMX_BUFFERHEAD
 
       enc_MoveTasks(&priv->b_frames, &inp->tasks);
    }
+}
+
+static OMX_ERRORTYPE vid_enc_EncodeFrame(omx_base_PortType *port, OMX_BUFFERHEADERTYPE *buf)
+{
+   OMX_COMPONENTTYPE* comp = port->standCompContainer;
+   vid_enc_PrivateType *priv = comp->pComponentPrivate;
+   struct input_buf_private *inp = buf->pInputPortPrivate;
+   struct encode_task *task;
+   OMX_ERRORTYPE err;
+
+   enc_MoveTasks(&inp->tasks, &priv->free_tasks);
+   task = enc_NeedTask(port);
+   if (!task)
+      return OMX_ErrorInsufficientResources;
+
+   if (buf->nFilledLen == 0) {
+      if (buf->nFlags & OMX_BUFFERFLAG_EOS) {
+         buf->nFilledLen = buf->nAllocLen;
+         enc_ClearBframes(port, inp);
+         enc_MoveTasks(&priv->stacked_tasks, &inp->tasks);
+         priv->codec->flush(priv->codec);
+      }
+      return base_port_SendBufferFunction(port, buf);
+   }
+
+   if (buf->pOutputPortPrivate) {
+      struct pipe_video_buffer *vbuf = buf->pOutputPortPrivate;
+      buf->pOutputPortPrivate = task->buf;
+      task->buf = vbuf;
+   } else {
+      /* ------- load input image into video buffer ---- */
+      err = enc_LoadImage(port, buf, task->buf);
+      if (err != OMX_ErrorNone) {
+         FREE(task);
+         return err;
+      }
+   }
+   task->timestamp = buf->nTimeStamp;
+
+   /* ------- decide pic type, initiate encode & update inp task list ---- */
+   enc_HandleFrame(port, task, buf->nFlags, inp);
 
    if (LIST_IS_EMPTY(&inp->tasks))
       return port->ReturnBufferFunction(port, buf);
-- 
2.7.4

