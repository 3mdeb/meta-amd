From ee2f0ce78d73335b830e2061434e67e4583dab9a Mon Sep 17 00:00:00 2001
From: Mykola Lysenko <Mykola.Lysenko@amd.com>
Date: Thu, 5 May 2016 06:39:27 -0400
Subject: [PATCH 0607/1722] drm/amd/dal: changes to get branch device name

It also cleans-up dpcd access code

Change-Id: I01197b5a9d7e40ab0eed4cf677128de75249c966
Signed-off-by: Mykola Lysenko <Mykola.Lysenko@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/core/dc_link_ddc.c | 27 +++------------
 drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c  | 49 ++++++++++++++++++++-------
 drivers/gpu/drm/amd/dal/dc/dc.h               |  1 +
 drivers/gpu/drm/amd/dal/dc/dc_ddc_types.h     | 12 -------
 drivers/gpu/drm/amd/dal/dc/inc/dc_link_ddc.h  |  5 ---
 drivers/gpu/drm/amd/dal/include/dpcd_defs.h   |  7 ++++
 6 files changed, 48 insertions(+), 53 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_link_ddc.c b/drivers/gpu/drm/amd/dal/dc/core/dc_link_ddc.c
index 9d8c427..6727d8f 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_link_ddc.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_link_ddc.c
@@ -369,18 +369,16 @@ static uint32_t defer_delay_converter_wa(
 	struct ddc_service *ddc,
 	uint32_t defer_delay)
 {
-	struct dp_receiver_id_info dp_rec_info = {0};
+	struct core_link *link = ddc->link;
 
-	if (dal_ddc_service_get_dp_receiver_id_info(ddc, &dp_rec_info) &&
-		(dp_rec_info.branch_id == DP_BRANCH_DEVICE_ID_4) &&
-		!strncmp(dp_rec_info.branch_name,
+	if (link->dpcd_caps.branch_dev_id == DP_BRANCH_DEVICE_ID_4 &&
+		!memcmp(link->dpcd_caps.branch_dev_name,
 			DP_DVI_CONVERTER_ID_4,
-			sizeof(dp_rec_info.branch_name)))
+			sizeof(link->dpcd_caps.branch_dev_name)))
 		return defer_delay > I2C_OVER_AUX_DEFER_WA_DELAY ?
 			defer_delay : I2C_OVER_AUX_DEFER_WA_DELAY;
 
 	return defer_delay;
-
 }
 
 #define DP_TRANSLATOR_DELAY 5
@@ -954,17 +952,6 @@ bool dal_ddc_service_query_ddc_data(
 	return ret;
 }
 
-bool dal_ddc_service_get_dp_receiver_id_info(
-	struct ddc_service *ddc,
-	struct dp_receiver_id_info *info)
-{
-	if (!info)
-		return false;
-
-	*info = ddc->dp_receiver_id_info;
-	return true;
-}
-
 enum ddc_result dal_ddc_service_read_dpcd_data(
 	struct ddc_service *ddc,
 	uint32_t address,
@@ -1046,12 +1033,6 @@ struct ddc *dal_ddc_service_get_ddc_pin(struct ddc_service *ddc_service)
 	return ddc_service->ddc_pin;
 }
 
-void dal_ddc_service_reset_dp_receiver_id_info(struct ddc_service *ddc_service)
-{
-	memset(&ddc_service->dp_receiver_id_info,
-		0, sizeof(struct dp_receiver_id_info));
-}
-
 void dal_ddc_service_write_scdc_data(struct ddc_service *ddc_service,
 		uint32_t pix_clk,
 		bool lte_340_scramble)
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c b/drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c
index 15e8f61..05e755b 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c
@@ -1659,15 +1659,48 @@ static void get_active_converter_info(
 			break;
 		}
 	}
-	ddc_service_set_dongle_type(link->ddc,
-			link->dpcd_caps.dongle_type);
+
+	ddc_service_set_dongle_type(link->ddc, link->dpcd_caps.dongle_type);
+
+	{
+		struct dp_device_vendor_id dp_id;
+
+		/* read IEEE branch device id */
+		core_link_read_dpcd(
+			link,
+			DPCD_ADDRESS_BRANCH_DEVICE_ID_START,
+			(uint8_t *)&dp_id,
+			sizeof(dp_id));
+
+		link->dpcd_caps.branch_dev_id =
+			(dp_id.ieee_oui[0] << 16) +
+			(dp_id.ieee_oui[1] << 8) +
+			dp_id.ieee_oui[2];
+
+		memmove(
+			link->dpcd_caps.branch_dev_name,
+			dp_id.ieee_device_id,
+			sizeof(dp_id.ieee_device_id));
+	}
+
+	{
+		struct dp_sink_hw_fw_revision dp_hw_fw_revision;
+
+		core_link_read_dpcd(
+			link,
+			DPCD_ADDRESS_BRANCH_REVISION_START,
+			(uint8_t *)&dp_hw_fw_revision,
+			sizeof(dp_hw_fw_revision));
+
+		link->dpcd_caps.branch_hw_revision =
+			dp_hw_fw_revision.ieee_hw_rev;
+	}
 }
 
 static void dp_wa_power_up_0010FA(struct core_link *link, uint8_t *dpcd_data,
 		int length)
 {
 	int retry = 0;
-	struct dp_device_vendor_id dp_id;
 	union dp_downstream_port_present ds_port = { 0 };
 
 	if (!link->dpcd_caps.dpcd_rev.raw) {
@@ -1684,16 +1717,6 @@ static void dp_wa_power_up_0010FA(struct core_link *link, uint8_t *dpcd_data,
 	ds_port.byte = dpcd_data[DPCD_ADDRESS_DOWNSTREAM_PORT_PRESENT -
 				 DPCD_ADDRESS_DPCD_REV];
 
-	get_active_converter_info(ds_port.byte, link);
-
-	/* read IEEE branch device id */
-	core_link_read_dpcd(link, DPCD_ADDRESS_BRANCH_DEVICE_ID_START,
-			(uint8_t *)&dp_id, sizeof(dp_id));
-	link->dpcd_caps.branch_dev_id =
-			(dp_id.ieee_oui[0] << 16) +
-			(dp_id.ieee_oui[1] << 8) +
-			dp_id.ieee_oui[2];
-
 	if (link->dpcd_caps.dongle_type == DISPLAY_DONGLE_DP_VGA_CONVERTER) {
 		switch (link->dpcd_caps.branch_dev_id) {
 		/* Some active dongles (DP-VGA, DP-DLDVI converters) power down
diff --git a/drivers/gpu/drm/amd/dal/dc/dc.h b/drivers/gpu/drm/amd/dal/dc/dc.h
index 6e3ab0c5..b152aa9 100644
--- a/drivers/gpu/drm/amd/dal/dc/dc.h
+++ b/drivers/gpu/drm/amd/dal/dc/dc.h
@@ -427,6 +427,7 @@ struct dpcd_caps {
 	uint32_t sink_dev_id;
 	uint32_t branch_dev_id;
 	int8_t branch_dev_name[6];
+	int8_t branch_hw_revision;
 };
 
 struct dc_link_status {
diff --git a/drivers/gpu/drm/amd/dal/dc/dc_ddc_types.h b/drivers/gpu/drm/amd/dal/dc/dc_ddc_types.h
index 0a9a210..91fa86e 100644
--- a/drivers/gpu/drm/amd/dal/dc/dc_ddc_types.h
+++ b/drivers/gpu/drm/amd/dal/dc/dc_ddc_types.h
@@ -98,24 +98,12 @@ enum display_dongle_type {
 	DISPLAY_DONGLE_DP_HDMI_MISMATCHED_DONGLE,
 };
 
-struct dp_receiver_id_info {
-	uint32_t dpcd_rev;
-	uint32_t sink_id;
-	int8_t sink_id_str[6];
-	int8_t sink_hw_revision;
-	int8_t sink_fw_revision[2];
-	uint32_t branch_id;
-	int8_t branch_name[6];
-	enum display_dongle_type dongle_type;
-};
-
 struct ddc_service {
 	struct ddc *ddc_pin;
 	struct ddc_flags flags;
 	union ddc_wa wa;
 	enum ddc_transaction_type transaction_type;
 	enum display_dongle_type dongle_type;
-	struct dp_receiver_id_info dp_receiver_id_info;
 	struct adapter_service *as;
 	struct dc_context *ctx;
 	struct core_link *link;
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/dc_link_ddc.h b/drivers/gpu/drm/amd/dal/dc/inc/dc_link_ddc.h
index 088afce..e5daeb9 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/dc_link_ddc.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/dc_link_ddc.h
@@ -103,10 +103,6 @@ bool dal_ddc_service_query_ddc_data(
 		uint8_t *read_buf,
 		uint32_t read_size);
 
-bool dal_ddc_service_get_dp_receiver_id_info(
-		struct ddc_service *ddc,
-		struct dp_receiver_id_info *info);
-
 enum ddc_result dal_ddc_service_read_dpcd_data(
 		struct ddc_service *ddc,
 		uint32_t address,
@@ -135,7 +131,6 @@ void dal_ddc_service_set_ddc_pin(
 		struct ddc *ddc);
 
 struct ddc *dal_ddc_service_get_ddc_pin(struct ddc_service *ddc_service);
-void dal_ddc_service_reset_dp_receiver_id_info(struct ddc_service *ddc_service);
 
 enum ddc_result dal_ddc_service_read_dpcd_data(
 		struct ddc_service *ddc,
diff --git a/drivers/gpu/drm/amd/dal/include/dpcd_defs.h b/drivers/gpu/drm/amd/dal/include/dpcd_defs.h
index 7031097f..8b659a4 100644
--- a/drivers/gpu/drm/amd/dal/include/dpcd_defs.h
+++ b/drivers/gpu/drm/amd/dal/include/dpcd_defs.h
@@ -178,6 +178,8 @@ enum dpcd_address {
 	DPCD_ADDRESS_BRANCH_DEVICE_ID_END = 0x0502,
 	DPCD_ADDRESS_BRANCH_DEVICE_STR_START = 0x0503,
 	DPCD_ADDRESS_BRANCH_DEVICE_STR_END = 0x0508,
+	DPCD_ADDRESS_BRANCH_REVISION_START = 0x0509,
+	DPCD_ADDRESS_BRANCH_REVISION_END = 0x050B,
 
 	DPCD_ADDRESS_POWER_STATE = 0x0600,
 
@@ -643,6 +645,11 @@ struct dp_device_vendor_id {
 	uint8_t ieee_device_id[6];/*usually 6-byte ASCII name*/
 };
 
+struct dp_sink_hw_fw_revision {
+	uint8_t ieee_hw_rev;
+	uint8_t ieee_fw_rev[2];
+};
+
 /*DPCD register of DP receiver capability field bits-*/
 union edp_configuration_cap {
 	struct {
-- 
2.7.4

