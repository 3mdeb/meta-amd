From 38b16eb4f833aa169d528eb70ea2e58d1cba6cd9 Mon Sep 17 00:00:00 2001
From: Rex Zhu <Rex.Zhu@amd.com>
Date: Mon, 3 Jul 2017 18:18:54 +0800
Subject: [PATCH 2407/2500] Revert "drm/amdgpu: use kiq in APU and SRIOV case."
 This reverts commit af46891e1972b70f3647942c37f382d26fa4b222. Revert
 "drm/amdgpu: baremetal only use KIQ for compute ring management on APU" This
 reverts commit d44b5d49b5618ccf29d7f0d46d7a203e5658eb0f. Revert "drm/amdgpu:
 baremetal not use KIQ for compute ring management on Fiji" This reverts
 commit 8cf5a6dd67af48a0f19068bbc229393a7fe6bd99.

vulkan test hang on VI issue caused by kiq enabled was fixed by
commit fd1b8c547f9163a6da72656e70a1627694524659.
so revert those patches and enable kiq on VI by default.

Change-Id: I4736946b6d5eefcbbde37751296f12b34de55e50
---
 drivers/gpu/drm/amd/amdgpu/amdgpu.h   |  1 -
 drivers/gpu/drm/amd/amdgpu/gfx_v8_0.c | 20 ++++++--------------
 2 files changed, 6 insertions(+), 15 deletions(-)

diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu.h b/drivers/gpu/drm/amd/amdgpu/amdgpu.h
index 2bc8f6c..a3adcbd 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu.h
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu.h
@@ -1146,7 +1146,6 @@ struct amdgpu_gfx {
 	bool                            in_suspend;
 	/* NGG */
 	struct amdgpu_ngg		ngg;
-	bool                            kiq_en;
 };
 
 int amdgpu_ib_get(struct amdgpu_device *adev, struct amdgpu_vm *vm,
diff --git a/drivers/gpu/drm/amd/amdgpu/gfx_v8_0.c b/drivers/gpu/drm/amd/amdgpu/gfx_v8_0.c
index 9a77014..93bff35 100644
--- a/drivers/gpu/drm/amd/amdgpu/gfx_v8_0.c
+++ b/drivers/gpu/drm/amd/amdgpu/gfx_v8_0.c
@@ -2029,7 +2029,7 @@ static int gfx_v8_0_sw_init(void *handle)
 		return r;
 
 	adev->gfx.gfx_current_status = AMDGPU_GFX_NORMAL_MODE;
-	adev->gfx.kiq_en = (adev->flags & AMD_IS_APU) || amdgpu_sriov_vf(adev);
+
 	gfx_v8_0_scratch_init(adev);
 
 	r = gfx_v8_0_init_microcode(adev);
@@ -4950,18 +4950,13 @@ static int gfx_v8_0_kcq_init_queue(struct amdgpu_ring *ring)
 	struct vi_mqd *mqd = ring->mqd_ptr;
 	int mqd_idx = ring - &adev->gfx.compute_ring[0];
 
-	if (!adev->gfx.kiq_en ||
-		(!adev->gfx.in_reset && !adev->gfx.in_suspend)) {
+	if (!adev->gfx.in_reset && !adev->gfx.in_suspend) {
 		memset((void *)mqd, 0, sizeof(struct vi_mqd_allocation));
 		((struct vi_mqd_allocation *)mqd)->dyamic_cu_mask = 0xFFFFFFFF;
 		((struct vi_mqd_allocation *)mqd)->dyamic_rb_mask = 0xFFFFFFFF;
 		mutex_lock(&adev->srbm_mutex);
 		vi_srbm_select(adev, ring->me, ring->pipe, ring->queue, 0);
 		gfx_v8_0_mqd_init(ring);
-		if (!adev->gfx.kiq_en) {
-			gfx_v8_0_deactivate_hqd(adev, 1);
-			gfx_v8_0_mqd_commit(adev, mqd);
-		}
 		vi_srbm_select(adev, 0, 0, 0, 0);
 		mutex_unlock(&adev->srbm_mutex);
 
@@ -5032,11 +5027,9 @@ static int gfx_v8_0_kiq_resume(struct amdgpu_device *adev)
 
 	gfx_v8_0_set_mec_doorbell_range(adev);
 
-	if (adev->gfx.kiq_en) {
-		r = gfx_v8_0_kiq_kcq_enable(adev);
-		if (r)
-			goto done;
-	}
+	r = gfx_v8_0_kiq_kcq_enable(adev);
+	if (r)
+		goto done;
 
 	/* Test KIQ */
 	ring = &adev->gfx.kiq.ring;
@@ -5152,8 +5145,7 @@ static int gfx_v8_0_hw_fini(void *handle)
 		pr_debug("For SRIOV client, shouldn't do anything.\n");
 		return 0;
 	}
-	if (adev->gfx.kiq_en)
-		gfx_v8_0_kiq_kcq_disable(adev);
+	gfx_v8_0_kiq_kcq_disable(adev);
 	gfx_v8_0_cp_enable(adev, false);
 	gfx_v8_0_rlc_stop(adev);
 
-- 
2.7.4

