From 2c644a3fff4cb3dd813041a23228f324cebfc1ee Mon Sep 17 00:00:00 2001
From: Awais Belal <awais_belal@mentor.com>
Date: Thu, 11 Jan 2018 15:12:01 +0500
Subject: [PATCH] egd_tables.py: fix compatibility with python versions

There are differences in the print function between
py2 and py3 that render the definition incompatible
between the two. This updates the egd_tables.py so
it is workable on both py2 and py3.

Signed-off-by: Awais Belal <awais_belal@mentor.com>
---
 src/gallium/drivers/r600/egd_tables.py | 56 +++++++++++++++++-----------------
 1 file changed, 28 insertions(+), 28 deletions(-)

diff --git a/src/gallium/drivers/r600/egd_tables.py b/src/gallium/drivers/r600/egd_tables.py
index d7b78c7..b812105 100644
--- a/src/gallium/drivers/r600/egd_tables.py
+++ b/src/gallium/drivers/r600/egd_tables.py
@@ -47,7 +47,7 @@ class StringTable:
                 return idx
 
         idx = self.length
-        self.table.append((string, idx, set((idx,))))
+        self.table.append((string, idx, {idx}))
         self.length += len(string) + 1
 
         return idx
@@ -60,7 +60,7 @@ class StringTable:
         """
         fragments = [
             '"%s\\0" /* %s */' % (
-                te[0].encode('string_escape'),
+                te[0],
                 ', '.join(str(idx) for idx in te[2])
             )
             for te in self.table
@@ -181,7 +181,7 @@ def parse(filename, regs, packets):
             name = split[0]
             value = int(split[1], 0)
 
-            for (n,v) in field.values:
+            for (n, v) in field.values:
                 if n == name:
                     if v != value:
                         sys.exit('Value mismatch: name = ' + name)
@@ -217,10 +217,10 @@ def write_tables(regs, packets):
     strings = StringTable()
     strings_offsets = IntTable("int")
 
-    print '/* This file is autogenerated by egd_tables.py from evergreend.h. Do not edit directly. */'
-    print
-    print CopyRight.strip()
-    print '''
+    print('/* This file is autogenerated by egd_tables.py from evergreend.h. Do not edit directly. */')
+    print()
+    print((CopyRight.strip()))
+    print('''
 #ifndef EG_TABLES_H
 #define EG_TABLES_H
 
@@ -242,20 +242,20 @@ struct eg_packet3 {
         unsigned name_offset;
         unsigned op;
 };
-'''
+''')
 
-    print 'static const struct eg_packet3 packet3_table[] = {'
+    print('static const struct eg_packet3 packet3_table[] = {')
     for pkt in packets:
-        print '\t{%s, %s},' % (strings.add(pkt[5:]), pkt)
-    print '};'
-    print
+        print(('\t{%s, %s},' % (strings.add(pkt[5:]), pkt)))
+    print('};')
+    print()
 
-    print 'static const struct eg_field egd_fields_table[] = {'
+    print('static const struct eg_field egd_fields_table[] = {')
 
     fields_idx = 0
     for reg in regs:
         if len(reg.fields) and reg.own_fields:
-            print '\t/* %s */' % (fields_idx)
+            print(('\t/* %s */' % (fields_idx)))
 
             reg.fields_idx = fields_idx
 
@@ -266,34 +266,34 @@ struct eg_packet3 {
                         while value[1] >= len(values_offsets):
                             values_offsets.append(-1)
                         values_offsets[value[1]] = strings.add(strip_prefix(value[0]))
-                    print '\t{%s, %s(~0u), %s, %s},' % (
+                    print(('\t{%s, %s(~0u), %s, %s},' % (
                         strings.add(field.name), field.s_name,
-                        len(values_offsets), strings_offsets.add(values_offsets))
+                        len(values_offsets), strings_offsets.add(values_offsets))))
                 else:
-                    print '\t{%s, %s(~0u)},' % (strings.add(field.name), field.s_name)
+                    print(('\t{%s, %s(~0u)},' % (strings.add(field.name), field.s_name)))
                 fields_idx += 1
 
-    print '};'
-    print
+    print('};')
+    print()
 
-    print 'static const struct eg_reg egd_reg_table[] = {'
+    print('static const struct eg_reg egd_reg_table[] = {')
     for reg in regs:
         if len(reg.fields):
-            print '\t{%s, %s, %s, %s},' % (strings.add(reg.name), reg.r_name,
-                len(reg.fields), reg.fields_idx if reg.own_fields else reg.fields_owner.fields_idx)
+            print(('\t{%s, %s, %s, %s},' % (strings.add(reg.name), reg.r_name,
+                len(reg.fields), reg.fields_idx if reg.own_fields else reg.fields_owner.fields_idx)))
         else:
-            print '\t{%s, %s},' % (strings.add(reg.name), reg.r_name)
-    print '};'
-    print
+            print(('\t{%s, %s},' % (strings.add(reg.name), reg.r_name)))
+    print('};')
+    print()
 
     strings.emit(sys.stdout, "egd_strings")
 
-    print
+    print()
 
     strings_offsets.emit(sys.stdout, "egd_strings_offsets")
 
-    print
-    print '#endif'
+    print()
+    print('#endif')
 
 
 def main():
-- 
2.11.1

