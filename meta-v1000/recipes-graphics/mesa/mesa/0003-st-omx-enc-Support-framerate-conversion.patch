From 0ed59065a1492b0b98ff7b19bee6d9d7f92a74d8 Mon Sep 17 00:00:00 2001
From: Nishanth Peethambaran <nishanth.peethambaran@amd.com>
Date: Thu, 29 Jun 2017 18:56:25 +0530
Subject: [PATCH 3/3] st/omx/enc: Support framerate conversion

Support OMX config to set encoder framerate

Predict input framerate from input buffer timestamps.
Logic is derived from gst videorate component where two consecutive
input frames are used to decide what action needs to be taken.
Duplicate the previous frame till predicted output timestamp is
more close to new frame than the previous frame. If new frame is
closer, drop the previous frame.

OMX flags, tick_count are populated appropriately. A workaround OR
prediction reset logic is done when a big gap is seen across
timestamps.

Signed-off-by: Indrajit Das <indrajit-kumar.das@amd.com>
---
 src/gallium/state_trackers/omx/vid_enc.c | 194 +++++++++++++++++++++++++++++--
 src/gallium/state_trackers/omx/vid_enc.h |   7 ++
 2 files changed, 192 insertions(+), 9 deletions(-)

diff --git a/src/gallium/state_trackers/omx/vid_enc.c b/src/gallium/state_trackers/omx/vid_enc.c
index a6502ce..ec3b281 100644
--- a/src/gallium/state_trackers/omx/vid_enc.c
+++ b/src/gallium/state_trackers/omx/vid_enc.c
@@ -54,11 +54,19 @@
 #include "entrypoint.h"
 #include "vid_enc.h"
 
+#define DROP_THRESHOLD (100)
+#define DUPLICATE_THRESHOLD (100)
+#define OMX_BUFFERFLAG_CUSTOM_DISCONT (0x00001000)
+#define OMX_BUFFERFLAG_CUSTOM_DUPLICATE (0x00002000)
+
 struct encode_task {
    struct list_head list;
 
    struct pipe_video_buffer *buf;
    OMX_TICKS timestamp;
+   OMX_TICKS tick_count;
+   OMX_U32 flags;
+   bool duplicate;
    unsigned pic_order_cnt;
    struct pipe_resource *bitstream;
    void *feedback;
@@ -255,6 +263,12 @@ static OMX_ERRORTYPE vid_enc_Constructor(OMX_COMPONENTTYPE *comp, OMX_STRING nam
 
    priv->scale.xWidth = OMX_VID_ENC_SCALING_WIDTH_DEFAULT;
    priv->scale.xHeight = OMX_VID_ENC_SCALING_WIDTH_DEFAULT;
+   priv->frc_enable = 0;
+   priv->out_framerate = 0;
+   priv->tick_count = 0;
+   priv->prev_task = NULL;
+   priv->prev_duration = 1;
+   priv->seq_drop_cnt = 0;
 
    LIST_INITHEAD(&priv->free_tasks);
    LIST_INITHEAD(&priv->used_tasks);
@@ -376,7 +390,9 @@ static OMX_ERRORTYPE vid_enc_SetParameter(OMX_HANDLETYPE handle, OMX_INDEXTYPE i
          port = (omx_base_video_PortType *)priv->ports[OMX_BASE_FILTER_OUTPUTPORT_INDEX];
          port->sPortParam.nBufferSize = framesize * 512 / (16*16);
 
-         priv->frame_rate = def->format.video.xFramerate;
+         /* Rate Control algorithm should be operating on output framerate */
+         if (!priv->frc_enable)
+            priv->frame_rate = def->format.video.xFramerate;
 
          priv->callbacks->EventHandler(comp, priv->callbackData, OMX_EventPortSettingsChanged,
                                        OMX_BASE_FILTER_OUTPUTPORT_INDEX, 0, NULL);
@@ -580,6 +596,34 @@ static OMX_ERRORTYPE vid_enc_SetConfig(OMX_HANDLETYPE handle, OMX_INDEXTYPE idx,
 
       break;
    }
+   case OMX_IndexConfigVideoFramerate: {
+      OMX_CONFIG_FRAMERATETYPE *framerate = config;
+      float f_framerate, f_duration;
+
+      r = checkHeader(config, sizeof(OMX_CONFIG_FRAMERATETYPE));
+      if (r)
+         return r;
+
+      /* FIXME: Return OMX_ErrorInvalidState if not called during
+       * Loaded state OR if tunneling not enabled */
+
+      /* FIXME: Use mesa utility function if present to do 1000000/xEncodeFramerate where
+       * xEncodeFramerate is in 15.16 fixed point format */
+      if ((framerate->xEncodeFramerate >> 16) > 0)
+      {
+         f_framerate = (float)(framerate->xEncodeFramerate & 0xFFFF)/0xFFFF;
+         f_framerate += (framerate->xEncodeFramerate >> 16);
+         f_duration = 1000000/f_framerate;
+         priv->tick_count = (OMX_U32)(f_duration + 0.5);
+         priv->frc_enable = true;
+         priv->out_framerate = framerate->xEncodeFramerate;
+         /* fps for Rate control logic */
+         priv->frame_rate = framerate->xEncodeFramerate;
+      } else {
+         return OMX_ErrorBadParameter;
+      }
+      break;
+   }
    default:
       return omx_base_component_SetConfig(handle, idx, config);
    }
@@ -609,6 +653,17 @@ static OMX_ERRORTYPE vid_enc_GetConfig(OMX_HANDLETYPE handle, OMX_INDEXTYPE idx,
 
       break;
    }
+   case OMX_IndexConfigVideoFramerate: {
+      OMX_CONFIG_FRAMERATETYPE *framerate = config;
+
+      r = checkHeader(config, sizeof(OMX_CONFIG_FRAMERATETYPE));
+      if (r)
+         return r;
+
+      framerate->xEncodeFramerate = priv->out_framerate;
+
+      break;
+   }
    default:
       return omx_base_component_GetConfig(handle, idx, config);
    }
@@ -1153,6 +1208,7 @@ static void enc_HandleFrame(omx_base_PortType *port, struct encode_task *task,
       picture_type = PIPE_H264_ENC_PICTURE_TYPE_IDR;
       priv->force_pic_type.IntraRefreshVOP = OMX_FALSE;
       priv->frame_num = 0;
+      task->flags |= OMX_BUFFERFLAG_SYNCFRAME;
    } else if (priv->codec->profile == PIPE_VIDEO_PROFILE_MPEG4_AVC_BASELINE ||
               !(priv->pic_order_cnt % OMX_VID_ENC_P_PERIOD_DEFAULT) ||
               (flags & OMX_BUFFERFLAG_EOS)) {
@@ -1194,12 +1250,39 @@ static void enc_HandleFrame(omx_base_PortType *port, struct encode_task *task,
    }
 }
 
+/* Find whether inp TS is closer to prev TS or new TS.
+ * Return true if prev TS is closer */
+static bool enc_PrevTsCloser(OMX_TICKS inp, OMX_TICKS prev, OMX_TICKS new)
+{
+   OMX_TICKS diff1, diff2;
+
+   /* FIXME: For 32-bit arch */
+   if (prev > inp)
+      diff1 = prev - inp;
+   else
+      diff1 = inp - prev;
+
+   if (new > inp)
+      diff2 = new - inp;
+   else
+      diff2 = inp - new;
+
+   if (diff1 < diff2)
+      return true;
+   else
+      return false;
+}
+
 static OMX_ERRORTYPE vid_enc_EncodeFrame(omx_base_PortType *port, OMX_BUFFERHEADERTYPE *buf)
 {
    OMX_COMPONENTTYPE* comp = port->standCompContainer;
    vid_enc_PrivateType *priv = comp->pComponentPrivate;
    struct input_buf_private *inp = buf->pInputPortPrivate;
-   struct encode_task *task;
+   struct encode_task *task, *process_task;
+   struct encode_task *prev_task = (struct encode_task *)priv->prev_task;
+   OMX_TICKS prev_ts, new_ts;
+   unsigned count = 0;
+   bool ts_break = false;
    OMX_ERRORTYPE err;
 
    enc_MoveTasks(&inp->tasks, &priv->free_tasks);
@@ -1207,9 +1290,13 @@ static OMX_ERRORTYPE vid_enc_EncodeFrame(omx_base_PortType *port, OMX_BUFFERHEAD
    if (!task)
       return OMX_ErrorInsufficientResources;
 
-   if (buf->nFilledLen == 0) {
+   if ((buf->nFilledLen == 0) || (buf->nFlags & OMX_BUFFERFLAG_EOS)) {
       if (buf->nFlags & OMX_BUFFERFLAG_EOS) {
          buf->nFilledLen = buf->nAllocLen;
+         if (priv->frc_enable) {
+            LIST_ADDTAIL(&prev_task->list, &priv->free_tasks);
+            priv->prev_task = NULL;
+         }
          enc_ClearBframes(port, inp);
          enc_MoveTasks(&priv->stacked_tasks, &inp->tasks);
          priv->codec->flush(priv->codec);
@@ -1230,9 +1317,86 @@ static OMX_ERRORTYPE vid_enc_EncodeFrame(omx_base_PortType *port, OMX_BUFFERHEAD
       }
    }
    task->timestamp = buf->nTimeStamp;
+   task->tick_count = buf->nTickCount;
+   task->flags = buf->nFlags;
+
+   if (priv->frc_enable) {
+      if (!prev_task) {
+         /* First Buffer is stored and encode is not initiated
+          * Need two buffer to decide on action */
+         priv->prev_task = (void *)task;
+         priv->next_ts = buf->nTimeStamp;
+         buf->nFilledLen = 0; /* mark buffer as empty */
+         return port->ReturnBufferFunction(port, buf);
+      }
 
-   /* ------- decide pic type, initiate encode & update inp task list ---- */
-   enc_HandleFrame(port, task, buf->nFlags, inp);
+      /* Two frames are available to make a choice */
+      prev_ts = prev_task->timestamp;
+      new_ts = task->timestamp;
+
+      /* Workaround if decoder does not use discontinuity flags to
+       * mark breaks in timestamp, say due to looping */
+      if ((priv->seq_drop_cnt > DROP_THRESHOLD) ||
+            (buf->nFlags & OMX_BUFFERFLAG_CUSTOM_DISCONT))
+         ts_break = true;
+      /* Drop the frame if new frame has older timestamp and
+       * a discontinuity is not detected */
+      if ((new_ts < prev_ts) && !ts_break) {
+         priv->seq_drop_cnt++;
+         LIST_ADDTAIL(&task->list, &priv->free_tasks);
+         buf->nFilledLen = 0; /* mark buffer as empty */
+         return port->ReturnBufferFunction(port, buf);
+      }
+
+      /* Prepare to Flush the prev_task if discontinuity is detected */
+      if (ts_break)
+         new_ts = prev_ts + priv->prev_duration; /* Flush out prev task */
+      priv->prev_duration = new_ts - prev_ts;
+
+      /* Duplicate frames as long as the previous frame timestamp remains
+       *  closer to the expected output timestamp. The expected output
+       *  timestamp would be incremented by output frame duration after
+       *  every encode. Skip/drop the previous frame if output timestamp
+       *  is closer to the new frame */
+      process_task = prev_task;
+      while(enc_PrevTsCloser(priv->next_ts, prev_ts, new_ts)) {
+         priv->seq_drop_cnt = 0;
+         process_task->duplicate = false;
+         if (count) {
+            /* Duplicate the frame */
+            process_task = CALLOC_STRUCT(encode_task);
+            if (!process_task)
+               return OMX_ErrorInsufficientResources;
+            process_task->buf = prev_task->buf;
+            process_task->duplicate = true;
+         }
+         process_task->timestamp = priv->next_ts;
+         process_task->tick_count = priv->tick_count;
+         enc_HandleFrame(port, process_task, process_task->flags, inp);
+         priv->next_ts += priv->tick_count;  /* FIXME: For 32-bit arch */
+         count++;
+         /* Workaround if decoder does not use discontinuity flags to
+          * mark breaks in timestamp, say due to looping */
+         if (count > DUPLICATE_THRESHOLD) {
+            ts_break = true;
+            break;
+         }
+      }
+      if (!count) {
+         /* Previous Frame Dropped */
+         priv->seq_drop_cnt++;
+         LIST_ADDTAIL(&prev_task->list, &priv->free_tasks);
+      }
+      /* The new task becomes the previous task for next iteration */
+      priv->prev_task = (void *)task;
+      /* In case of discontinuity, the new timestamp becomes the
+       * base for output timestamp */
+      if (ts_break)
+         priv->next_ts = task->timestamp;
+   } else {
+      /* ------- decide pic type, initiate encode & update inp task list ---- */
+      enc_HandleFrame(port, task, buf->nFlags, inp);
+   }
 
    if (LIST_IS_EMPTY(&inp->tasks))
       return port->ReturnBufferFunction(port, buf);
@@ -1257,10 +1421,13 @@ static void vid_enc_BufferEncoded(OMX_COMPONENTTYPE *comp, OMX_BUFFERHEADERTYPE*
 
    task = LIST_ENTRY(struct encode_task, inp->tasks.next, list);
    LIST_DEL(&task->list);
-   LIST_ADDTAIL(&task->list, &priv->used_tasks);
+   if (!task->duplicate) {
+      LIST_ADDTAIL(&task->list, &priv->used_tasks);
+   }
 
-   if (!task->bitstream)
-      return;
+   if (!task->bitstream) {
+      goto done;
+   }
 
    /* ------------- map result buffer ----------------- */
 
@@ -1285,7 +1452,16 @@ static void vid_enc_BufferEncoded(OMX_COMPONENTTYPE *comp, OMX_BUFFERHEADERTYPE*
    output->nOffset = 0;
    output->nFilledLen = size; /* mark buffer as full */
    output->nTimeStamp = task->timestamp;
+   output->nTickCount = task->tick_count;
+   output->nFlags = task->flags;
+
+done:
+   if (task->duplicate) {
+      output->nFlags |= OMX_BUFFERFLAG_CUSTOM_DUPLICATE;
+      free (task);
+   }
 
+   if (!priv->frc_enable)
    /* all output buffers contain exactly one frame */
-   output->nFlags = OMX_BUFFERFLAG_ENDOFFRAME;
+      output->nFlags = OMX_BUFFERFLAG_ENDOFFRAME;
 }
diff --git a/src/gallium/state_trackers/omx/vid_enc.h b/src/gallium/state_trackers/omx/vid_enc.h
index a833744..4b73f68 100644
--- a/src/gallium/state_trackers/omx/vid_enc.h
+++ b/src/gallium/state_trackers/omx/vid_enc.h
@@ -74,6 +74,13 @@ DERIVEDCLASS(vid_enc_PrivateType, omx_base_filter_PrivateType)
 	struct list_head used_tasks; \
 	struct list_head b_frames; \
 	struct list_head stacked_tasks; \
+	bool frc_enable; \
+	OMX_U32 out_framerate; \
+	OMX_U32 tick_count; \
+	void *prev_task; \
+	OMX_TICKS prev_duration; \
+	OMX_TICKS next_ts; \
+	OMX_U32 seq_drop_cnt; \
 	OMX_U32 frame_rate; \
 	OMX_U32 frame_num; \
 	OMX_U32 pic_order_cnt; \
-- 
2.7.4

