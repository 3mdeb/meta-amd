From 337d7700945e8d1f0cca497dc9161576c08b190c Mon Sep 17 00:00:00 2001
From: Leo Liu <leo.liu@amd.com>
Date: Thu, 14 Nov 2013 15:47:33 -0500
Subject: [PATCH 14/27] st/omx/enc: implement scaling configuration support v2
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

v2: some further cleanups

Signed-off-by: Leo Liu <leo.liu@amd.com>
Signed-off-by: Christian KÃ¶nig <christian.koenig@amd.com>
---
 src/gallium/state_trackers/omx/vid_enc.c |  101 ++++++++++++++++++++++++++++--
 src/gallium/state_trackers/omx/vid_enc.h |   11 +++-
 2 files changed, 107 insertions(+), 5 deletions(-)

diff --git a/src/gallium/state_trackers/omx/vid_enc.c b/src/gallium/state_trackers/omx/vid_enc.c
index 02afd17..3833f24 100644
--- a/src/gallium/state_trackers/omx/vid_enc.c
+++ b/src/gallium/state_trackers/omx/vid_enc.c
@@ -183,6 +183,12 @@ static OMX_ERRORTYPE vid_enc_Constructor(OMX_COMPONENTTYPE *comp, OMX_STRING nam
    if (!priv->pipe)
       return OMX_ErrorInsufficientResources;
 
+   if (!vl_compositor_init(&priv->compositor, priv->pipe))
+      return OMX_ErrorInsufficientResources;
+
+   if (!vl_compositor_init_state(&priv->cstate, priv->pipe))
+      return OMX_ErrorInsufficientResources;
+
    priv->sPortTypesParam[OMX_PortDomainVideo].nStartPortNumber = 0;
    priv->sPortTypesParam[OMX_PortDomainVideo].nPorts = 2;
    priv->ports = CALLOC(2, sizeof(omx_base_PortType *));
@@ -230,6 +236,9 @@ static OMX_ERRORTYPE vid_enc_Constructor(OMX_COMPONENTTYPE *comp, OMX_STRING nam
    priv->force_pic_type.IntraRefreshVOP = OMX_FALSE; 
    priv->frame_num = 0;
 
+   priv->scale.xWidth = OMX_VID_ENC_SCALING_WIDTH_DEFAULT;
+   priv->scale.xHeight = OMX_VID_ENC_SCALING_WIDTH_DEFAULT;
+
    return OMX_ErrorNone;
 }
 
@@ -247,6 +256,12 @@ static OMX_ERRORTYPE vid_enc_Destructor(OMX_COMPONENTTYPE *comp)
       priv->ports=NULL;
    }
 
+   vl_compositor_cleanup_state(&priv->cstate);
+   vl_compositor_cleanup(&priv->compositor);
+ 
+   if (priv->scale_buffer)
+     priv->scale_buffer->destroy(priv->scale_buffer);
+
    if (priv->pipe)
       priv->pipe->destroy(priv->pipe);
 
@@ -432,6 +447,37 @@ static OMX_ERRORTYPE vid_enc_SetConfig(OMX_HANDLETYPE handle, OMX_INDEXTYPE idx,
       
       break;
    }
+   case OMX_IndexConfigCommonScale: {
+      OMX_CONFIG_SCALEFACTORTYPE *scale = config;
+
+      r = checkHeader(config, sizeof(OMX_CONFIG_SCALEFACTORTYPE));
+      if (r)
+         return r;
+
+      if (scale->xWidth < 176 || scale->xHeight < 144)
+         return OMX_ErrorBadParameter;
+
+      if (priv->scale_buffer) {
+         priv->scale_buffer->destroy(priv->scale_buffer);
+         priv->scale_buffer = NULL;
+      }
+
+      priv->scale = *scale;
+      if (priv->scale.xWidth != 0xffffffff && priv->scale.xHeight != 0xffffffff) {
+         struct pipe_video_buffer templat = {};
+ 
+         templat.buffer_format = PIPE_FORMAT_NV12;
+         templat.chroma_format = PIPE_VIDEO_CHROMA_FORMAT_420;
+         templat.width = priv->scale.xWidth; 
+         templat.height = priv->scale.xHeight; 
+         templat.interlaced = false;
+         priv->scale_buffer = priv->pipe->create_video_buffer(priv->pipe, &templat);
+         if (!priv->scale_buffer)
+            return OMX_ErrorInsufficientResources;
+      }
+
+      break;
+   }
    default:
       return omx_base_component_SetConfig(handle, idx, config);
    }
@@ -441,8 +487,31 @@ static OMX_ERRORTYPE vid_enc_SetConfig(OMX_HANDLETYPE handle, OMX_INDEXTYPE idx,
 
 static OMX_ERRORTYPE vid_enc_GetConfig(OMX_HANDLETYPE handle, OMX_INDEXTYPE idx, OMX_PTR config)
 {
-   //TODO
-   return omx_base_component_GetConfig(handle, idx, config);
+   OMX_COMPONENTTYPE *comp = handle;
+   vid_enc_PrivateType *priv = comp->pComponentPrivate;
+   OMX_ERRORTYPE r;
+
+   if (!config)
+      return OMX_ErrorBadParameter;
+
+   switch(idx) {
+   case OMX_IndexConfigCommonScale: {
+      OMX_CONFIG_SCALEFACTORTYPE *scale = config;
+
+      r = checkHeader(config, sizeof(OMX_CONFIG_SCALEFACTORTYPE));
+      if (r)
+         return r;
+
+      scale->xWidth = priv->scale.xWidth;
+      scale->xHeight = priv->scale.xHeight;
+
+      break;
+   }
+   default:
+      return omx_base_component_GetConfig(handle, idx, config);
+   }
+   
+   return OMX_ErrorNone;
 }
 
 static OMX_ERRORTYPE vid_enc_MessageHandler(OMX_COMPONENTTYPE* comp, internalRequestMessageType *msg)
@@ -460,8 +529,8 @@ static OMX_ERRORTYPE vid_enc_MessageHandler(OMX_COMPONENTTYPE* comp, internalReq
          templat.profile = PIPE_VIDEO_PROFILE_MPEG4_AVC_BASELINE;
          templat.entrypoint = PIPE_VIDEO_ENTRYPOINT_ENCODE;
          templat.chroma_format = PIPE_VIDEO_CHROMA_FORMAT_420;
-         templat.width = port->sPortParam.format.video.nFrameWidth;
-         templat.height = port->sPortParam.format.video.nFrameHeight;
+         templat.width = priv->scale_buffer ? priv->scale.xWidth : port->sPortParam.format.video.nFrameWidth;
+         templat.height = priv->scale_buffer ? priv->scale.xHeight : port->sPortParam.format.video.nFrameHeight;
          templat.max_references = 1;
 
          priv->codec = priv->pipe->create_video_codec(priv->pipe, &templat);
@@ -644,6 +713,30 @@ static OMX_ERRORTYPE vid_enc_EncodeFrame(omx_base_PortType *port, OMX_BUFFERHEAD
                                         ptr, def->nStride, 0);
    }
 
+   /* -------------- scale input image --------- */
+
+   if (priv->scale_buffer) {
+      struct vl_compositor *compositor = &priv->compositor;
+      struct vl_compositor_state *s = &priv->cstate;
+      struct pipe_sampler_view **views;
+      struct pipe_surface **dst_surface;
+      unsigned i;
+
+      views = vbuf->get_sampler_view_planes(vbuf);
+      dst_surface = priv->scale_buffer->get_surfaces(priv->scale_buffer);
+      vl_compositor_clear_layers(s);
+      for (i = 0; i < VL_MAX_SURFACES; ++i) {
+         if (!views[i] || !dst_surface[i])
+            continue;
+         vl_compositor_set_rgba_layer(s, compositor, 0, views[i], NULL, NULL, NULL);
+         vl_compositor_render(s, compositor, dst_surface[i], NULL, false);
+      }
+      priv->pipe->flush(priv->pipe, NULL, 0);
+      
+      size  = priv->scale.xWidth * priv->scale.xHeight * 2; 
+      vbuf = priv->scale_buffer; 
+   } 
+
    /* -------------- allocate output buffer --------- */
 
    inp->bitstream = pipe_buffer_create(priv->pipe->screen, PIPE_BIND_VERTEX_BUFFER,
diff --git a/src/gallium/state_trackers/omx/vid_enc.h b/src/gallium/state_trackers/omx/vid_enc.h
index 3f245d2..c8217f3 100644
--- a/src/gallium/state_trackers/omx/vid_enc.h
+++ b/src/gallium/state_trackers/omx/vid_enc.h
@@ -41,6 +41,9 @@
 #include <bellagio/st_static_component_loader.h>
 #include <bellagio/omx_base_filter.h>
 
+#include "vl/vl_defines.h"
+#include "vl/vl_compositor.h"
+
 #define OMX_VID_ENC_BASE_NAME "OMX.%s.video_encoder"
 #define OMX_VID_ENC_AVC_NAME "OMX.%s.video_encoder.avc"
 #define OMX_VID_ENC_AVC_ROLE "video_encoder.avc"
@@ -52,6 +55,8 @@
 #define OMX_VID_ENC_QUANT_I_FRAMES_DEFAULT 0x1c
 #define OMX_VID_ENC_QUANT_P_FRAMES_DEFAULT 0x1c
 #define OMX_VID_ENC_QUANT_B_FRAMES_DEFAULT 0
+#define OMX_VID_ENC_SCALING_WIDTH_DEFAULT 0xffffffff
+#define OMX_VID_ENC_SCALING_HEIGHT_DEFAULT 0xffffffff
 #define OMX_VID_ENC_IDR_PERIOD_DEFAULT 1000
 
 DERIVEDCLASS(vid_enc_PrivateType, omx_base_filter_PrivateType)
@@ -63,7 +68,11 @@ DERIVEDCLASS(vid_enc_PrivateType, omx_base_filter_PrivateType)
 	OMX_U32 frame_num; \
 	OMX_VIDEO_PARAM_BITRATETYPE bitrate; \
 	OMX_VIDEO_PARAM_QUANTIZATIONTYPE quant; \
-	OMX_CONFIG_INTRAREFRESHVOPTYPE force_pic_type;
+	OMX_CONFIG_INTRAREFRESHVOPTYPE force_pic_type; \
+	struct vl_compositor compositor; \
+	struct vl_compositor_state cstate; \
+	struct pipe_video_buffer *scale_buffer; \
+	OMX_CONFIG_SCALEFACTORTYPE scale; 
 ENDCLASS(vid_enc_PrivateType)
 
 OMX_ERRORTYPE vid_enc_LoaderComponent(stLoaderComponentType *comp);
-- 
1.7.9.5

