From 10c0ecaca3e74ee5d232abb18a500bcf8eb3b59a Mon Sep 17 00:00:00 2001
From: Alex Xie <AlexBin.Xie@amd.com>
Date: Mon, 6 Jun 2016 18:21:09 -0400
Subject: [PATCH 0205/1722] drm/amdgpu: Initialize the variables in a
 straight-forward way
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Initialize the variable in a straight-forward way instead of
hiding the initialization inside the loop. This can also
reduce one function call.

Signed-off-by: Alex Xie <AlexBin.Xie@amd.com>
Reviewed-by: Christian KÃ¶nig <christian.koenig@amd.com>
Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/amdgpu/amdgpu_vm.c | 35 +++++++++++++++++++++++++++-------
 1 file changed, 28 insertions(+), 7 deletions(-)

diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_vm.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_vm.c
index 1836d2d..f054f68 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_vm.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_vm.c
@@ -758,16 +758,36 @@ static void amdgpu_vm_update_ptes(struct amdgpu_device *adev,
 {
 	const uint64_t mask = AMDGPU_VM_PTE_COUNT - 1;
  
-        uint64_t cur_pe_start = ~0, cur_pe_end = ~0, cur_dst = ~0;
+        uint64_t cur_pe_start, cur_pe_end, cur_dst;
         uint64_t addr; /* next GPU address to be updated */
+        uint64_t pt_idx;
+        struct amdgpu_bo *pt;
+        unsigned nptes; /* next number of ptes to be updated */
+        uint64_t next_pe_start;
+ 
+        /* initialize the variables */
+        addr = start;
+        pt_idx = addr >> amdgpu_vm_block_size;
+        pt = vm->page_tables[pt_idx].entry.robj;
+ 
+        if ((addr & ~mask) == (end & ~mask))
+                nptes = end - addr;
+        else
+                nptes = AMDGPU_VM_PTE_COUNT - (addr & mask);
+ 
+        cur_pe_start = amdgpu_bo_gpu_offset(pt);
+        cur_pe_start += (addr & mask) * 8;
+        cur_pe_end = cur_pe_start + 8 * nptes;
+        cur_dst = dst;
+ 
+        /* for next ptb*/
+        addr += nptes;
+        dst += nptes * AMDGPU_GPU_PAGE_SIZE;
 
 	/* walk over the address space and update the page tables */
-	for (addr = start; addr < end; ) {
-		uint64_t pt_idx = addr >> amdgpu_vm_block_size;
-		struct amdgpu_bo *pt = vm->page_tables[pt_idx].entry.robj;
-                unsigned nptes; /* next number of ptes to be updated */
-                uint64_t next_pe_start;
-
+        while (addr < end) {
+                pt_idx = addr >> amdgpu_vm_block_size;
+                pt = vm->page_tables[pt_idx].entry.robj;
 		if ((addr & ~mask) == (end & ~mask))
 			nptes = end - addr;
 		else
@@ -790,6 +810,7 @@ static void amdgpu_vm_update_ptes(struct amdgpu_device *adev,
                         cur_pe_end = next_pe_start + 8 * nptes;
                         cur_dst = dst;
 		}
+                /* for next ptb*/
 		addr += nptes;
 		dst += nptes * AMDGPU_GPU_PAGE_SIZE;
 	}
-- 
2.7.4

