From 10d9917870e9396f32bc6d1b624f0369ed9b2f93 Mon Sep 17 00:00:00 2001
From: Mykola Lysenko <Mykola.Lysenko@amd.com>
Date: Fri, 22 Apr 2016 05:39:14 -0400
Subject: [PATCH 0606/1722] drm/amd/dal: fix in short pulse DPCD read

Read short pulse interrupt register based on DPCD
version

Change-Id: I2801b590d9e4c151166d6206a63d2dececc1fb22
Signed-off-by: Mykola Lysenko <Mykola.Lysenko@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c | 37 +++++++++++++++++++++------
 drivers/gpu/drm/amd/dal/dc/core/dc_link.c     |  9 +++++++
 drivers/gpu/drm/amd/dal/dc/dc.h               | 27 +++++++++++++++++++
 drivers/gpu/drm/amd/dal/dc/inc/core_types.h   | 22 ++--------------
 4 files changed, 67 insertions(+), 28 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c
index d35e34f..c444d04 100644
--- a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c
+++ b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c
@@ -839,15 +839,31 @@ static void handle_hpd_irq(void *param)
 
 static void dm_handle_hpd_rx_irq(struct amdgpu_connector *aconnector)
 {
-	uint8_t esi[8] = { 0 };
+	uint8_t esi[DP_PSR_ERROR_STATUS - DP_SINK_COUNT_ESI] = { 0 };
 	uint8_t dret;
 	bool new_irq_handled = false;
-	/* DPCD 0x2002 - 0x2008 for down stream IRQ from MST, eDP etc. */
+	int dpcd_addr;
+	int dpcd_bytes_to_read;
+
+	const struct dc_link_status *link_status = dc_link_get_status(aconnector->dc_link);
+
+	if (link_status->dpcd_caps->dpcd_rev.raw < 0x12) {
+		dpcd_bytes_to_read = DP_LANE0_1_STATUS - DP_SINK_COUNT;
+		/* DPCD 0x200 - 0x201 for downstream IRQ */
+		dpcd_addr = DP_SINK_COUNT;
+	} else {
+		dpcd_bytes_to_read = DP_PSR_ERROR_STATUS - DP_SINK_COUNT_ESI;
+		/* DPCD 0x2002 - 0x2005 for downstream IRQ */
+		dpcd_addr = DP_SINK_COUNT_ESI;
+	}
+
 	dret = drm_dp_dpcd_read(
 		&aconnector->dm_dp_aux.aux,
-		DP_SINK_COUNT_ESI, esi, 8);
+		dpcd_addr,
+		esi,
+		dpcd_bytes_to_read);
 
-	while (dret == 8) {
+	while (dret == dpcd_bytes_to_read) {
 		uint8_t retry;
 		dret = 0;
 
@@ -863,22 +879,27 @@ static void dm_handle_hpd_rx_irq(struct amdgpu_connector *aconnector)
 
 		if (new_irq_handled) {
 			/* ACK at DPCD to notify down stream */
+			const int ack_dpcd_bytes_to_write =
+				dpcd_bytes_to_read - 1;
+
 			for (retry = 0; retry < 3; retry++) {
 				uint8_t wret;
 
 				wret = drm_dp_dpcd_write(
 					&aconnector->dm_dp_aux.aux,
-					DP_SINK_COUNT_ESI + 1,
+					dpcd_addr + 1,
 					&esi[1],
-					3);
-				if (wret == 3)
+					ack_dpcd_bytes_to_write);
+				if (wret == ack_dpcd_bytes_to_write)
 					break;
 			}
 
 			/* check if there is new irq to be handle */
 			dret = drm_dp_dpcd_read(
 				&aconnector->dm_dp_aux.aux,
-				DP_SINK_COUNT_ESI, esi, 8);
+				dpcd_addr,
+				esi,
+				dpcd_bytes_to_read);
 
 			new_irq_handled = false;
 		} else
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_link.c b/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
index 32b3d23..92d2f3c 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
@@ -926,6 +926,8 @@ static bool construct(
 	link->public.irq_source_hpd = DC_IRQ_SOURCE_INVALID;
 	link->public.irq_source_hpd_rx = DC_IRQ_SOURCE_INVALID;
 
+	link->link_status.dpcd_caps = &link->dpcd_caps;
+
 	link->dc = init_params->dc;
 	link->adapter_srv = as;
 	link->ctx = dc_ctx;
@@ -1379,6 +1381,13 @@ bool dc_link_set_backlight_level(const struct dc_link *public, uint32_t level)
 	return true;
 }
 
+const struct dc_link_status *dc_link_get_status(const struct dc_link *dc_link)
+{
+	struct core_link *link = DC_LINK_TO_CORE(dc_link);
+
+	return &link->link_status;
+}
+
 void core_link_resume(struct core_link *link)
 {
 	if (link->public.connector_signal != SIGNAL_TYPE_VIRTUAL)
diff --git a/drivers/gpu/drm/amd/dal/dc/dc.h b/drivers/gpu/drm/amd/dal/dc/dc.h
index 5fd028c..6e3ab0c5 100644
--- a/drivers/gpu/drm/amd/dal/dc/dc.h
+++ b/drivers/gpu/drm/amd/dal/dc/dc.h
@@ -27,6 +27,7 @@
 #define DC_INTERFACE_H_
 
 #include "dc_types.h"
+#include "dpcd_defs.h"
 #include "grph_object_defs.h"
 #include "logger_types.h"
 #include "gpio_types.h"
@@ -408,6 +409,32 @@ struct dc_link {
 	uint8_t link_enc_hw_inst;
 };
 
+struct dpcd_caps {
+	union dpcd_rev dpcd_rev;
+	union max_lane_count max_ln_count;
+	union max_down_spread max_down_spread;
+
+	/* dongle type (DP converter, CV smart dongle) */
+	enum display_dongle_type dongle_type;
+	/* Dongle's downstream count. */
+	union sink_count sink_count;
+	/* If dongle_type == DISPLAY_DONGLE_DP_HDMI_CONVERTER,
+	indicates 'Frame Sequential-to-lllFrame Pack' conversion capability.*/
+	bool is_dp_hdmi_s3d_converter;
+
+	bool allow_invalid_MSA_timing_param;
+	bool panel_mode_edp;
+	uint32_t sink_dev_id;
+	uint32_t branch_dev_id;
+	int8_t branch_dev_name[6];
+};
+
+struct dc_link_status {
+	struct dpcd_caps *dpcd_caps;
+};
+
+const struct dc_link_status *dc_link_get_status(const struct dc_link *dc_link);
+
 /*
  * Return an enumerated dc_link.  dc_link order is constant and determined at
  * boot time.  They cannot be created or destroyed.
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/core_types.h b/drivers/gpu/drm/amd/dal/dc/inc/core_types.h
index 47c0bfa..03ca083 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/core_types.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/core_types.h
@@ -129,26 +129,6 @@ struct link_init_data {
 	struct adapter_service *adapter_srv;
 };
 
-struct dpcd_caps {
-	union dpcd_rev dpcd_rev;
-	union max_lane_count max_ln_count;
-	union max_down_spread max_down_spread;
-
-	/* dongle type (DP converter, CV smart dongle) */
-	enum display_dongle_type dongle_type;
-	/* Dongle's downstream count. */
-	union sink_count sink_count;
-	/* If dongle_type == DISPLAY_DONGLE_DP_HDMI_CONVERTER,
-	indicates 'Frame Sequential-to-lllFrame Pack' conversion capability.*/
-	bool is_dp_hdmi_s3d_converter;
-
-	bool allow_invalid_MSA_timing_param;
-	bool panel_mode_edp;
-	uint32_t sink_dev_id;
-	uint32_t branch_dev_id;
-	int8_t branch_dev_name[6];
-};
-
 /* DP MST stream allocation (payload bandwidth number) */
 struct link_mst_stream_allocation {
 	/* DIG front */
@@ -190,6 +170,8 @@ struct core_link {
 		bool dp_keep_receiver_powered;
 	} wa_flags;
 	struct link_mst_stream_allocation_table mst_stream_alloc_table;
+
+	struct dc_link_status link_status;
 };
 
 #define DC_LINK_TO_LINK(dc_link) container_of(dc_link, struct core_link, public)
-- 
2.7.4

