From dcfa00de18ea25f511eaf4a05a7a9bb9b14a0ad1 Mon Sep 17 00:00:00 2001
From: Yong Zhao <yong.zhao@amd.com>
Date: Fri, 27 May 2016 18:40:21 -0400
Subject: [PATCH 1572/1722] drm/amdkfd: Reuse function to find a process
 through pasid

The kfd_lookup_process_by_pasid() is just for that purpose, so use
it instead of repeating the code. Meanwhile a small bug is fixed as
well.

Change-Id: I0e4907ebe13d81606786a0b5a47e58be2b48d92b
Signed-off-by: Yong Zhao <yong.zhao@amd.com>
---
 drivers/gpu/drm/amd/amdkfd/kfd_process.c | 18 +++++-------------
 1 file changed, 5 insertions(+), 13 deletions(-)

diff --git a/drivers/gpu/drm/amd/amdkfd/kfd_process.c b/drivers/gpu/drm/amd/amdkfd/kfd_process.c
index 3bc10d8..6964174 100644
--- a/drivers/gpu/drm/amd/amdkfd/kfd_process.c
+++ b/drivers/gpu/drm/amd/amdkfd/kfd_process.c
@@ -685,22 +685,13 @@ void kfd_unbind_process_from_device(struct kfd_dev *dev, unsigned int pasid)
 {
 	struct kfd_process *p;
 	struct kfd_process_device *pdd;
-	int idx, i;
 	long status = -EFAULT;
 
 	BUG_ON(dev == NULL);
 
-	idx = srcu_read_lock(&kfd_processes_srcu);
-
-	hash_for_each_rcu(kfd_processes_table, i, p, kfd_processes)
-		if (p->pasid == pasid)
-			break;
-
-	srcu_read_unlock(&kfd_processes_srcu, idx);
+	p = kfd_lookup_process_by_pasid(pasid);
 
-	BUG_ON(p->pasid != pasid);
-
-	down_write(&p->lock);
+	BUG_ON(!p);
 
 	mutex_lock(get_dbgmgr_mutex());
 
@@ -867,7 +858,7 @@ void kfd_process_device_remove_obj_handle(struct kfd_process_device *pdd,
 /* This returns with process->lock read-locked. */
 struct kfd_process *kfd_lookup_process_by_pasid(unsigned int pasid)
 {
-	struct kfd_process *p;
+	struct kfd_process *p, *ret_p = NULL;
 	unsigned int temp;
 
 	int idx = srcu_read_lock(&kfd_processes_srcu);
@@ -875,13 +866,14 @@ struct kfd_process *kfd_lookup_process_by_pasid(unsigned int pasid)
 	hash_for_each_rcu(kfd_processes_table, temp, p, kfd_processes) {
 		if (p->pasid == pasid) {
 			down_read(&p->lock);
+			ret_p = p;
 			break;
 		}
 	}
 
 	srcu_read_unlock(&kfd_processes_srcu, idx);
 
-	return p;
+	return ret_p;
 }
 
 /* This returns with process->lock read-locked. */
-- 
2.7.4

