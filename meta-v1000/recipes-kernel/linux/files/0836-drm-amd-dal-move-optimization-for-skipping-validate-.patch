From 882f76aeb84d2e14b69f19f0612f0ce514ad79dd Mon Sep 17 00:00:00 2001
From: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date: Fri, 19 Aug 2016 17:14:58 -0400
Subject: [PATCH 0836/1722] drm/amd/dal: move optimization for skipping
 validate to dc

Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/core/dc.c          | 75 +++++++++++++++++++++++----
 drivers/gpu/drm/amd/dal/dc/core/dc_resource.c |  2 +-
 drivers/gpu/drm/amd/dal/dc/inc/resource.h     |  2 +
 3 files changed, 69 insertions(+), 10 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc.c b/drivers/gpu/drm/amd/dal/dc/core/dc.c
index 9a4c7b6..018cc77 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc.c
@@ -493,6 +493,40 @@ void dc_destroy(struct dc **dc)
 	*dc = NULL;
 }
 
+static bool is_validation_required(
+		const struct core_dc *dc,
+		const struct dc_validation_set set[],
+		int set_count)
+{
+	const struct validate_context *context = dc->current_context;
+	int i, j;
+
+	if (context->target_count != set_count)
+		return true;
+
+	for (i = 0; i < set_count; i++) {
+
+		if (set[i].surface_count != context->target_status[i].surface_count)
+			return true;
+		if (!is_target_unchanged(DC_TARGET_TO_CORE(set[i].target), context->targets[i]))
+			return true;
+
+		for (j = 0; j < set[i].surface_count; j++) {
+			struct dc_surface temp_surf = { 0 };
+
+			temp_surf = *context->target_status[i].surfaces[j];
+			temp_surf.clip_rect = set[i].surfaces[j]->clip_rect;
+			temp_surf.dst_rect.x = set[i].surfaces[j]->dst_rect.x;
+			temp_surf.dst_rect.y = set[i].surfaces[j]->dst_rect.y;
+
+			if (memcmp(&temp_surf, set[i].surfaces[j], sizeof(temp_surf)) != 0)
+				return true;
+		}
+	}
+
+	return false;
+}
+
 bool dc_validate_resources(
 		const struct dc *dc,
 		const struct dc_validation_set set[],
@@ -502,6 +536,9 @@ bool dc_validate_resources(
 	enum dc_status result = DC_ERROR_UNEXPECTED;
 	struct validate_context *context;
 
+	if (!is_validation_required(core_dc, set, set_count))
+		return true;
+
 	context = dm_alloc(sizeof(struct validate_context));
 	if(context == NULL)
 		goto context_alloc_fail;
@@ -965,8 +1002,35 @@ bool dc_pre_commit_surfaces_to_target(
 	int new_enabled_surface_count = 0;
 
 	if (core_dc->current_context->target_count == 0)
-		return NULL;
-
+                return false;
+ 
+        /* Cannot commit surface to a target that is not commited */
+        for (i = 0; i < core_dc->current_context->target_count; i++)
+                if (target == core_dc->current_context->targets[i])
+                        break;
+ 
+        target_status = &core_dc->current_context->target_status[i];
+ 
+        if (new_surface_count == target_status->surface_count) {
+                bool skip_pre = true;
+ 
+                for (i = 0; i < target_status->surface_count; i++) {
+                        struct dc_surface temp_surf = { 0 };
+ 
+                        temp_surf = *target_status->surfaces[i];
+                        temp_surf.clip_rect = new_surfaces[i]->clip_rect;
+                        temp_surf.dst_rect.x = new_surfaces[i]->dst_rect.x;
+                        temp_surf.dst_rect.y = new_surfaces[i]->dst_rect.y;
+ 
+                        if (memcmp(&temp_surf, new_surfaces[i], sizeof(temp_surf)) != 0) {
+                                skip_pre = false;
+                                break;
+                        }
+                }
+ 
+                if (skip_pre)
+                        return true;
+        }
 
 	context = dm_alloc(sizeof(struct validate_context));
 
@@ -978,13 +1042,6 @@ bool dc_pre_commit_surfaces_to_target(
 
 	resource_validate_ctx_copy_construct(core_dc->current_context, context);
 
-	/* Cannot commit surface to a target that is not commited */
-	for (i = 0; i < context->target_count; i++)
-		if (target == context->targets[i])
-			break;
-
-	target_status = &context->target_status[i];
-
 	for (i = 0; i < target_status->surface_count; i++)
 		if (target_status->surfaces[i]->visible)
 			current_enabled_surface_count++;
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c b/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
index e18fced..4175b8d 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
@@ -741,7 +741,7 @@ static bool are_stream_backends_same(
 	return true;
 }
 
-static bool is_target_unchanged(
+bool is_target_unchanged(
 	const struct core_target *old_target, const struct core_target *target)
 {
 	int i;
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/resource.h b/drivers/gpu/drm/amd/dal/dc/inc/resource.h
index 23c3c6a..b467566 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/resource.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/resource.h
@@ -91,6 +91,8 @@ struct pipe_ctx *find_idle_secondary_pipe(struct resource_context *res_ctx);
 bool resource_is_stream_unchanged(
 	const struct validate_context *old_context, struct core_stream *stream);
 
+bool is_target_unchanged(
+	const struct core_target *old_target, const struct core_target *target);
 bool resource_validate_attach_surfaces(
 		const struct dc_validation_set set[],
 		int set_count,
-- 
2.7.4

