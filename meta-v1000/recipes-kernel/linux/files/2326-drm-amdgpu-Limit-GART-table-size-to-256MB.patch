From 9ecb4d182614e0b3567124bfb8e5f612b8ed7772 Mon Sep 17 00:00:00 2001
From: Felix Kuehling <Felix.Kuehling@amd.com>
Date: Thu, 15 Jun 2017 16:34:15 -0400
Subject: [PATCH 2326/2500] drm/amdgpu: Limit GART table size to 256MB

This prevents excessive VRAM usage on large-BAR GPUs. Also removed the
unnecessary alignment to powers of 2.

Change-Id: I51bec551def4c71ad5928aca0d6d29d2bd0b2994
Signed-off-by: Felix Kuehling <Felix.Kuehling@amd.com>

 Conflicts:
	drivers/gpu/drm/amd/amdgpu/gmc_v7_0.c
	drivers/gpu/drm/amd/amdgpu/gmc_v8_0.c
Signed-off-by: Avinash M N <avimn@amd.com>
---
 drivers/gpu/drm/amd/amdgpu/gmc_v7_0.c | 27 ++++++++-------------------
 drivers/gpu/drm/amd/amdgpu/gmc_v8_0.c | 27 ++++++++-------------------
 drivers/gpu/drm/amd/amdgpu/gmc_v9_0.c | 22 +++++-----------------
 3 files changed, 21 insertions(+), 55 deletions(-)

diff --git a/drivers/gpu/drm/amd/amdgpu/gmc_v7_0.c b/drivers/gpu/drm/amd/amdgpu/gmc_v7_0.c
index a4cb5c0..ae7113a 100644
--- a/drivers/gpu/drm/amd/amdgpu/gmc_v7_0.c
+++ b/drivers/gpu/drm/amd/amdgpu/gmc_v7_0.c
@@ -310,9 +310,6 @@ static void gmc_v7_0_mc_program(struct amdgpu_device *adev)
  */
 static int gmc_v7_0_mc_init(struct amdgpu_device *adev)
 {
-	uint64_t gart_size_aligned;
-	struct sysinfo si;
-	
 	adev->mc.vram_width = amdgpu_atombios_get_vram_width(adev);
 	if (!adev->mc.vram_width) {
 		u32 tmp;
@@ -379,13 +376,15 @@ static int gmc_v7_0_mc_init(struct amdgpu_device *adev)
 
 	/* Unless the user has overridden it, compute the GART size */
 	if (amdgpu_gart_size == -1) {
+		struct sysinfo si;
+
 		/* Maximum GTT size is limited by the GART table size
-		 * in visible VRAM and the address space. Use at most
-		 * half of each. */
-		uint64_t max_gtt_size = min(
-			adev->mc.visible_vram_size / 8 *
-				AMDGPU_GPU_PAGE_SIZE / 2,
-			1ULL << 39);
+		 * in visible VRAM. Use at most half of visible VRAM
+		 * or 256MB, whichever is less.
+		 */
+		uint64_t max_gtt_size =
+			min(adev->mc.visible_vram_size / 2, 256ULL << 20)
+			/ 8 * AMDGPU_GPU_PAGE_SIZE;
 
 		si_meminfo(&si);
 		/* Set the GART to map the largest size between either
@@ -399,16 +398,6 @@ static int gmc_v7_0_mc_init(struct amdgpu_device *adev)
 			),
 			1024ULL << 29
 		);
-
-		/* GART sizes computed from physical RAM capacity
-		 * may not always be perfect powers of two.
-		 * Round up starting from the minimum size of 1GB.
-		 */
-		gart_size_aligned = 1024ULL << 20;
-		while (adev->mc.gtt_size > gart_size_aligned)
-			gart_size_aligned <<= 1;
-
-		adev->mc.gtt_size = gart_size_aligned;
 	}
 	else
 		adev->mc.gtt_size = (uint64_t)amdgpu_gart_size << 20;
diff --git a/drivers/gpu/drm/amd/amdgpu/gmc_v8_0.c b/drivers/gpu/drm/amd/amdgpu/gmc_v8_0.c
index 4db8038..a0d9162 100644
--- a/drivers/gpu/drm/amd/amdgpu/gmc_v8_0.c
+++ b/drivers/gpu/drm/amd/amdgpu/gmc_v8_0.c
@@ -472,9 +472,6 @@ static void gmc_v8_0_mc_program(struct amdgpu_device *adev)
  */
 static int gmc_v8_0_mc_init(struct amdgpu_device *adev)
 {
-	uint64_t gart_size_aligned;
-	struct sysinfo si;
-
 	adev->mc.vram_width = amdgpu_atombios_get_vram_width(adev);
 	if (!adev->mc.vram_width) {
 		u32 tmp;
@@ -545,13 +542,15 @@ static int gmc_v8_0_mc_init(struct amdgpu_device *adev)
 
 	/* Unless the user has overridden it, compute the GART size */
 	if (amdgpu_gart_size == -1) {
+		struct sysinfo si;
+
 		/* Maximum GTT size is limited by the GART table size
-		 * in visible VRAM and the address space. Use at most
-		 * half of each. */
-		uint64_t max_gtt_size = min(
-			adev->mc.visible_vram_size / 8 *
-				AMDGPU_GPU_PAGE_SIZE / 2,
-			1ULL << 39);
+		 * in visible VRAM. Use at most half of visible VRAM
+		 * or 256MB, whichever is less.
+		 */
+		uint64_t max_gtt_size =
+			min(adev->mc.visible_vram_size / 2, 256ULL << 20)
+			/ 8 * AMDGPU_GPU_PAGE_SIZE;
 
 		si_meminfo(&si);
 		/* Set the GART to map the largest size between either
@@ -565,16 +564,6 @@ static int gmc_v8_0_mc_init(struct amdgpu_device *adev)
 			),
 			1024ULL << 29
 		);
-
-		/* GART sizes computed from physical RAM capacity
-		 * may not always be perfect powers of two.
-		 * Round up starting from the minimum size of 1GB.
-		 */
-		gart_size_aligned = 1024ULL << 20;
-		while (adev->mc.gtt_size > gart_size_aligned)
-			gart_size_aligned <<= 1;
-
-		adev->mc.gtt_size = gart_size_aligned;
 	}
 	else
 		adev->mc.gtt_size = (uint64_t)amdgpu_gart_size << 20;
diff --git a/drivers/gpu/drm/amd/amdgpu/gmc_v9_0.c b/drivers/gpu/drm/amd/amdgpu/gmc_v9_0.c
index fc4fab0..6743d4e 100644
--- a/drivers/gpu/drm/amd/amdgpu/gmc_v9_0.c
+++ b/drivers/gpu/drm/amd/amdgpu/gmc_v9_0.c
@@ -498,17 +498,15 @@ static int gmc_v9_0_mc_init(struct amdgpu_device *adev)
 	 * size equal to the 1024 or vram, whichever is larger.
 	 */
 	if (amdgpu_gart_size == -1) {
-		uint64_t gart_size_aligned;
 		struct sysinfo si;
 
 		/* Maximum GTT size is limited by the GART table size
-		 * in visible VRAM and the address space. Use at most
-		 * half of each.
+		 * in visible VRAM. Use at most half of visible VRAM
+		 * or 256MB, whichever is less.
 		 */
-		uint64_t max_gtt_size = min(
-			adev->mc.visible_vram_size / 8 *
-				AMDGPU_GPU_PAGE_SIZE / 2,
-			1ULL << 39);
+		uint64_t max_gtt_size =
+			min(adev->mc.visible_vram_size / 2, 256ULL << 20)
+			/ 8 * AMDGPU_GPU_PAGE_SIZE;
 
 		si_meminfo(&si);
 		/* Set the GART to map the largest size between either
@@ -521,16 +519,6 @@ static int gmc_v9_0_mc_init(struct amdgpu_device *adev)
 			),
 			max_gtt_size
 		);
-
-		/* GART sizes computed from physical RAM capacity
-		 * may not always be perfect powers of two.
-		 * Round up starting from the minimum size of 1GB.
-		 */
-		gart_size_aligned = 1024ULL << 20;
-		while (adev->mc.gtt_size > gart_size_aligned)
-			gart_size_aligned <<= 1;
-
-		adev->mc.gtt_size = gart_size_aligned;
 	} else
 		adev->mc.gtt_size = (uint64_t)amdgpu_gart_size << 20;
 
-- 
2.7.4

