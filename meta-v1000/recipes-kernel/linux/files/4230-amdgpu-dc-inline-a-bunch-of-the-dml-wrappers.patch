From 743b7ae8d1fe0adfee46d21492467cd17aecc7cd Mon Sep 17 00:00:00 2001
From: Harry Wentland <harry.wentland@amd.com>
Date: Thu, 28 Sep 2017 10:45:26 +1000
Subject: [PATCH 4230/5855] amdgpu/dc: inline a bunch of the dml wrappers.

This reduces the code size.

This is basically a redo of Dave's change with the same name
on top of the latest DML.

Signed-off-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
---
 .../gpu/drm/amd/display/dc/dml/display_mode_vba.c  |   2 +
 .../drm/amd/display/dc/dml/display_rq_dlg_calc.c   |   2 +
 .../amd/display/dc/dml/dml1_display_rq_dlg_calc.c  |   2 +
 .../gpu/drm/amd/display/dc/dml/dml_common_defs.c   |  67 +-------------
 .../gpu/drm/amd/display/dc/dml/dml_common_defs.h   |  14 ---
 .../gpu/drm/amd/display/dc/dml/dml_inline_defs.h   | 102 +++++++++++++++++++++
 .../gpu/drm/amd/display/dc/dml/soc_bounding_box.c  |   1 +
 7 files changed, 110 insertions(+), 80 deletions(-)
 create mode 100644 drivers/gpu/drm/amd/display/dc/dml/dml_inline_defs.h

diff --git a/drivers/gpu/drm/amd/display/dc/dml/display_mode_vba.c b/drivers/gpu/drm/amd/display/dc/dml/display_mode_vba.c
index 6a39370..ea661ee 100644
--- a/drivers/gpu/drm/amd/display/dc/dml/display_mode_vba.c
+++ b/drivers/gpu/drm/amd/display/dc/dml/display_mode_vba.c
@@ -26,6 +26,8 @@
 #include "display_mode_lib.h"
 #include "display_mode_vba.h"
 
+#include "dml_inline_defs.h"
+
 static const unsigned int NumberOfStates = DC__VOLTAGE_STATES;
 
 static void fetch_socbb_params(struct display_mode_lib *mode_lib);
diff --git a/drivers/gpu/drm/amd/display/dc/dml/display_rq_dlg_calc.c b/drivers/gpu/drm/amd/display/dc/dml/display_rq_dlg_calc.c
index 657b738..8ba962d 100644
--- a/drivers/gpu/drm/amd/display/dc/dml/display_rq_dlg_calc.c
+++ b/drivers/gpu/drm/amd/display/dc/dml/display_rq_dlg_calc.c
@@ -39,6 +39,8 @@ static void calculate_ttu_cursor(struct display_mode_lib *mode_lib,
 		unsigned int cur_width,
 		enum cursor_bpp cur_bpp);
 
+#include "dml_inline_defs.h"
+
 static unsigned int get_bytes_per_element(enum source_format_class source_format, bool is_chroma)
 {
 	unsigned int ret_val = 0;
diff --git a/drivers/gpu/drm/amd/display/dc/dml/dml1_display_rq_dlg_calc.c b/drivers/gpu/drm/amd/display/dc/dml/dml1_display_rq_dlg_calc.c
index 8229f78..1e4b1e3 100644
--- a/drivers/gpu/drm/amd/display/dc/dml/dml1_display_rq_dlg_calc.c
+++ b/drivers/gpu/drm/amd/display/dc/dml/dml1_display_rq_dlg_calc.c
@@ -26,6 +26,8 @@
 #include "dml1_display_rq_dlg_calc.h"
 #include "display_mode_lib.h"
 
+#include "dml_inline_defs.h"
+
 static unsigned int get_bytes_per_element(enum source_format_class source_format, bool is_chroma)
 {
 	unsigned int ret_val = 0;
diff --git a/drivers/gpu/drm/amd/display/dc/dml/dml_common_defs.c b/drivers/gpu/drm/amd/display/dc/dml/dml_common_defs.c
index 2af6d15..101fb6f 100644
--- a/drivers/gpu/drm/amd/display/dc/dml/dml_common_defs.c
+++ b/drivers/gpu/drm/amd/display/dc/dml/dml_common_defs.c
@@ -26,37 +26,7 @@
 #include "dml_common_defs.h"
 #include "../calcs/dcn_calc_math.h"
 
-double dml_min(double a, double b)
-{
-	return (double) dcn_bw_min2(a, b);
-}
-
-double dml_max(double a, double b)
-{
-	return (double) dcn_bw_max2(a, b);
-}
-double dml_max3(double a, double b, double c)
-{
-	return dml_max(dml_max(a, b), c);
-}
-double dml_max4(double a, double b, double c, double d)
-{
-	return dml_max(dml_max(a, b), dml_max(c, d));
-}
-double dml_max5(double a, double b, double c, double d, double e)
-{
-	return dml_max(dml_max4(a, b, c, d), e);
-}
-
-double dml_ceil(double a, double granularity)
-{
-	return (double) dcn_bw_ceil2(a, granularity);
-}
-
-double dml_floor(double a, double granularity)
-{
-	return (double) dcn_bw_floor2(a, granularity);
-}
+#include "dml_inline_defs.h"
 
 double dml_round(double a)
 {
@@ -70,16 +40,6 @@ double dml_round(double a)
 		return floor;
 }
 
-int dml_log2(double x)
-{
-	return dml_round((double)dcn_bw_log(x, 2));
-}
-
-double dml_pow(double a, int exp)
-{
-	return (double) dcn_bw_pow(a, exp);
-}
-
 unsigned int dml_round_to_multiple(
 	unsigned int num,
 	unsigned int multiple,
@@ -101,16 +61,6 @@ unsigned int dml_round_to_multiple(
 		return (num - remainder);
 }
 
-double dml_fmod(double f, int val)
-{
-	return (double) dcn_bw_mod(f, val);
-}
-
-double dml_ceil_2(double f)
-{
-	return (double) dcn_bw_ceil2(f, 2);
-}
-
 bool dml_util_is_420(enum source_format_class sorce_format)
 {
 	bool val = false;
@@ -143,18 +93,3 @@ bool dml_util_is_420(enum source_format_class sorce_format)
 
 	return val;
 }
-
-double dml_ceil_ex(double x, double granularity)
-{
-	return (double) dcn_bw_ceil2(x, granularity);
-}
-
-double dml_floor_ex(double x, double granularity)
-{
-	return (double) dcn_bw_floor2(x, granularity);
-}
-
-double dml_log(double x, double base)
-{
-	return (double) dcn_bw_log(x, base);
-}
diff --git a/drivers/gpu/drm/amd/display/dc/dml/dml_common_defs.h b/drivers/gpu/drm/amd/display/dc/dml/dml_common_defs.h
index ba01bbb..a55f4d5 100644
--- a/drivers/gpu/drm/amd/display/dc/dml/dml_common_defs.h
+++ b/drivers/gpu/drm/amd/display/dc/dml/dml_common_defs.h
@@ -34,23 +34,9 @@
 #define dml_print(str, ...) {dm_logger_write(mode_lib->logger, LOG_DML, str, ##__VA_ARGS__); }
 #define DTRACE(str, ...) {dm_logger_write(mode_lib->logger, LOG_DML, str, ##__VA_ARGS__); }
 
-double dml_min(double a, double b);
-double dml_max(double a, double b);
-double dml_max3(double a, double b, double c);
-double dml_max4(double a, double b, double c, double d);
-double dml_max5(double a, double b, double c, double d, double e);
 bool dml_util_is_420(enum source_format_class sorce_format);
-double dml_ceil_ex(double x, double granularity);
-double dml_floor_ex(double x, double granularity);
-double dml_log(double x, double base);
-double dml_ceil(double a, double granularity);
-double dml_floor(double a, double granularity);
 double dml_round(double a);
-int dml_log2(double x);
-double dml_pow(double a, int exp);
 unsigned int dml_round_to_multiple(
 			unsigned int num, unsigned int multiple, bool up);
-double dml_fmod(double f, int val);
-double dml_ceil_2(double f);
 
 #endif /* __DC_COMMON_DEFS_H__ */
diff --git a/drivers/gpu/drm/amd/display/dc/dml/dml_inline_defs.h b/drivers/gpu/drm/amd/display/dc/dml/dml_inline_defs.h
new file mode 100644
index 0000000..105c672
--- /dev/null
+++ b/drivers/gpu/drm/amd/display/dc/dml/dml_inline_defs.h
@@ -0,0 +1,102 @@
+/*
+ * Copyright 2017 Advanced Micro Devices, Inc.
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in
+ * all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
+ * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+ * OTHER DEALINGS IN THE SOFTWARE.
+ *
+ * Authors: AMD
+ *
+ */
+
+#ifndef __DML_INLINE_DEFS_H__
+#define __DML_INLINE_DEFS_H__
+
+#include "dml_common_defs.h"
+#include "../calcs/dcn_calc_math.h"
+
+static inline double dml_min(double a, double b)
+{
+	return (double) dcn_bw_min2(a, b);
+}
+
+static inline double dml_max(double a, double b)
+{
+	return (double) dcn_bw_max2(a, b);
+}
+
+static inline double dml_max3(double a, double b, double c)
+{
+	return dml_max(dml_max(a, b), c);
+}
+
+static inline double dml_max4(double a, double b, double c, double d)
+{
+	return dml_max(dml_max(a, b), dml_max(c, d));
+}
+
+static inline double dml_max5(double a, double b, double c, double d, double e)
+{
+	return dml_max(dml_max4(a, b, c, d), e);
+}
+
+static inline double dml_ceil(double a, double granularity)
+{
+	return (double) dcn_bw_ceil2(a, granularity);
+}
+
+static inline double dml_floor(double a, double granularity)
+{
+	return (double) dcn_bw_floor2(a, granularity);
+}
+
+static inline int dml_log2(double x)
+{
+	return dml_round((double)dcn_bw_log(x, 2));
+}
+
+static inline double dml_pow(double a, int exp)
+{
+	return (double) dcn_bw_pow(a, exp);
+}
+
+static inline double dml_fmod(double f, int val)
+{
+	return (double) dcn_bw_mod(f, val);
+}
+
+static inline double dml_ceil_2(double f)
+{
+	return (double) dcn_bw_ceil2(f, 2);
+}
+
+static inline double dml_ceil_ex(double x, double granularity)
+{
+	return (double) dcn_bw_ceil2(x, granularity);
+}
+
+static inline double dml_floor_ex(double x, double granularity)
+{
+	return (double) dcn_bw_floor2(x, granularity);
+}
+
+static inline double dml_log(double x, double base)
+{
+	return (double) dcn_bw_log(x, base);
+}
+
+#endif
diff --git a/drivers/gpu/drm/amd/display/dc/dml/soc_bounding_box.c b/drivers/gpu/drm/amd/display/dc/dml/soc_bounding_box.c
index 8b85125..bc7d8c7 100644
--- a/drivers/gpu/drm/amd/display/dc/dml/soc_bounding_box.c
+++ b/drivers/gpu/drm/amd/display/dc/dml/soc_bounding_box.c
@@ -26,6 +26,7 @@
 #include "display_mode_lib.h"
 #include "dc_features.h"
 
+#include "dml_inline_defs.h"
 void dml_socbb_set_latencies(soc_bounding_box_st *to_box, soc_bounding_box_st *from_box)
 {
 	to_box->dram_clock_change_latency_us = from_box->dram_clock_change_latency_us;
-- 
2.7.4

