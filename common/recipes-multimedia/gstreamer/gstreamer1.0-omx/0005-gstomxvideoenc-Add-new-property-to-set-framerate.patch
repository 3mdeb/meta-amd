From 9ea8f85d9b9fac5de07256bd7a5f2e3f73291f3f Mon Sep 17 00:00:00 2001
From: Nishanth Peethambaran <nishanth.peethambaran@amd.com>
Date: Tue, 22 Mar 2016 18:58:42 -0400
Subject: [PATCH 2/3] gstomxvideoenc: Add new property to set framerate

Signed-off-by: Nishanth Peethambaran <nishanth.peethambaran@amd.com>
---
 omx/gstomxvideoenc.c | 89 +++++++++++++++++++++++++++++++++++++++++++++++++++-
 omx/gstomxvideoenc.h |  4 +++
 2 files changed, 92 insertions(+), 1 deletion(-)

diff --git a/omx/gstomxvideoenc.c b/omx/gstomxvideoenc.c
index a1bc9fb..54c8f2c 100644
--- a/omx/gstomxvideoenc.c
+++ b/omx/gstomxvideoenc.c
@@ -103,7 +103,9 @@ enum
   PROP_POS_X,
   PROP_POS_Y,
   PROP_FIX_TIMESTAMP,
-  PROP_FORCE_KEYFRAME_PERIOD
+  PROP_FORCE_KEYFRAME_PERIOD,
+  PROP_FRAMERATE_NUM,
+  PROP_FRAMERATE_DEN
 };
 
 /* FIXME: Better defaults */
@@ -119,6 +121,7 @@ enum
 #define GST_OMX_VIDEO_ENC_POS_Y_DEFAULT (0)
 #define GST_OMX_VIDEO_ENC_FIX_TIMESTAMP_DEFAULT FALSE
 #define GST_OMX_VIDEO_ENC_FORCE_KEYFRAME_PERIOD (0xffffffff)
+#define GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT (0)
 
 /* class initialization */
 
@@ -223,6 +226,20 @@ gst_omx_video_enc_class_init (GstOMXVideoEncClass * klass)
           "Calculate timestamp (dts/pts) based on duration",
           0, G_PARAM_READWRITE));
 
+  g_object_class_install_property (gobject_class, PROP_FRAMERATE_NUM,
+      g_param_spec_uint ("framerate-num", "Framerate Numerator",
+          "Numerator for output framerate",
+          0, G_MAXUINT, GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+          GST_PARAM_MUTABLE_READY));
+
+  g_object_class_install_property (gobject_class, PROP_FRAMERATE_DEN,
+      g_param_spec_uint ("framerate-den", "Framerate Denominator",
+          "Denominator for output framerate",
+          0, G_MAXUINT, GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+          GST_PARAM_MUTABLE_READY));
+
   element_class->change_state =
       GST_DEBUG_FUNCPTR (gst_omx_video_enc_change_state);
 
@@ -265,6 +282,9 @@ gst_omx_video_enc_init (GstOMXVideoEnc * self)
   self->prev_timestamp = 0;
   self->fix_timestamp = GST_OMX_VIDEO_ENC_FIX_TIMESTAMP_DEFAULT;
   self->force_keyframe_period = GST_OMX_VIDEO_ENC_FORCE_KEYFRAME_PERIOD;
+  self->framerate_num = GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT;
+  self->framerate_den = GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT;
+  self->xEncodeFramerate = 0;
 
   g_mutex_init (&self->drain_lock);
   g_cond_init (&self->drain_cond);
@@ -525,6 +545,49 @@ gst_omx_video_enc_open (GstVideoEncoder * encoder)
             gst_omx_error_to_string (err), err);
       }
     }
+
+    if (self->framerate_num != GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT &&
+        self->framerate_den != GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT) {
+
+      OMX_CONFIG_FRAMERATETYPE framerate_config;
+
+      GST_OMX_INIT_STRUCT (&framerate_config);
+      framerate_config.nPortIndex = self->enc_out_port->index;
+
+      err = gst_omx_component_get_config (self->enc,
+          OMX_IndexConfigVideoFramerate, &framerate_config);
+
+      if (err == OMX_ErrorNone) {
+
+        framerate_config.xEncodeFramerate =
+            (self->framerate_num << 16) / (self->framerate_den);
+        err =
+            gst_omx_component_set_config (self->enc,
+            OMX_IndexConfigVideoFramerate, &framerate_config);
+        if (err == OMX_ErrorUnsupportedIndex) {
+          GST_WARNING_OBJECT (self,
+              "Setting parameter not supported by the component");
+          self->framerate_num = GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT;
+          self->framerate_den = GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT;
+        } else if (err == OMX_ErrorUnsupportedSetting) {
+          GST_WARNING_OBJECT (self,
+              "Setting framerate %u %u not supported by the component",
+              self->framerate_num, self->framerate_den);
+          self->framerate_num = GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT;
+          self->framerate_den = GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT;
+        } else if (err != OMX_ErrorNone) {
+          GST_ERROR_OBJECT (self,
+              "Failed to set encoder framerate config: %s (0x%08x)",
+              gst_omx_error_to_string (err), err);
+          return FALSE;
+        } else {
+          self->xEncodeFramerate = framerate_config.xEncodeFramerate;
+        }
+      } else {
+        GST_ERROR_OBJECT (self, "Failed to get framerate config: %s (0x%08x)",
+            gst_omx_error_to_string (err), err);
+      }
+    }
   }
 
   return TRUE;
@@ -647,6 +710,12 @@ gst_omx_video_enc_set_property (GObject * object, guint prop_id,
     case PROP_FORCE_KEYFRAME_PERIOD:
       self->force_keyframe_period = g_value_get_uint (value);
       break;
+    case PROP_FRAMERATE_NUM:
+      self->framerate_num = g_value_get_uint (value);
+      break;
+    case PROP_FRAMERATE_DEN:
+      self->framerate_den = g_value_get_uint (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -696,6 +765,12 @@ gst_omx_video_enc_get_property (GObject * object, guint prop_id, GValue * value,
     case PROP_FORCE_KEYFRAME_PERIOD:
       g_value_set_uint (value, self->force_keyframe_period);
       break;
+    case PROP_FRAMERATE_NUM:
+      self->framerate_num = g_value_get_uint (value);
+      break;
+    case PROP_FRAMERATE_DEN:
+      self->framerate_den = g_value_get_uint (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -848,6 +923,13 @@ gst_omx_video_enc_handle_output_frame (GstOMXVideoEnc * self, GstOMXPort * port,
       state->info.width = self->scaling_width;
       state->info.height = self->scaling_height;
     }
+    if (GST_OMX_VIDEO_ENC (self)->framerate_num !=
+        GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT &&
+        GST_OMX_VIDEO_ENC (self)->framerate_den !=
+        GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT) {
+      state->info.fps_n = self->framerate_num;
+      state->info.fps_d = self->framerate_den;
+    }
 
     if (!gst_video_encoder_negotiate (GST_VIDEO_ENCODER (self))) {
       gst_video_codec_frame_unref (frame);
@@ -978,6 +1060,11 @@ gst_omx_video_enc_loop (GstOMXVideoEnc * self)
       state->info.width = self->scaling_width;
       state->info.height = self->scaling_height;
     }
+    if (self->framerate_num != GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT &&
+        self->framerate_den != GST_OMX_VIDEO_ENC_FRAMERATE_DEFAULT) {
+      state->info.fps_n = self->framerate_num;
+      state->info.fps_d = self->framerate_den;
+    }
     gst_video_codec_state_unref (state);
 
     if (!gst_video_encoder_negotiate (GST_VIDEO_ENCODER (self))) {
diff --git a/omx/gstomxvideoenc.h b/omx/gstomxvideoenc.h
index d348643..f09a23b 100644
--- a/omx/gstomxvideoenc.h
+++ b/omx/gstomxvideoenc.h
@@ -92,6 +92,10 @@ struct _GstOMXVideoEnc
   gboolean is_keyframe;
 
   GstFlowReturn downstream_flow_ret;
+
+  guint32 framerate_num;
+  guint32 framerate_den;
+  OMX_U32 xEncodeFramerate; /* Q16 format */
 };
 
 struct _GstOMXVideoEncClass
-- 
2.1.4

