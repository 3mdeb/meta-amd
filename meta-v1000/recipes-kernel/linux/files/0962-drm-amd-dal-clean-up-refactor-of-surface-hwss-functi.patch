From 2edcac06c4168aa0282c36ecfb4018a4719aecee Mon Sep 17 00:00:00 2001
From: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date: Fri, 2 Sep 2016 17:08:50 -0400
Subject: [PATCH 0962/1722] drm/amd/dal: clean up refactor of surface hwss
 functions

Change-Id: Ida13204b43dfa2c77ee5ae73dab793c55954cc28
Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/core/dc.c               | 12 ++++----
 .../drm/amd/dal/dc/dce110/dce110_hw_sequencer.c    | 33 ++++------------------
 drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h      | 12 +++-----
 3 files changed, 16 insertions(+), 41 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc.c b/drivers/gpu/drm/amd/dal/dc/core/dc.c
index b382305..fbb1e4c 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc.c
@@ -1251,10 +1251,12 @@ bool dc_isr_commit_surfaces_to_target(
 					true);
 
 			core_dc->hwss.update_plane_addr(core_dc, pipe_ctx);
+
+			if (surface_needs_programming)
+				core_dc->hwss.apply_ctx_for_surface(
+						core_dc, pipe_ctx->surface, context);
 		}
 
-	if (surface_needs_programming)
-		core_dc->hwss.apply_ctx_to_surface(core_dc, context);
 
 	/* Go in reverse order so that all pipes are unlocked simultaneously
 	 * when pipe 0 is unlocked
@@ -1434,6 +1436,7 @@ void dc_update_surfaces_for_target(struct dc *dc, struct dc_surface_update *upda
 				pipe_ctx->scl_data.recout.width -= 2;
 			}
 
+			core_dc->hwss.apply_ctx_for_surface(core_dc, surface, context);
 		}
 		if (updates[i].flip_addr) {
 			surface->public.address = updates[i].flip_addr->address;
@@ -1451,10 +1454,9 @@ void dc_update_surfaces_for_target(struct dc *dc, struct dc_surface_update *upda
 			core_dc->hwss.prepare_pipe_for_context(core_dc, pipe_ctx, context);
 	}
 
-	core_dc->hwss.apply_ctx_to_surface(core_dc, context);
-
 	for (i = context->res_ctx.pool->pipe_count - 1; i >= 0; i--) {
-		struct pipe_ctx *pipe_ctx = &context->res_ctx.pipe_ctx[i];
+		struct core_surface *surface = DC_SURFACE_TO_CORE(updates[i].surface);
+		struct pipe_ctx *pipe_ctx = find_pipe_ctx_by_surface(context, surface);
 
 		core_dc->hwss.pipe_control_lock(
 					core_dc->ctx,
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
index 5c9f0a3..ba92397 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
@@ -1532,8 +1532,7 @@ static void program_blender_if_needed(const struct core_dc *dc,
 }
 
 /**
- * Program the Front End of the Pipe.
- * The Back End was already programmed by Set Mode.
+ * TODO REMOVE, USE UPDATE INSTEAD
  */
 static void set_plane_config(
 	const struct core_dc *dc,
@@ -2053,8 +2052,9 @@ static void dce110_prepare_pipe_for_context(
 	dce110_prepare_pipe_for_surface_commit(dc, pipe_ctx, context);
 }
 
-static void dce110_apply_ctx_to_surface(
+static void dce110_apply_ctx_for_surface(
 		struct core_dc *dc,
+		struct core_surface *surface,
 		struct validate_context *context)
 {
 	int i;
@@ -2062,7 +2062,7 @@ static void dce110_apply_ctx_to_surface(
 	for (i = 0; i < context->res_ctx.pool->pipe_count; i++) {
 		struct pipe_ctx *pipe_ctx = &context->res_ctx.pipe_ctx[i];
 
-		if (!pipe_ctx->surface)
+		if (pipe_ctx->surface != surface)
 			continue;
 
 		dce110_program_front_end_for_pipe(dc, pipe_ctx, context);
@@ -2072,37 +2072,14 @@ static void dce110_apply_ctx_to_surface(
 
 }
 
-static void update_plane_surface(
-	struct core_dc *dc,
-	struct validate_context *context,
-	const struct dc_surface **new_surfaces,
-	uint8_t new_surface_count)
-{
-	int i, j;
-
-	for (i = 0; i < new_surface_count; i++)
-		for (j = 0; j < context->res_ctx.pool->pipe_count; j++) {
-			struct pipe_ctx *pipe_ctx =
-						&context->res_ctx.pipe_ctx[j];
-
-			if (pipe_ctx->surface !=
-					DC_SURFACE_TO_CORE(new_surfaces[i]))
-				continue;
-
-			dc->hwss.set_plane_config(
-				dc, pipe_ctx, &context->res_ctx);
-		}
-}
-
 static const struct hw_sequencer_funcs dce110_funcs = {
 	.init_hw = init_hw,
 	.apply_ctx_to_hw = apply_ctx_to_hw,
 	.prepare_pipe_for_context = dce110_prepare_pipe_for_context,
-	.apply_ctx_to_surface = dce110_apply_ctx_to_surface,
+	.apply_ctx_for_surface = dce110_apply_ctx_for_surface,
 	.set_plane_config = set_plane_config,
 	.update_plane_addr = update_plane_addr,
 	.update_pending_status = update_pending_status,
-	.update_plane_surface = update_plane_surface,
 	.set_gamma_correction = set_gamma_ramp,
 	.power_down = power_down,
 	.enable_accelerated_mode = enable_accelerated_mode,
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h b/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h
index ed81f83..befb801 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h
@@ -56,8 +56,10 @@ struct hw_sequencer_funcs {
 			struct pipe_ctx *pipe_ctx,
 			struct validate_context *context);
 
-	void (*apply_ctx_to_surface)(
-			struct core_dc *dc, struct validate_context *context);
+	void (*apply_ctx_for_surface)(
+			struct core_dc *dc,
+			struct core_surface *surface,
+			struct validate_context *context);
 
 	void (*set_plane_config)(
 			const struct core_dc *dc,
@@ -71,12 +73,6 @@ struct hw_sequencer_funcs {
 	void (*update_pending_status)(
 			struct pipe_ctx *pipe_ctx);
 
-	void (*update_plane_surface)(
-		struct core_dc *dc,
-		struct validate_context *context,
-		const struct dc_surface **new_surfaces,
-		uint8_t new_surface_count);
-
 	bool (*set_gamma_correction)(
 				struct input_pixel_processor *ipp,
 				struct output_pixel_processor *opp,
-- 
2.7.4

