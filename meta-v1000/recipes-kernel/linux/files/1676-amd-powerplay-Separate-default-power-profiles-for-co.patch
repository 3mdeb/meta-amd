From 185fdcfaf84081bb493a6bb6470190167fa8a770 Mon Sep 17 00:00:00 2001
From: Felix Kuehling <Felix.Kuehling@amd.com>
Date: Thu, 6 Oct 2016 14:12:43 -0400
Subject: [PATCH 1676/1722] amd/powerplay: Separate default power profiles for
 compute and gfx

Allow different default power profiles for compute and graphics. Also
report the default profile settings in sysfs.

Use this capability to set the minimum SCLK in the compute profile to
disable the lowest DPM state to work around user-mode SDMA stability
problems.

Change-Id: Id17392908cbb14978d35065a16c98521c9ea2ca1
Signed-off-by: Felix Kuehling <Felix.Kuehling@amd.com>
---
 drivers/gpu/drm/amd/powerplay/amd_powerplay.c     | 52 +++++++++--------------
 drivers/gpu/drm/amd/powerplay/hwmgr/fiji_hwmgr.c  | 18 ++++++--
 drivers/gpu/drm/amd/powerplay/inc/amd_powerplay.h |  3 +-
 drivers/gpu/drm/amd/powerplay/inc/hwmgr.h         |  3 +-
 4 files changed, 37 insertions(+), 39 deletions(-)

diff --git a/drivers/gpu/drm/amd/powerplay/amd_powerplay.c b/drivers/gpu/drm/amd/powerplay/amd_powerplay.c
index de0f171..42349cf 100644
--- a/drivers/gpu/drm/amd/powerplay/amd_powerplay.c
+++ b/drivers/gpu/drm/amd/powerplay/amd_powerplay.c
@@ -845,17 +845,17 @@ static int pp_dpm_reset_power_profile_state(void *handle,
 		return 0;
 	}
 
-	if (request->type == PP_GFX_PROFILE)
-		memset(&hwmgr->gfx_power_profile, 0,
-				sizeof(struct pp_profile));
-	else if (request->type == PP_COMPUTE_PROFILE)
-		memset(&hwmgr->compute_power_profile, 0,
-				sizeof(struct pp_profile));
-
-	hwmgr->current_power_profile = PP_DEFAULT_PROFILE;
-
-	return hwmgr->hwmgr_func->set_power_profile_state(hwmgr,
-			&hwmgr->default_power_profile);
+	if (request->type == PP_GFX_PROFILE) {
+		hwmgr->gfx_power_profile = hwmgr->default_gfx_power_profile;
+		return hwmgr->hwmgr_func->set_power_profile_state(hwmgr,
+					  &hwmgr->gfx_power_profile);
+	} else if (request->type == PP_COMPUTE_PROFILE) {
+		hwmgr->compute_power_profile =
+			hwmgr->default_compute_power_profile;
+		return hwmgr->hwmgr_func->set_power_profile_state(hwmgr,
+					  &hwmgr->compute_power_profile);
+	} else
+		return -EINVAL;
 }
 
 static int pp_dpm_get_power_profile_state(void *handle,
@@ -911,6 +911,8 @@ static int pp_dpm_set_power_profile_state(void *handle,
 		else if (request->type == PP_COMPUTE_PROFILE)
 			memcpy(&hwmgr->compute_power_profile, request,
 					sizeof(struct pp_profile));
+		else
+			return -EINVAL;
 
 		if (request->type == hwmgr->current_power_profile)
 			ret = hwmgr->hwmgr_func->set_power_profile_state(
@@ -920,33 +922,17 @@ static int pp_dpm_set_power_profile_state(void *handle,
 		/* set power profile if it exists */
 		switch (request->type) {
 		case PP_GFX_PROFILE:
-			if (hwmgr->gfx_power_profile.type ==
-					PP_GFX_PROFILE)
-				ret = hwmgr->hwmgr_func->
-						set_power_profile_state(
-						hwmgr,
-						&hwmgr->gfx_power_profile);
-			else
-				ret = hwmgr->hwmgr_func->
-						set_power_profile_state(
-						hwmgr,
-						&hwmgr->default_power_profile);
+			ret = hwmgr->hwmgr_func->set_power_profile_state(
+				hwmgr,
+				&hwmgr->gfx_power_profile);
 			break;
 		case PP_COMPUTE_PROFILE:
-			if (hwmgr->compute_power_profile.type ==
-					PP_COMPUTE_PROFILE)
-				ret = hwmgr->hwmgr_func->
-						set_power_profile_state(
-						hwmgr,
-						&hwmgr->compute_power_profile);
-			break;
-		case PP_DEFAULT_PROFILE:
 			ret = hwmgr->hwmgr_func->set_power_profile_state(
-					hwmgr,
-					&hwmgr->default_power_profile);
+				hwmgr,
+				&hwmgr->compute_power_profile);
 			break;
 		default:
-			break;
+			return -EINVAL;
 		}
 	}
 
diff --git a/drivers/gpu/drm/amd/powerplay/hwmgr/fiji_hwmgr.c b/drivers/gpu/drm/amd/powerplay/hwmgr/fiji_hwmgr.c
index 645d7d5..cf05641 100644
--- a/drivers/gpu/drm/amd/powerplay/hwmgr/fiji_hwmgr.c
+++ b/drivers/gpu/drm/amd/powerplay/hwmgr/fiji_hwmgr.c
@@ -2961,10 +2961,22 @@ static int fiji_save_default_power_profile(struct pp_hwmgr *hwmgr)
 	struct SMU73_Discrete_GraphicsLevel *levels =
 				data->smc_state_table.GraphicsLevel;
 
-	hwmgr->default_power_profile.activity_threshold =
+	hwmgr->default_gfx_power_profile.activity_threshold =
 			be16_to_cpu(levels[0].ActivityLevel);
-	hwmgr->default_power_profile.up_hyst = levels[0].UpHyst;
-	hwmgr->default_power_profile.down_hyst = levels[0].DownHyst;
+	hwmgr->default_gfx_power_profile.up_hyst = levels[0].UpHyst;
+	hwmgr->default_gfx_power_profile.down_hyst = levels[0].DownHyst;
+	hwmgr->default_gfx_power_profile.type = PP_GFX_PROFILE;
+
+	hwmgr->default_compute_power_profile = hwmgr->default_gfx_power_profile;
+	hwmgr->default_compute_power_profile.type = PP_COMPUTE_PROFILE;
+
+	/* Workaround for SDMA instability: disable lowest SCLK DPM state */
+	hwmgr->default_compute_power_profile.min_sclk =
+			be32_to_cpu(levels[1].SclkFrequency);
+	/* TODO: Optimize hysteresis and threshold for compute workloads */
+
+	hwmgr->gfx_power_profile = hwmgr->default_gfx_power_profile;
+	hwmgr->compute_power_profile = hwmgr->default_compute_power_profile;
 
 	return 0;
 }
diff --git a/drivers/gpu/drm/amd/powerplay/inc/amd_powerplay.h b/drivers/gpu/drm/amd/powerplay/inc/amd_powerplay.h
index 0dc4e20..c6c21cf 100644
--- a/drivers/gpu/drm/amd/powerplay/inc/amd_powerplay.h
+++ b/drivers/gpu/drm/amd/powerplay/inc/amd_powerplay.h
@@ -297,8 +297,7 @@ struct pp_states_info {
 };
 
 enum pp_profile_type {
-	PP_DEFAULT_PROFILE,
-	PP_GFX_PROFILE,
+	PP_GFX_PROFILE = 0,
 	PP_COMPUTE_PROFILE,
 };
 
diff --git a/drivers/gpu/drm/amd/powerplay/inc/hwmgr.h b/drivers/gpu/drm/amd/powerplay/inc/hwmgr.h
index 9df8276..5f4734f 100644
--- a/drivers/gpu/drm/amd/powerplay/inc/hwmgr.h
+++ b/drivers/gpu/drm/amd/powerplay/inc/hwmgr.h
@@ -654,7 +654,8 @@ struct pp_hwmgr {
 	/* power profile */
 	struct pp_profile gfx_power_profile;
 	struct pp_profile compute_power_profile;
-	struct pp_profile default_power_profile;
+	struct pp_profile default_gfx_power_profile;
+	struct pp_profile default_compute_power_profile;
 	enum pp_profile_type current_power_profile;
 };
 
-- 
2.7.4

