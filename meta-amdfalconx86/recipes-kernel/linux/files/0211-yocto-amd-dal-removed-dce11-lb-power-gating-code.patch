From 708163d3fd8a0562757a85871ae8ad8ed09822c2 Mon Sep 17 00:00:00 2001
From: Mykola Lysenko <mykola.lysenko@amd.com>
Date: Tue, 31 Mar 2015 08:15:31 -0400
Subject: [PATCH 325/343] amd/dal: removed dce11 lb power gating code

Signed-off-by: Mykola Lysenko <mykola.lysenko@amd.com>
Reviewed-by: Eagle Yeh <eagle.yeh@amd.com>
Reviewed-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Sanjay R Mehta <sanju.mehta@amd.com>
---
 .../amd/dal/controller/dce110/line_buffer_dce110.c | 121 +--------------------
 1 file changed, 2 insertions(+), 119 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/controller/dce110/line_buffer_dce110.c b/drivers/gpu/drm/amd/dal/controller/dce110/line_buffer_dce110.c
index 406126b..b090aee 100644
--- a/drivers/gpu/drm/amd/dal/controller/dce110/line_buffer_dce110.c
+++ b/drivers/gpu/drm/amd/dal/controller/dce110/line_buffer_dce110.c
@@ -314,125 +314,8 @@ static bool enable_power_gating(
 	enum controller_id idx,
 	struct lb_config_data *lb_config)
 {
-	bool ret = false;
-	struct line_buffer_dce110 *lb = LB110_FROM_BASE(base);
-	uint32_t pitch;
-	uint32_t num_lines_max;
-	uint32_t min_required_lb_entries;
-	uint32_t num_lines_required = 0;
-	uint32_t value = 0;
-	uint32_t pixel_width;
-
-	/* Calculate the vertical scaling ratio
-	 * (initialize to 1 for no scaling) */
-
-	if (base->power_gating == false) {
-		/* we are not supporting the line buffer portion power gating
-		 * we are using one time initialisation m_LBx_MEMORY_CTRL = 0
-		 * we are always using full line buffer,
-		 * no partitioning for power saving */
-		return ret;
-	}
-
-	value = dal_read_reg(base->dal_context,
-			lb->lbx_memory_ctrl);
-
-	/* We use src pixel width as default pixel width. When src width > dest
-	 * width then we use dest pixel width for calculations. This is done
-	 * because of prescaler.
-	 */
-	pixel_width = lb_config->src_pixel_width;
-	if (lb_config->dst_pixel_width != 0 &&
-		lb_config->src_pixel_width > lb_config->dst_pixel_width)
-		pixel_width = lb_config->dst_pixel_width;
-
-	pitch = calculate_pitch(lb_config->depth, pixel_width);
-	/* Calculate maximum number of lines*/
-	num_lines_max = LB_ENTRIES_TOTAL_NUMBER / pitch;
-	/* DCE 11.0 LB line calculation, scalar enabled case*/
-	if (lb_config->taps.v_taps > 1) {
-		struct fixed32_32 scale_ratio = dal_fixed32_32_from_fraction(
-			lb_config->src_height, lb_config->dst_height);
-
-		uint32_t vsr_ceil = dal_fixed32_32_ceil(scale_ratio) *
-			(lb_config->interlaced ? 2 : 1);
-
-		if (lb_config->taps.v_taps == vsr_ceil && (vsr_ceil % 2) != 0)
-			num_lines_required = lb_config->taps.v_taps + 2;
-		else
-			num_lines_required = lb_config->taps.v_taps + 1;
-
-	} else if (pixel_width <= 2560) {
-		/*Usually 3 lines, no scalar enabled case.
-		 * At 4k, 2 lines can be used. */
-		/* This means Prefetch can be supported*/
-		num_lines_required = 3;
-	} else {
-		/* This means Prefetch cannot be supported*/
-		num_lines_required = 2;
-	}
-
-	if (num_lines_required > num_lines_max) {
-		/* We somehow approached over the maximum number
-		 * of lines available.  Check calculation. */
-		dal_logger_write(base->dal_context->logger,
-			LOG_MAJOR_WARNING,
-			LOG_MINOR_COMPONENT_GPU,
-			"%s: Exceed max line number",
-			__func__);
-		return ret;
-	}
-	/* Calculate pitch using based class */
-	min_required_lb_entries = num_lines_required * pitch;
-	if (min_required_lb_entries <= LB_ENTRIES_NUMBER_PART_1) {
-		/*the most effective case for power gating feature,
-		 * 2 block are disabled */
-		set_reg_field_value(value, 1, LB_MEMORY_CTRL, LB_MEMORY_CONFIG);
-		ret = true;
-	} else if (min_required_lb_entries <= LB_ENTRIES_NUMBER_PART_2) {
-		/*only 1 block is disabled*/
-		set_reg_field_value(value, 2, LB_MEMORY_CTRL, LB_MEMORY_CONFIG);
-		ret = true;
-	} else {
-		/* If this ASSERT is hit, somehow our calculation
-		 * required more lines than was available for current pipe */
-		if (min_required_lb_entries >= LB_ENTRIES_TOTAL_NUMBER)
-			dal_logger_write(base->dal_context->logger,
-				LOG_MAJOR_WARNING,
-				LOG_MINOR_COMPONENT_GPU,
-				"%s: Exceed max total entry number",
-				__func__);
-		/*all 3 blocks  are enable , all buffer is used*/
-		set_reg_field_value(value, 0, LB_MEMORY_CTRL, LB_MEMORY_CONFIG);
-	}
-
-	dal_write_reg(base->dal_context, lb->lbx_memory_ctrl,
-			value);
-
-	dal_logger_write(base->dal_context->logger,
-		LOG_MAJOR_LINE_BUFFER,
-		LOG_MINOR_LINE_BUFFER_POWERGATING,
-		"LBPG: ControllerId:%d, LbIndex:%d, Src Mode:%dx%d,"\
-		" Dst Height:%d, Vtaps:%d,"\
-		" MEMORY_SIZE:0x%x, NUM_PARTITIONS:%d, MEMORY_CONFIG:%d (%s)\n",
-		idx, lb->index,
-		lb_config->src_pixel_width, lb_config->src_height,
-		lb_config->dst_height, lb_config->taps.v_taps,
-		get_reg_field_value(value, LB_MEMORY_CTRL, LB_MEMORY_SIZE),
-		get_reg_field_value(value, LB_MEMORY_CTRL, LB_NUM_PARTITIONS),
-		get_reg_field_value(value, LB_MEMORY_CTRL, LB_MEMORY_CONFIG),
-		get_reg_field_value(value,
-			LB_MEMORY_CTRL, LB_MEMORY_CONFIG) ==
-				0 ? "all 3 pieces" :
-		get_reg_field_value(value,
-			LB_MEMORY_CTRL, LB_MEMORY_CONFIG) ==
-				1 ? "1 piece" :
-		get_reg_field_value(value,
-			LB_MEMORY_CTRL, LB_MEMORY_CONFIG) ==
-				2 ? "2 pieces" :
-				"***Unkwnown");
-
-	return ret;
+	/* do not power gate */
+	return true;
 }
 
 static void enable_alpha(
-- 
1.9.1

