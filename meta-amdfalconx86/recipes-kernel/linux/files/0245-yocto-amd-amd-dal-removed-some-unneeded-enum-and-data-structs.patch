From 53cd0f621cdfb9f0fc6a757efc87b80e6a86bc6e Mon Sep 17 00:00:00 2001
From: Mykola Lysenko <mykola.lysenko@amd.com>
Date: Thu, 9 Jul 2015 08:48:01 -0400
Subject: [PATCH 362/401] amd/dal: removed some unneeded enum and data structs

This is needed in order to see difference between path_mode and hw_path_mode

Signed-off-by: Mykola Lysenko <mykola.lysenko@amd.com>
Reviewed-by: Eagle Yeh <eagle.yeh@amd.com>
Signed-off-by: Sanjay R Mehta <sanju.mehta@amd.com>
---
 .../dal/display_service/ds_dispatch_mode_setting.c | 53 +---------------------
 .../drm/amd/dal/display_service/ds_translation.c   | 14 ------
 .../drm/amd/dal/display_service/ds_translation.h   |  3 --
 .../drm/amd/dal/display_service/set_mode_params.c  |  3 +-
 .../amd/dal/gpu/dce110/bandwidth_manager_dce110.c  | 46 +++++++++----------
 .../drm/amd/dal/include/bandwidth_manager_types.h  | 28 ++++++------
 .../drm/amd/dal/include/display_clock_interface.h  |  7 +--
 .../gpu/drm/amd/dal/include/hw_sequencer_types.h   | 30 ++++++------
 drivers/gpu/drm/amd/dal/include/scaler_types.h     | 15 +++---
 drivers/gpu/drm/amd/dal/include/set_mode_types.h   | 10 ----
 .../drm/amd/dal/include/validation_common_types.h  | 37 ---------------
 11 files changed, 64 insertions(+), 182 deletions(-)
 delete mode 100644 drivers/gpu/drm/amd/dal/include/validation_common_types.h

diff --git a/drivers/gpu/drm/amd/dal/display_service/ds_dispatch_mode_setting.c b/drivers/gpu/drm/amd/dal/display_service/ds_dispatch_mode_setting.c
index 637f2f7..c991b39 100644
--- a/drivers/gpu/drm/amd/dal/display_service/ds_dispatch_mode_setting.c
+++ b/drivers/gpu/drm/amd/dal/display_service/ds_dispatch_mode_setting.c
@@ -127,14 +127,6 @@ static void convert_mode_info(
 	const struct path_mode *mode,
 	enum build_path_set_reason reason);
 
-/* Convert tiling mode into HW tiling mode */
-static enum hw_tiling_mode hw_tiling_mode_from_tiling_mode(
-	enum tiling_mode mode);
-
-/* Convert rotation angle into HW format */
-static enum hw_rotation_angle hw_rotation_angle_from_rotation(
-	enum rotation_angle rotation);
-
 static enum timing_3d_format get_active_timing_3d_format(
 	enum timing_3d_format timing_3d_format,
 	enum view_3d_format view_3d_format);
@@ -2239,11 +2231,10 @@ static void convert_mode_info(
 
 	info->pixel_format = mode->pixel_format;
 
-	info->tiling_mode =
-		hw_tiling_mode_from_tiling_mode(mode->tiling_mode);
+	info->tiling_mode = mode->tiling_mode;
 
 	info->is_tiling_rotated = mode->is_tiling_rotated;
-	info->rotation = hw_rotation_angle_from_rotation(mode->rotation_angle);
+	info->rotation = mode->rotation_angle;
 
 	/* temporary */
 	info->ds_info.cea_vic = mode->mode_timing->crtc_timing.vic;
@@ -2273,46 +2264,6 @@ static void convert_mode_info(
 	build_scaling_params(ds, mode, scl_type, info);
 }
 
-/*
- * hw_tiling_mode_from_tiling_mode
- *
- * Convert tiling mode into HW tiling mode
- */
-static enum hw_tiling_mode hw_tiling_mode_from_tiling_mode(
-	enum tiling_mode mode)
-{
-	switch (mode) {
-	case TILING_MODE_LINEAR:
-		return HW_TILING_MODE_LINEAR;
-	case TILING_MODE_TILED:
-		return HW_TILING_MODE_TILED;
-	default:
-		return HW_TILING_MODE_INVALID;
-	}
-}
-
-/*
- *  hw_rotation_angle_from_rotation
- *
- * Convert rotation angle into HW format
- */
-static enum hw_rotation_angle hw_rotation_angle_from_rotation(
-	enum rotation_angle rotation)
-{
-	switch (rotation) {
-	case ROTATION_ANGLE_0:
-		return HW_ROTATION_ANGLE_0;
-	case ROTATION_ANGLE_90:
-		return HW_ROTATION_ANGLE_90;
-	case ROTATION_ANGLE_180:
-		return HW_ROTATION_ANGLE_180;
-	case ROTATION_ANGLE_270:
-		return HW_ROTATION_ANGLE_270;
-	default:
-		return HW_ROTATION_ANGLE_INVALID;
-	}
-}
-
 static enum timing_3d_format get_active_timing_3d_format(
 	enum timing_3d_format timing_3d_format,
 	enum view_3d_format view_3d_format)
diff --git a/drivers/gpu/drm/amd/dal/display_service/ds_translation.c b/drivers/gpu/drm/amd/dal/display_service/ds_translation.c
index cf4530d..ed8a551 100644
--- a/drivers/gpu/drm/amd/dal/display_service/ds_translation.c
+++ b/drivers/gpu/drm/amd/dal/display_service/ds_translation.c
@@ -308,20 +308,6 @@ void dal_ds_translation_setup_hw_stereo_mixer_params(
 	}
 }
 
-enum hw_tiling_mode dal_ds_translation_hw_tiling_mode_from_tiling_mode(
-	enum tiling_mode tiling_mode)
-{
-	/* translate the TilingMode */
-	switch (tiling_mode) {
-	case TILING_MODE_LINEAR:
-		return HW_TILING_MODE_LINEAR;
-	case TILING_MODE_TILED:
-		return HW_TILING_MODE_TILED;
-	default:
-		return HW_TILING_MODE_INVALID;
-	}
-}
-
 enum hw_color_space dal_ds_translation_hw_color_space_from_color_space(
 	enum ds_color_space color_space)
 {
diff --git a/drivers/gpu/drm/amd/dal/display_service/ds_translation.h b/drivers/gpu/drm/amd/dal/display_service/ds_translation.h
index a93730e..2d96d47 100644
--- a/drivers/gpu/drm/amd/dal/display_service/ds_translation.h
+++ b/drivers/gpu/drm/amd/dal/display_service/ds_translation.h
@@ -61,9 +61,6 @@ void dal_ds_translation_setup_hw_stereo_mixer_params(
 /*enum hw_pixel_format dal_ds_traslation_hw_pixel_format_from_pixel_format(
 	const enum pixel_format pf);*/
 
-enum hw_tiling_mode dal_ds_translation_hw_tiling_mode_from_tiling_mode(
-	enum tiling_mode tiling_mode);
-
 enum underscan_reason {
 	UNDERSCAN_REASON_PATCH_TIMING,
 	UNDERSCAN_REASON_CHECK_STEP,
diff --git a/drivers/gpu/drm/amd/dal/display_service/set_mode_params.c b/drivers/gpu/drm/amd/dal/display_service/set_mode_params.c
index 394c62e..c30f0d2 100644
--- a/drivers/gpu/drm/amd/dal/display_service/set_mode_params.c
+++ b/drivers/gpu/drm/amd/dal/display_service/set_mode_params.c
@@ -216,8 +216,7 @@ bool dal_set_mode_params_update_tiling_mode_on_path(
 		get_hw_path_mode_by_display_index(smp, display_index);
 
 	if (path_mode) {
-		path_mode->mode.tiling_mode =
-			dal_ds_translation_hw_tiling_mode_from_tiling_mode(tm);
+		path_mode->mode.tiling_mode = tm;
 		return true;
 	} else
 		return false;
diff --git a/drivers/gpu/drm/amd/dal/gpu/dce110/bandwidth_manager_dce110.c b/drivers/gpu/drm/amd/dal/gpu/dce110/bandwidth_manager_dce110.c
index d8d1f9e..9914f0d 100644
--- a/drivers/gpu/drm/amd/dal/gpu/dce110/bandwidth_manager_dce110.c
+++ b/drivers/gpu/drm/amd/dal/gpu/dce110/bandwidth_manager_dce110.c
@@ -824,14 +824,14 @@ static uint32_t convert_controller_id_to_index(
 
 static uint32_t calculate_source_width_rounded_up_to_chunks(
 		struct dal_context *dal_ctx,
-		struct view_params src_vw,
-		enum hw_rotation_angle rotation_angle)
+		struct view src_vw,
+		enum rotation_angle rotation_angle)
 {
 	uint32_t src_width_rounded_up_to_chunks = 0;
 	uint32_t src_width_pixels = src_vw.width;
 
-	if (rotation_angle == HW_ROTATION_ANGLE_90
-			|| rotation_angle == HW_ROTATION_ANGLE_270)
+	if (rotation_angle == ROTATION_ANGLE_90
+			|| rotation_angle == ROTATION_ANGLE_270)
 		src_width_pixels = src_vw.height;
 
 	if (0 == src_width_pixels) {
@@ -871,8 +871,8 @@ static bool is_orthogonal_rotation(const struct bandwidth_params *param)
 {
 	bool orthogonal_rotation = false;
 
-	if (param->rotation_angle == HW_ROTATION_ANGLE_90 ||
-			param->rotation_angle == HW_ROTATION_ANGLE_270)
+	if (param->rotation_angle == ROTATION_ANGLE_90 ||
+			param->rotation_angle == ROTATION_ANGLE_270)
 		orthogonal_rotation = !param->is_tiling_rotated;
 	else
 		orthogonal_rotation = param->is_tiling_rotated;
@@ -1166,7 +1166,7 @@ static void get_memory_size_per_request(
 	*out_useful_lines_in_mem_access = 2;
 	*out_latency_hiding_lines = 2;
 
-	if (param->tiling_mode == HW_TILING_MODE_LINEAR ||
+	if (param->tiling_mode == TILING_MODE_LINEAR ||
 		param->surface_pixel_format < PIXEL_FORMAT_VIDEO_BEGIN) {
 		/* return default values */
 		return;
@@ -1254,7 +1254,7 @@ static void get_bytes_per_request(
 			param->src_vw,
 			param->rotation_angle);
 
-	if (param->tiling_mode == HW_TILING_MODE_LINEAR) {
+	if (param->tiling_mode == TILING_MODE_LINEAR) {
 		/* return default values */
 		*out_bytes_per_request = bytes_per_request;
 		*out_useful_bytes_per_request = useful_bytes_per_request;
@@ -1385,7 +1385,7 @@ static void get_scatter_gather_page_info(
 {
 	uint32_t total_bytes_pp = calc_total_bytes_pp(params);
 
-	if (params->tiling_mode == HW_TILING_MODE_LINEAR) {
+	if (params->tiling_mode == TILING_MODE_LINEAR) {
 		*useful_pte_per_request = 8;
 		*page_width = 4096 / total_bytes_pp;
 		*page_height = 1;
@@ -1398,8 +1398,8 @@ static void get_scatter_gather_page_info(
 		*page_width = 32;
 		*page_height = 32;
 	} else if (total_bytes_pp == 2) {
-		if (params->rotation_angle == HW_ROTATION_ANGLE_0 ||
-			params->rotation_angle == HW_ROTATION_ANGLE_180) {
+		if (params->rotation_angle == ROTATION_ANGLE_0 ||
+			params->rotation_angle == ROTATION_ANGLE_180) {
 			*page_width = 64;
 			*page_height = 32;
 		} else {
@@ -1411,8 +1411,8 @@ static void get_scatter_gather_page_info(
 		*page_height = 64;
 	}
 
-	if (params->rotation_angle == HW_ROTATION_ANGLE_0 ||
-		params->rotation_angle == HW_ROTATION_ANGLE_180)
+	if (params->rotation_angle == ROTATION_ANGLE_0 ||
+		params->rotation_angle == ROTATION_ANGLE_180)
 		*useful_pte_per_request = 8;
 	else
 		*useful_pte_per_request = 1;
@@ -1452,7 +1452,7 @@ static uint32_t get_bytes_per_page_close_open(
 	 * NumberOfDRAMChannels, BytesPerPixel(i) * ScatterGatherPageWidth(i))
 	 */
 	/* scatter gather is always enabled */
-	if (params->tiling_mode != HW_TILING_MODE_LINEAR) {
+	if (params->tiling_mode != TILING_MODE_LINEAR) {
 		uint32_t useful_lines_in_memory;
 		uint32_t dram_channels_num = 2;
 		uint32_t dram_banks_num = 8;
@@ -1484,7 +1484,7 @@ static uint32_t get_bytes_per_page_close_open(
 			dal_max(total_bytes_pp * tile_width_in_pixels *
 				dram_banks_num * dram_channels_num,
 				total_bytes_pp * page_width);
-	} else if (params->tiling_mode == HW_TILING_MODE_LINEAR) {
+	} else if (params->tiling_mode == TILING_MODE_LINEAR) {
 		/* And _
 		 * (PitchInPixelsAfterSurfaceType(i) * BytesPerPixel(i))
 		 * Mod InefficientLinearPitchInBytes = 0 Then)
@@ -2038,8 +2038,8 @@ static struct fixed32_32 calc_vert_scale_ratio(
 		return dal_fixed32_32_one;
 	}
 
-	if (param->rotation_angle == HW_ROTATION_ANGLE_90
-			|| param->rotation_angle == HW_ROTATION_ANGLE_270) {
+	if (param->rotation_angle == ROTATION_ANGLE_90
+			|| param->rotation_angle == ROTATION_ANGLE_270) {
 		/* HW Rotation is being used in Mixed Mode SLS configuration */
 		vsr = dal_fixed32_32_from_fraction(param->src_vw.width,
 				denominator);
@@ -2935,8 +2935,8 @@ static uint32_t get_scatter_gather_pte_request_limit(
 			&useful_pte_per_request);
 
 	if (path_num > 1 ||
-		params->rotation_angle == HW_ROTATION_ANGLE_90 ||
-		params->rotation_angle == HW_ROTATION_ANGLE_270)
+		params->rotation_angle == ROTATION_ANGLE_90 ||
+		params->rotation_angle == ROTATION_ANGLE_270)
 		pte_request_to_eviction_ratio =
 				dal_fixed32_32_from_fraction(3, 10);
 	else
@@ -3127,8 +3127,8 @@ static uint32_t calc_urgency_watermark(
 
 	if (0 != wm_params->dst_view.height
 		&& 0 != wm_params->dst_view.width) {
-		if (HW_ROTATION_ANGLE_0 == wm_params->rotation_angle ||
-			HW_ROTATION_ANGLE_180 == wm_params->rotation_angle) {
+		if (ROTATION_ANGLE_0 == wm_params->rotation_angle ||
+			ROTATION_ANGLE_180 == wm_params->rotation_angle) {
 			h_sr =
 				dal_fixed32_32_div(
 					dal_fixed32_32_from_fraction(
@@ -3224,8 +3224,8 @@ static uint32_t calc_urgency_watermark(
 		uint32_t h_total = wm_params->timing_info.h_total;
 		struct fixed32_32 line_total_pixels;
 
-		if (wm_params->rotation_angle == HW_ROTATION_ANGLE_90 ||
-			wm_params->rotation_angle == HW_ROTATION_ANGLE_270)
+		if (wm_params->rotation_angle == ROTATION_ANGLE_90 ||
+			wm_params->rotation_angle == ROTATION_ANGLE_270)
 			source_width_pixels = wm_params->src_view.height /
 				chroma_factor;
 
diff --git a/drivers/gpu/drm/amd/dal/include/bandwidth_manager_types.h b/drivers/gpu/drm/amd/dal/include/bandwidth_manager_types.h
index ca029ec..10bfab4 100644
--- a/drivers/gpu/drm/amd/dal/include/bandwidth_manager_types.h
+++ b/drivers/gpu/drm/amd/dal/include/bandwidth_manager_types.h
@@ -27,11 +27,8 @@
 
 #include "hw_sequencer_types.h"
 #include "scaler_types.h"
-
 #include "set_mode_types.h"
 
-#include "validation_common_types.h"
-
 struct watermark_timing_params {
 	uint32_t INTERLACED:1;
 	uint32_t h_total;
@@ -42,21 +39,22 @@ struct watermark_timing_params {
 
 /* Parameters needed as input into watermark calculation */
 struct watermark_input_params {
-	enum controller_id controller_id;
 	uint32_t pixel_clk_khz;
 	uint32_t v_taps;
 	uint32_t h_taps;
-	struct view_params src_view;
-	struct view_params dst_view;
 	struct watermark_timing_params timing_info;
-	struct color_quality color_info;
 	enum hw_stereo_format single_stereo_type;
 	bool fbc_enabled;
 	bool lpt_enabled;
-	enum hw_tiling_mode tiling_mode;
-	enum hw_rotation_angle rotation_angle;
 	uint32_t deep_sleep_sclk_khz;
+
+	enum controller_id controller_id;
+	struct view src_view;
+	struct view dst_view;
+	struct color_quality color_info;
+	enum tiling_mode tiling_mode;
 	bool is_tiling_rotated;
+	enum rotation_angle rotation_angle;
 	enum pixel_format surface_pixel_format;
 	enum hw_stereo_format stereo_format;
 };
@@ -72,17 +70,19 @@ struct validation_timing_params {
 
 struct bandwidth_params {
 	enum controller_id controller_id;
-	struct view_params src_vw;
-	struct view_params dst_vw;
+
 	struct validation_timing_params timing_info;
 	struct scaling_tap_info scaler_taps;
+	bool is_chroma_surface;
+
+	struct view src_vw;
+	struct view dst_vw;
 	struct color_quality color_info;
-	enum hw_tiling_mode tiling_mode;
+	enum tiling_mode tiling_mode;
 	bool is_tiling_rotated;
-	enum hw_rotation_angle rotation_angle;
+	enum rotation_angle rotation_angle;
 	enum pixel_format surface_pixel_format;
 	enum hw_stereo_format stereo_format;
-	bool is_chroma_surface;
 };
 
 enum stutter_mode_type {
diff --git a/drivers/gpu/drm/amd/dal/include/display_clock_interface.h b/drivers/gpu/drm/amd/dal/include/display_clock_interface.h
index b575488..2621a94 100644
--- a/drivers/gpu/drm/amd/dal/include/display_clock_interface.h
+++ b/drivers/gpu/drm/amd/dal/include/display_clock_interface.h
@@ -26,9 +26,10 @@
 #ifndef __DISPLAY_CLOCK_INTERFACE_H__
 #define __DISPLAY_CLOCK_INTERFACE_H__
 
-#include "validation_common_types.h"
+#include "hw_sequencer_types.h"
 #include "grph_object_defs.h"
 #include "signal_types.h"
+#include "scaler_types.h"
 
 /* Timing related information*/
 struct dc_timing_params {
@@ -88,8 +89,8 @@ struct min_clock_params {
 	uint32_t id;
 	uint32_t requested_pixel_clock; /* in KHz */
 	uint32_t actual_pixel_clock; /* in KHz */
-	struct view_params source_view;
-	struct view_params dest_view;
+	struct view source_view;
+	struct view dest_view;
 	struct dc_timing_params timing_info;
 	struct dc_scaling_params scaling_info;
 	struct color_quality color_info;
diff --git a/drivers/gpu/drm/amd/dal/include/hw_sequencer_types.h b/drivers/gpu/drm/amd/dal/include/hw_sequencer_types.h
index 258f1c2..66d4738 100644
--- a/drivers/gpu/drm/amd/dal/include/hw_sequencer_types.h
+++ b/drivers/gpu/drm/amd/dal/include/hw_sequencer_types.h
@@ -31,6 +31,17 @@
 #include "link_service_types.h"
 #include "plane_types.h"
 
+struct color_quality {
+	uint32_t bpp_graphics;
+	uint32_t bpp_backend_video;
+};
+
+enum tiling_mode {
+	TILING_MODE_INVALID,
+	TILING_MODE_LINEAR,
+	TILING_MODE_TILED
+};
+
 enum {
 	HW_MAX_NUM_VIEWPORTS = 2,
 	HW_CURRENT_PIPE_INDEX = 0,
@@ -232,13 +243,6 @@ enum hw_overlay_format {
 	HW_OVERLAY_FORMAT_RGB32_2101010
 };
 
-enum hw_tiling_mode {
-	HW_TILING_MODE_INVALID,
-	HW_TILING_MODE_LINEAR,
-	HW_TILING_MODE_TILED
-
-};
-
 enum hw_scale_options {
 	HW_SCALE_OPTION_UNKNOWN,
 	HW_SCALE_OPTION_OVERSCAN, /* multimedia pass through mode */
@@ -272,14 +276,6 @@ enum hw_dithering_options {
 	HW_DITHERING_OPTION_DISABLE
 };
 
-enum hw_rotation_angle {
-	HW_ROTATION_ANGLE_0,
-	HW_ROTATION_ANGLE_90,
-	HW_ROTATION_ANGLE_180,
-	HW_ROTATION_ANGLE_270,
-	HW_ROTATION_ANGLE_INVALID
-};
-
 struct hw_stereo_mixer_params {
 	bool sub_sampling;
 	bool single_pipe;
@@ -299,7 +295,7 @@ struct hw_mode_info {
 	enum hw_scale_options underscan_rule;
 	bool fbc_enabled;
 	bool lpt_enabled;
-	enum hw_tiling_mode tiling_mode;
+	enum tiling_mode tiling_mode;
 	struct hw_stereo_mixer_params stereo_mixer_params;
 	enum hw_dithering_options dithering;
 
@@ -321,7 +317,7 @@ struct hw_mode_info {
 		uint32_t cea_vic;
 	} ds_info;
 
-	enum hw_rotation_angle rotation;
+	enum rotation_angle rotation;
 	bool is_tiling_rotated;
 	/* 'stereo_format' is used in:
 	 *	1. stereo mixer parameters
diff --git a/drivers/gpu/drm/amd/dal/include/scaler_types.h b/drivers/gpu/drm/amd/dal/include/scaler_types.h
index 701793a..e56e515 100644
--- a/drivers/gpu/drm/amd/dal/include/scaler_types.h
+++ b/drivers/gpu/drm/amd/dal/include/scaler_types.h
@@ -35,6 +35,13 @@ enum pixel_type {
 	PIXEL_TYPE_20BPP
 };
 
+/* Rotation angle */
+enum rotation_angle {
+	ROTATION_ANGLE_0 = 0,
+	ROTATION_ANGLE_90,
+	ROTATION_ANGLE_180,
+	ROTATION_ANGLE_270,
+};
 
 /* Pixel format */
 enum pixel_format {
@@ -61,14 +68,6 @@ enum pixel_format {
 	PIXEL_FORMAT_UNKNOWN
 };
 
-/* Rotation angle */
-enum rotation_angle {
-	ROTATION_ANGLE_0 = 0,
-	ROTATION_ANGLE_90,
-	ROTATION_ANGLE_180,
-	ROTATION_ANGLE_270,
-};
-
 struct scaling_tap_info {
 	uint32_t v_taps;
 	uint32_t h_taps;
diff --git a/drivers/gpu/drm/amd/dal/include/set_mode_types.h b/drivers/gpu/drm/amd/dal/include/set_mode_types.h
index 857b196..23ecbb9 100644
--- a/drivers/gpu/drm/amd/dal/include/set_mode_types.h
+++ b/drivers/gpu/drm/amd/dal/include/set_mode_types.h
@@ -29,7 +29,6 @@
 #include "adjustment_types.h"
 #include "hw_adjustment_types.h"
 #include "include/plane_types.h"
-#include "scaler_types.h"
 
 /* Forward declaration */
 struct mode_timing;
@@ -62,15 +61,6 @@ enum scaling_transformation {
 			SCALING_TRANSFORMATION_PRESERVE_ASPECT_RATIO_SCALE
 };
 
-/* Tiling mode */
-enum tiling_mode {
-	TILING_MODE_INVALID,
-	TILING_MODE_LINEAR,
-	TILING_MODE_TILED
-};
-
-
-
 /* State of stereo 3D for workstation */
 enum ws_stereo_state {
 	WS_STEREO_STATE_INACTIVE = 0,
diff --git a/drivers/gpu/drm/amd/dal/include/validation_common_types.h b/drivers/gpu/drm/amd/dal/include/validation_common_types.h
deleted file mode 100644
index 06c27a2..0000000
--- a/drivers/gpu/drm/amd/dal/include/validation_common_types.h
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright 2012-14 Advanced Micro Devices, Inc.
- *
- * Permission is hereby granted, free of charge, to any person obtaining a
- * copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
- * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
- * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
- * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
- * OTHER DEALINGS IN THE SOFTWARE.
- *
- * Authors: AMD
- *
- */
-#ifndef __DAL_VALIDATION_COMMON_TYPES__
-#define __DAL_VALIDATION_COMMON_TYPES__
-
-struct view_params {
-	uint32_t width;
-	uint32_t height;
-};
-struct color_quality {
-	uint32_t bpp_graphics;
-	uint32_t bpp_backend_video;
-};
-
-#endif
-- 
1.9.1

