From f5497767fe3942e4007b05ef767aad11374b9e0d Mon Sep 17 00:00:00 2001
From: Zeyu Fan <Zeyu.Fan@amd.com>
Date: Tue, 4 Oct 2016 11:11:34 -0400
Subject: [PATCH 1214/1722] drm/amd/dal: Link encoder register init refactor.

Change-Id: Ia0aaa498285c1ae064f8b8674718485448130136
Signed-off-by: Zeyu Fan <Zeyu.Fan@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 .../drm/amd/dal/dc/dce100/dce100_link_encoder.c    |   8 +-
 .../drm/amd/dal/dc/dce100/dce100_link_encoder.h    |   4 +-
 .../gpu/drm/amd/dal/dc/dce100/dce100_resource.c    | 100 ++++------
 .../drm/amd/dal/dc/dce110/dce110_link_encoder.c    | 222 ++++++++++-----------
 .../drm/amd/dal/dc/dce110/dce110_link_encoder.h    |  87 ++++++--
 .../gpu/drm/amd/dal/dc/dce110/dce110_resource.c    | 107 ++++------
 .../drm/amd/dal/dc/dce112/dce112_link_encoder.c    |   8 +-
 .../drm/amd/dal/dc/dce112/dce112_link_encoder.h    |   4 +-
 .../gpu/drm/amd/dal/dc/dce112/dce112_resource.c    | 102 ++++------
 .../gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c  |   4 +-
 .../gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.h  |   3 +-
 drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c  |  67 +++----
 12 files changed, 320 insertions(+), 396 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_link_encoder.c b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_link_encoder.c
index 999fcaf..13f4b95 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_link_encoder.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_link_encoder.c
@@ -68,17 +68,13 @@ bool dce100_link_encoder_construct(
 		struct dce110_link_encoder *enc110,
 		const struct encoder_init_data *init_data,
 		const struct dce110_link_enc_registers *link_regs,
-		const struct dce110_link_enc_aux_registers *aux_regs,
-		const struct dce110_link_enc_bl_registers *bl_regs,
-		const struct dce110_link_enc_dmcu_registers *dmcu_regs)
+		const struct dce110_link_enc_aux_registers *aux_regs)
 {
 	dce110_link_encoder_construct(
 			enc110,
 			init_data,
 			link_regs,
-			aux_regs,
-			bl_regs,
-			dmcu_regs);
+			aux_regs);
 
 	enc110->base.funcs = &dce100_lnk_enc_funcs;
 
diff --git a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_link_encoder.h b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_link_encoder.h
index 4c6d65a..6c644c0 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_link_encoder.h
+++ b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_link_encoder.h
@@ -36,8 +36,6 @@ bool dce100_link_encoder_construct(
 	struct dce110_link_encoder *enc110,
 	const struct encoder_init_data *init_data,
 	const struct dce110_link_enc_registers *link_regs,
-	const struct dce110_link_enc_aux_registers *aux_regs,
-	const struct dce110_link_enc_bl_registers *bl_regs,
-	const struct dce110_link_enc_dmcu_registers *dmcu_regs);
+	const struct dce110_link_enc_aux_registers *aux_regs);
 
 #endif /* __DC_LINK_ENCODER__DCE100_H__ */
diff --git a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
index d84dfb3..75faec4 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
@@ -64,11 +64,25 @@
 #endif
 
 #ifndef mmDP_DPHY_BS_SR_SWAP_CNTL
-	#define mmDP_DPHY_BS_SR_SWAP_CNTL 0x4ADC
+	#define mmDP_DPHY_BS_SR_SWAP_CNTL                       0x4ADC
+	#define mmDP0_DP_DPHY_BS_SR_SWAP_CNTL                   0x4ADC
+	#define mmDP1_DP_DPHY_BS_SR_SWAP_CNTL                   0x4BDC
+	#define mmDP2_DP_DPHY_BS_SR_SWAP_CNTL                   0x4CDC
+	#define mmDP3_DP_DPHY_BS_SR_SWAP_CNTL                   0x4DDC
+	#define mmDP4_DP_DPHY_BS_SR_SWAP_CNTL                   0x4EDC
+	#define mmDP5_DP_DPHY_BS_SR_SWAP_CNTL                   0x4FDC
+	#define mmDP6_DP_DPHY_BS_SR_SWAP_CNTL                   0x54DC
 #endif
 
-#ifndef mmDP0_DP_DPHY_FAST_TRAINING
-	#define mmDP0_DP_DPHY_FAST_TRAINING 0x193A
+#ifndef mmDP_DPHY_FAST_TRAINING
+	#define mmDP_DPHY_FAST_TRAINING                         0x4ABC
+	#define mmDP0_DP_DPHY_FAST_TRAINING                     0x4ABC
+	#define mmDP1_DP_DPHY_FAST_TRAINING                     0x4BBC
+	#define mmDP2_DP_DPHY_FAST_TRAINING                     0x4CBC
+	#define mmDP3_DP_DPHY_FAST_TRAINING                     0x4DBC
+	#define mmDP4_DP_DPHY_FAST_TRAINING                     0x4EBC
+	#define mmDP5_DP_DPHY_FAST_TRAINING                     0x4FBC
+	#define mmDP6_DP_DPHY_FAST_TRAINING                     0x54BC
 #endif
 
 static const struct dce110_timing_generator_offsets dce100_tg_offsets[] = {
@@ -214,69 +228,33 @@ static const struct dce110_ipp_reg_offsets dce100_ipp_reg_offsets[] = {
 }
 };
 
-static const struct dce110_link_enc_bl_registers link_enc_bl_regs = {
-		.BL_PWM_CNTL = mmBL_PWM_CNTL,
-		.BL_PWM_GRP1_REG_LOCK = mmBL_PWM_GRP1_REG_LOCK,
-		.BL_PWM_PERIOD_CNTL = mmBL_PWM_PERIOD_CNTL,
-		.LVTMA_PWRSEQ_CNTL = mmLVTMA_PWRSEQ_CNTL,
-		.LVTMA_PWRSEQ_STATE = mmLVTMA_PWRSEQ_STATE
-};
 
-static const struct dce110_link_enc_dmcu_registers link_enc_dmcu_regs = {
-		.BL1_PWM_USER_LEVEL = mmBL1_PWM_USER_LEVEL,
-		.MASTER_COMM_DATA_REG1 = mmMASTER_COMM_DATA_REG1,
-		.MASTER_COMM_DATA_REG2 = mmMASTER_COMM_DATA_REG2,
-		.MASTER_COMM_DATA_REG3 = mmMASTER_COMM_DATA_REG3,
-		.MASTER_COMM_CMD_REG = mmMASTER_COMM_CMD_REG,
-		.MASTER_COMM_CNTL_REG = mmMASTER_COMM_CNTL_REG,
-		.BIOS_SCRATCH_2 = mmBIOS_SCRATCH_2,
-		.DMCU_RAM_ACCESS_CTRL = mmDMCU_RAM_ACCESS_CTRL,
-		.DCI_MEM_PWR_STATUS = mmDCI_MEM_PWR_STATUS,
-		.DMCU_IRAM_RD_CTRL = mmDMCU_IRAM_RD_CTRL,
-		.DMCU_IRAM_RD_DATA = mmDMCU_IRAM_RD_DATA,
-		.DP_DPHY_FAST_TRAINING = mmDP_DPHY_FAST_TRAINING,
-		.DP_DPHY_BS_SR_SWAP_CNTL = mmDP_DPHY_BS_SR_SWAP_CNTL,
-		.DMCU_INTERRUPT_TO_UC_EN_MASK = mmDMCU_INTERRUPT_TO_UC_EN_MASK,
-		.DP_SEC_CNTL1 = mmDP_SEC_CNTL1,
-		.SMU_INTERRUPT_CONTROL = mmSMU_INTERRUPT_CONTROL
-};
 
+/* set register offset */
+#define SR(reg_name)\
+	.reg_name = mm ## reg_name
+
+/* set register offset with instance */
+#define SRI(reg_name, block, id)\
+	.reg_name = mm ## block ## id ## _ ## reg_name
 
 #define aux_regs(id)\
 [id] = {\
-	.AUX_CONTROL = mmDP_AUX ## id ## _AUX_CONTROL,\
-	.AUX_DPHY_RX_CONTROL0 = mmDP_AUX ## id ## _AUX_DPHY_RX_CONTROL0\
+	AUX_REG_LIST(id)\
 }
 
 static const struct dce110_link_enc_aux_registers link_enc_aux_regs[] = {
-	aux_regs(0),
-	aux_regs(1),
-	aux_regs(2),
-	aux_regs(3),
-	aux_regs(4),
-	aux_regs(5)
+		aux_regs(0),
+		aux_regs(1),
+		aux_regs(2),
+		aux_regs(3),
+		aux_regs(4),
+		aux_regs(5)
 };
 
 #define link_regs(id)\
 [id] = {\
-	.DIG_BE_CNTL = mmDIG ## id ## _DIG_BE_CNTL,\
-	.DIG_BE_EN_CNTL = mmDIG ## id ## _DIG_BE_EN_CNTL,\
-	.DP_CONFIG = mmDP ## id ## _DP_CONFIG,\
-	.DP_DPHY_CNTL = mmDP ## id ## _DP_DPHY_CNTL,\
-	.DP_DPHY_INTERNAL_CTRL = mmDP ## id ## _DP_DPHY_INTERNAL_CTRL,\
-	.DP_DPHY_PRBS_CNTL = mmDP ## id ## _DP_DPHY_PRBS_CNTL,\
-	.DP_DPHY_SYM0 = mmDP ## id ## _DP_DPHY_SYM0,\
-	.DP_DPHY_SYM1 = mmDP ## id ## _DP_DPHY_SYM1,\
-	.DP_DPHY_SYM2 = mmDP ## id ## _DP_DPHY_SYM2,\
-	.DP_DPHY_TRAINING_PATTERN_SEL = mmDP ## id ## _DP_DPHY_TRAINING_PATTERN_SEL,\
-	.DP_LINK_CNTL = mmDP ## id ## _DP_LINK_CNTL,\
-	.DP_LINK_FRAMING_CNTL = mmDP ## id ## _DP_LINK_FRAMING_CNTL,\
-	.DP_MSE_SAT0 = mmDP ## id ## _DP_MSE_SAT0,\
-	.DP_MSE_SAT1 = mmDP ## id ## _DP_MSE_SAT1,\
-	.DP_MSE_SAT2 = mmDP ## id ## _DP_MSE_SAT2,\
-	.DP_MSE_SAT_UPDATE = mmDP ## id ## _DP_MSE_SAT_UPDATE,\
-	.DP_SEC_CNTL = mmDP ## id ## _DP_SEC_CNTL,\
-	.DP_VID_STREAM_CNTL = mmDP ## id ## _DP_VID_STREAM_CNTL\
+	LE_DCE110_REG_LIST(id)\
 }
 
 static const struct dce110_link_enc_registers link_enc_regs[] = {
@@ -286,17 +264,9 @@ static const struct dce110_link_enc_registers link_enc_regs[] = {
 	link_regs(3),
 	link_regs(4),
 	link_regs(5),
-	link_regs(6)
+	link_regs(6),
 };
 
-/* set register offset */
-#define SR(reg_name)\
-	.reg_name = mm ## reg_name
-
-/* set register offset with instance */
-#define SRI(reg_name, block, id)\
-	.reg_name = mm ## block ## id ## _ ## reg_name
-
 #define stream_enc_regs(id)\
 [id] = {\
 	SE_COMMON_REG_LIST_BASE(id),\
@@ -478,9 +448,7 @@ struct link_encoder *dce100_link_encoder_create(
 			enc110,
 			enc_init_data,
 			&link_enc_regs[enc_init_data->transmitter],
-			&link_enc_aux_regs[enc_init_data->channel - 1],
-			&link_enc_bl_regs,
-			&link_enc_dmcu_regs))
+			&link_enc_aux_regs[enc_init_data->channel - 1]))
 		return &enc110->base;
 
 	BREAK_TO_DEBUGGER();
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
index 3ba33ac..c20c343 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
@@ -35,6 +35,7 @@
 #include "dce/dce_11_0_d.h"
 #include "dce/dce_11_0_sh_mask.h"
 #include "dce/dce_11_0_enum.h"
+#include "reg_helper.h"
 
 #ifndef ATOM_S2_CURRENT_BL_LEVEL_MASK
 #define ATOM_S2_CURRENT_BL_LEVEL_MASK   0x0000FF00L
@@ -45,18 +46,15 @@
 #define ATOM_S2_CURRENT_BL_LEVEL_SHIFT  8
 #endif
 
-#define LINK_REG(reg)\
+#define CTX \
+	enc110->base.ctx
+
+#define REG(reg)\
 	(enc110->link_regs->reg)
 
 #define AUX_REG(reg)\
 	(enc110->aux_regs->reg)
 
-#define BL_REG(reg)\
-	(enc110->bl_regs->reg)
-
-#define DMCU_REG(reg)\
-	(enc110->dmcu_regs->reg)
-
 /* For current ASICs pixel clock - 600MHz */
 #define MAX_ENCODER_CLK 600000
 
@@ -168,7 +166,7 @@ static void enable_phy_bypass_mode(
 	 * transmitter is used for the offset */
 	struct dc_context *ctx = enc110->base.ctx;
 
-	const uint32_t addr = LINK_REG(DP_DPHY_CNTL);
+	const uint32_t addr = REG(DP_DPHY_CNTL);
 
 	uint32_t value = dm_read_reg(ctx, addr);
 
@@ -185,7 +183,7 @@ static void disable_prbs_symbols(
 	 * transmitter is used for the offset */
 	struct dc_context *ctx = enc110->base.ctx;
 
-	const uint32_t addr = LINK_REG(DP_DPHY_CNTL);
+	const uint32_t addr = REG(DP_DPHY_CNTL);
 
 	uint32_t value = dm_read_reg(ctx, addr);
 
@@ -211,7 +209,7 @@ static void disable_prbs_mode(
 	 * transmitter is used for the offset */
 	struct dc_context *ctx = enc110->base.ctx;
 
-	const uint32_t addr = LINK_REG(DP_DPHY_PRBS_CNTL);
+	const uint32_t addr = REG(DP_DPHY_PRBS_CNTL);
 	uint32_t value;
 
 	value = dm_read_reg(ctx, addr);
@@ -232,7 +230,7 @@ static void program_pattern_symbols(
 	/* This register resides in DP back end block;
 	 * transmitter is used for the offset */
 
-	addr = LINK_REG(DP_DPHY_SYM0);
+	addr = REG(DP_DPHY_SYM0);
 
 	value = 0;
 	set_reg_field_value(value, pattern_symbols[0],
@@ -246,7 +244,7 @@ static void program_pattern_symbols(
 	/* This register resides in DP back end block;
 	 * transmitter is used for the offset */
 
-	addr = LINK_REG(DP_DPHY_SYM1);
+	addr = REG(DP_DPHY_SYM1);
 
 	value = 0;
 	set_reg_field_value(value, pattern_symbols[3],
@@ -259,7 +257,7 @@ static void program_pattern_symbols(
 
 	/* This register resides in DP back end block;
 	 * transmitter is used for the offset */
-	addr = LINK_REG(DP_DPHY_SYM2);
+	addr = REG(DP_DPHY_SYM2);
 	value = 0;
 	set_reg_field_value(value, pattern_symbols[6],
 			DP_DPHY_SYM2, DPHY_SYM7);
@@ -309,7 +307,7 @@ static void set_link_training_complete(
 	/* This register resides in DP back end block;
 	 * transmitter is used for the offset */
 	struct dc_context *ctx = enc110->base.ctx;
-	const uint32_t addr = LINK_REG(DP_LINK_CNTL);
+	const uint32_t addr = REG(DP_LINK_CNTL);
 	uint32_t value = dm_read_reg(ctx, addr);
 
 	set_reg_field_value(value, complete,
@@ -325,7 +323,7 @@ void dce110_link_encoder_set_dp_phy_pattern_training_pattern(
 	struct dce110_link_encoder *enc110 = TO_DCE110_LINK_ENC(enc);
 	/* Write Training Pattern */
 	struct dc_context *ctx = enc->ctx;
-	uint32_t addr = LINK_REG(DP_DPHY_TRAINING_PATTERN_SEL);
+	uint32_t addr = REG(DP_DPHY_TRAINING_PATTERN_SEL);
 
 	dm_write_reg(ctx, addr, index);
 
@@ -353,7 +351,7 @@ static void set_dp_phy_pattern_symbol_error(
 
 	/* program correct panel mode*/
 	{
-		const uint32_t addr = LINK_REG(DP_DPHY_INTERNAL_CTRL);
+		const uint32_t addr = REG(DP_DPHY_INTERNAL_CTRL);
 		uint32_t value = 0x0;
 		dm_write_reg(ctx, addr, value);
 	}
@@ -366,7 +364,7 @@ static void set_dp_phy_pattern_symbol_error(
 
 	/* For PRBS23 Set bit DPHY_PRBS_SEL=1 and Set bit DPHY_PRBS_EN=1 */
 	{
-		const uint32_t addr = LINK_REG(DP_DPHY_PRBS_CNTL);
+		const uint32_t addr = REG(DP_DPHY_PRBS_CNTL);
 		uint32_t value = dm_read_reg(ctx, addr);
 
 		set_reg_field_value(value, 1,
@@ -397,7 +395,7 @@ static void set_dp_phy_pattern_prbs7(
 
 	/* For PRBS7 Set bit DPHY_PRBS_SEL=0 and Set bit DPHY_PRBS_EN=1 */
 	{
-		const uint32_t addr = LINK_REG(DP_DPHY_PRBS_CNTL);
+		const uint32_t addr = REG(DP_DPHY_PRBS_CNTL);
 
 		uint32_t value = dm_read_reg(ctx, addr);
 
@@ -485,7 +483,7 @@ static void set_dp_phy_pattern_hbr2_compliance(
 
 	/* program correct panel mode*/
 	{
-		const uint32_t addr = LINK_REG(DP_DPHY_INTERNAL_CTRL);
+		const uint32_t addr = REG(DP_DPHY_INTERNAL_CTRL);
 		uint32_t value = 0x0;
 		dm_write_reg(ctx, addr, value);
 	}
@@ -522,7 +520,7 @@ static void set_dp_phy_pattern_hbr2_compliance(
 	/* set link training complete */
 	set_link_training_complete(enc110, true);
 	/* do not enable video stream */
-	addr = LINK_REG(DP_VID_STREAM_CNTL);
+	addr = REG(DP_VID_STREAM_CNTL);
 
 	value = dm_read_reg(ctx, addr);
 
@@ -543,7 +541,7 @@ static void set_dp_phy_pattern_passthrough_mode(
 
 	/* program correct panel mode */
 	{
-		const uint32_t addr = LINK_REG(DP_DPHY_INTERNAL_CTRL);
+		const uint32_t addr = REG(DP_DPHY_INTERNAL_CTRL);
 
 		uint32_t value;
 
@@ -610,7 +608,7 @@ static void configure_encoder(
 	uint32_t value;
 
 	/* set number of lanes */
-	addr = LINK_REG(DP_CONFIG);
+	addr = REG(DP_CONFIG);
 	value = dm_read_reg(ctx, addr);
 	set_reg_field_value(value, link_settings->lane_count - LANE_COUNT_ONE,
 			DP_CONFIG, DP_UDI_LANES);
@@ -625,7 +623,7 @@ static bool is_panel_powered_on(struct dce110_link_encoder *enc110)
 	bool ret;
 
 	value = dm_read_reg(ctx,
-			BL_REG(LVTMA_PWRSEQ_STATE));
+			REG(LVTMA_PWRSEQ_STATE));
 
 	ret = get_reg_field_value(value,
 			LVTMA_PWRSEQ_STATE, LVTMA_PWRSEQ_TARGET_STATE_R);
@@ -793,7 +791,7 @@ static bool is_panel_backlight_on(struct dce110_link_encoder *enc110)
 	struct dc_context *ctx = enc110->base.ctx;
 	uint32_t value;
 
-	value = dm_read_reg(ctx, BL_REG(LVTMA_PWRSEQ_CNTL));
+	value = dm_read_reg(ctx, REG(LVTMA_PWRSEQ_CNTL));
 
 	return get_reg_field_value(value, LVTMA_PWRSEQ_CNTL, LVTMA_BLON);
 }
@@ -872,7 +870,7 @@ static bool is_dig_enabled(const struct dce110_link_encoder *enc110)
 	struct dc_context *ctx = enc110->base.ctx;
 	uint32_t value;
 
-	value = dm_read_reg(ctx, LINK_REG(DIG_BE_EN_CNTL));
+	value = dm_read_reg(ctx, REG(DIG_BE_EN_CNTL));
 
 	return get_reg_field_value(value, DIG_BE_EN_CNTL, DIG_ENABLE);
 }
@@ -884,7 +882,7 @@ static void link_encoder_disable(struct dce110_link_encoder *enc110)
 	uint32_t value;
 
 	/* reset training pattern */
-	addr = LINK_REG(DP_DPHY_TRAINING_PATTERN_SEL);
+	addr = REG(DP_DPHY_TRAINING_PATTERN_SEL);
 	value = dm_read_reg(ctx, addr);
 	set_reg_field_value(value, 0,
 			DP_DPHY_TRAINING_PATTERN_SEL,
@@ -892,13 +890,13 @@ static void link_encoder_disable(struct dce110_link_encoder *enc110)
 	dm_write_reg(ctx, addr, value);
 
 	/* reset training complete */
-	addr = LINK_REG(DP_LINK_CNTL);
+	addr = REG(DP_LINK_CNTL);
 	value = dm_read_reg(ctx, addr);
 	set_reg_field_value(value, 0, DP_LINK_CNTL, DP_LINK_TRAINING_COMPLETE);
 	dm_write_reg(ctx, addr, value);
 
 	/* reset panel mode */
-	addr = LINK_REG(DP_DPHY_INTERNAL_CTRL);
+	addr = REG(DP_DPHY_INTERNAL_CTRL);
 	value = 0;
 	dm_write_reg(ctx, addr, value);
 }
@@ -909,7 +907,7 @@ static void hpd_initialize(
 	/* Associate HPD with DIG_BE */
 	struct dc_context *ctx = enc110->base.ctx;
 	enum hpd_source_id hpd_source = enc110->base.hpd_source;
-	const uint32_t addr = LINK_REG(DIG_BE_CNTL);
+	const uint32_t addr = REG(DIG_BE_CNTL);
 	uint32_t value = dm_read_reg(ctx, addr);
 
 	set_reg_field_value(value, hpd_source, DIG_BE_CNTL, DIG_HPD_SELECT);
@@ -1046,9 +1044,7 @@ bool dce110_link_encoder_construct(
 	struct dce110_link_encoder *enc110,
 	const struct encoder_init_data *init_data,
 	const struct dce110_link_enc_registers *link_regs,
-	const struct dce110_link_enc_aux_registers *aux_regs,
-	const struct dce110_link_enc_bl_registers *bl_regs,
-	const struct dce110_link_enc_dmcu_registers *dmcu_regs)
+	const struct dce110_link_enc_aux_registers *aux_regs)
 {
 	struct graphics_object_encoder_cap_info enc_cap_info = {0};
 	struct adapter_service *as = init_data->adapter_service;
@@ -1110,8 +1106,6 @@ bool dce110_link_encoder_construct(
 
 	enc110->link_regs = link_regs;
 	enc110->aux_regs = aux_regs;
-	enc110->bl_regs = bl_regs;
-	enc110->dmcu_regs = dmcu_regs;
 
 	switch (enc110->base.transmitter) {
 	case TRANSMITTER_UNIPHY_A:
@@ -1269,7 +1263,7 @@ void dce110_link_encoder_setup(
 {
 	struct dce110_link_encoder *enc110 = TO_DCE110_LINK_ENC(enc);
 	struct dc_context *ctx = enc110->base.ctx;
-	const uint32_t addr = LINK_REG(DIG_BE_CNTL);
+	const uint32_t addr = REG(DIG_BE_CNTL);
 	uint32_t value = dm_read_reg(ctx, addr);
 
 	switch (signal) {
@@ -1634,8 +1628,8 @@ void dce110_link_encoder_update_mst_stream_allocation_table(
 	 * to commit payload on both tx and rx side */
 
 	/* we should clean-up table each time */
-	value0 = dm_read_reg(ctx, LINK_REG(DP_MSE_SAT0));
-	value1 = dm_read_reg(ctx, LINK_REG(DP_MSE_SAT1));
+	value0 = dm_read_reg(ctx, REG(DP_MSE_SAT0));
+	value1 = dm_read_reg(ctx, REG(DP_MSE_SAT1));
 
 	if (table->stream_count >= 1) {
 		fill_stream_allocation_row_info(
@@ -1726,8 +1720,8 @@ void dce110_link_encoder_update_mst_stream_allocation_table(
 		DP_MSE_SAT_SLOT_COUNT3);
 
 	/* update ASIC MSE stream allocation table */
-	dm_write_reg(ctx, LINK_REG(DP_MSE_SAT0), value0);
-	dm_write_reg(ctx, LINK_REG(DP_MSE_SAT1), value1);
+	dm_write_reg(ctx, REG(DP_MSE_SAT0), value0);
+	dm_write_reg(ctx, REG(DP_MSE_SAT1), value1);
 
 	/* --- wait for transaction finish */
 
@@ -1736,7 +1730,7 @@ void dce110_link_encoder_update_mst_stream_allocation_table(
 	 * then double buffers the SAT into the hardware
 	 * making the new allocation active on the DP MST mode link */
 
-	value0 = dm_read_reg(ctx, LINK_REG(DP_MSE_SAT_UPDATE));
+	value0 = dm_read_reg(ctx, REG(DP_MSE_SAT_UPDATE));
 
 	/* DP_MSE_SAT_UPDATE:
 	 * 0 - No Action
@@ -1749,7 +1743,7 @@ void dce110_link_encoder_update_mst_stream_allocation_table(
 		DP_MSE_SAT_UPDATE,
 		DP_MSE_SAT_UPDATE);
 
-	dm_write_reg(ctx, LINK_REG(DP_MSE_SAT_UPDATE), value0);
+	dm_write_reg(ctx, REG(DP_MSE_SAT_UPDATE), value0);
 
 	/* wait for update to complete
 	 * (i.e. DP_MSE_SAT_UPDATE field is reset to 0)
@@ -1765,7 +1759,7 @@ void dce110_link_encoder_update_mst_stream_allocation_table(
 		udelay(10);
 
 		value0 = dm_read_reg(ctx,
-				LINK_REG(DP_MSE_SAT_UPDATE));
+				REG(DP_MSE_SAT_UPDATE));
 
 		value1 = get_reg_field_value(
 				value0,
@@ -1805,9 +1799,9 @@ void dce110_link_encoder_set_lcd_backlight_level(
 	uint8_t bit_count;
 	uint64_t active_duty_cycle;
 
-	backlight = dm_read_reg(ctx, BL_REG(BL_PWM_CNTL));
-	backlight_period = dm_read_reg(ctx, BL_REG(BL_PWM_PERIOD_CNTL));
-	backlight_lock = dm_read_reg(ctx, BL_REG(BL_PWM_GRP1_REG_LOCK));
+	backlight = dm_read_reg(ctx, REG(BL_PWM_CNTL));
+	backlight_period = dm_read_reg(ctx, REG(BL_PWM_PERIOD_CNTL));
+	backlight_lock = dm_read_reg(ctx, REG(BL_PWM_GRP1_REG_LOCK));
 
 	/*
 	 * 1. Convert 8-bit value to 17 bit U1.16 format
@@ -1890,10 +1884,10 @@ void dce110_link_encoder_set_lcd_backlight_level(
 		1,
 		BL_PWM_GRP1_REG_LOCK,
 		BL_PWM_GRP1_REG_LOCK);
-	dm_write_reg(ctx, BL_REG(BL_PWM_GRP1_REG_LOCK), backlight_lock);
+	dm_write_reg(ctx, REG(BL_PWM_GRP1_REG_LOCK), backlight_lock);
 
 	/* 3.2 Write new active duty cycle */
-	dm_write_reg(ctx, BL_REG(BL_PWM_CNTL), backlight);
+	dm_write_reg(ctx, REG(BL_PWM_CNTL), backlight);
 
 	/* 3.3 Unlock group 2 backlight registers */
 	set_reg_field_value(
@@ -1901,11 +1895,11 @@ void dce110_link_encoder_set_lcd_backlight_level(
 		0,
 		BL_PWM_GRP1_REG_LOCK,
 		BL_PWM_GRP1_REG_LOCK);
-	dm_write_reg(ctx, BL_REG(BL_PWM_GRP1_REG_LOCK), backlight_lock);
+	dm_write_reg(ctx, REG(BL_PWM_GRP1_REG_LOCK), backlight_lock);
 
 	/* 5.4.4 Wait for pending bit to be cleared */
 	for (i = 0; i < backlight_update_pending_max_retry; ++i) {
-		backlight_lock = dm_read_reg(ctx, BL_REG(BL_PWM_GRP1_REG_LOCK));
+		backlight_lock = dm_read_reg(ctx, REG(BL_PWM_GRP1_REG_LOCK));
 		if (!get_reg_field_value(
 			backlight_lock,
 			BL_PWM_GRP1_REG_LOCK,
@@ -1939,10 +1933,10 @@ void dce110_link_encoder_set_dmcu_backlight_level(
 	backlight_17bit = (backlight_17bit >> 8) + temp_uchar;
 
 	/* set ramping boundary */
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_DATA_REG1), rampingBoundary);
+	dm_write_reg(ctx, REG(MASTER_COMM_DATA_REG1), rampingBoundary);
 
 	/* setDMCUParam_Pipe */
-	masterCmd = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG));
+	masterCmd = dm_read_reg(ctx, REG(MASTER_COMM_CMD_REG));
 	set_reg_field_value(
 			masterCmd,
 			MCP_ABM_PIPE_SET,
@@ -1953,21 +1947,21 @@ void dce110_link_encoder_set_dmcu_backlight_level(
 			controller_id,
 			MASTER_COMM_CMD_REG,
 			MASTER_COMM_CMD_REG_BYTE1);
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG), masterCmd);
+	dm_write_reg(ctx, REG(MASTER_COMM_CMD_REG), masterCmd);
 
 	/* notifyDMCUMsg */
-	masterComCntl = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG));
+	masterComCntl = dm_read_reg(ctx, REG(MASTER_COMM_CNTL_REG));
 	set_reg_field_value(
 			masterComCntl,
 			1,
 			MASTER_COMM_CNTL_REG,
 			MASTER_COMM_INTERRUPT);
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG), masterComCntl);
+	dm_write_reg(ctx, REG(MASTER_COMM_CNTL_REG), masterComCntl);
 
 	/* waitDMCUReadyForCmd */
 	do {
 		dm_delay_in_microseconds(ctx, dmcu_wait_reg_ready_interval);
-		regValue = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG));
+		regValue = dm_read_reg(ctx, REG(MASTER_COMM_CNTL_REG));
 		dmcu_max_retry_on_wait_reg_ready--;
 	} while
 	/* expected value is 0, loop while not 0*/
@@ -1975,44 +1969,44 @@ void dce110_link_encoder_set_dmcu_backlight_level(
 		dmcu_max_retry_on_wait_reg_ready > 0);
 
 	/* setDMCUParam_BL */
-	pwmUserLevel = dm_read_reg(ctx, DMCU_REG(BL1_PWM_USER_LEVEL));
+	pwmUserLevel = dm_read_reg(ctx, REG(BL1_PWM_USER_LEVEL));
 	set_reg_field_value(
 			pwmUserLevel,
 			backlight_17bit,
 			BL1_PWM_USER_LEVEL,
 			BL1_PWM_USER_LEVEL);
-	dm_write_reg(ctx, DMCU_REG(BL1_PWM_USER_LEVEL), pwmUserLevel);
+	dm_write_reg(ctx, REG(BL1_PWM_USER_LEVEL), pwmUserLevel);
 
 	/* write ramp */
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_DATA_REG1), frame_ramp);
+	dm_write_reg(ctx, REG(MASTER_COMM_DATA_REG1), frame_ramp);
 
 	/* setDMCUParam_Cmd */
-	masterCmd = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG));
+	masterCmd = dm_read_reg(ctx, REG(MASTER_COMM_CMD_REG));
 	set_reg_field_value(
 			masterCmd,
 			MCP_BL_SET,
 			MASTER_COMM_CMD_REG,
 			MASTER_COMM_CMD_REG_BYTE0);
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG), masterCmd);
+	dm_write_reg(ctx, REG(MASTER_COMM_CMD_REG), masterCmd);
 
 	/* notifyDMCUMsg */
-	masterComCntl = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG));
+	masterComCntl = dm_read_reg(ctx, REG(MASTER_COMM_CNTL_REG));
 	set_reg_field_value(
 			masterComCntl,
 			1,
 			MASTER_COMM_CNTL_REG,
 			MASTER_COMM_INTERRUPT);
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG), masterComCntl);
+	dm_write_reg(ctx, REG(MASTER_COMM_CNTL_REG), masterComCntl);
 
 	/* UpdateRequestedBacklightLevel */
-	s2 = dm_read_reg(ctx, DMCU_REG(BIOS_SCRATCH_2));
+	s2 = dm_read_reg(ctx, REG(BIOS_SCRATCH_2));
 
 	s2 &= ~ATOM_S2_CURRENT_BL_LEVEL_MASK;
 	level &= (ATOM_S2_CURRENT_BL_LEVEL_MASK >>
 				ATOM_S2_CURRENT_BL_LEVEL_SHIFT);
 	s2 |= (level << ATOM_S2_CURRENT_BL_LEVEL_SHIFT);
 
-	dm_write_reg(ctx, DMCU_REG(BIOS_SCRATCH_2), s2);
+	dm_write_reg(ctx, REG(BIOS_SCRATCH_2), s2);
 }
 
 void dce110_link_encoder_init_dmcu_backlight_settings(
@@ -2027,7 +2021,7 @@ void dce110_link_encoder_init_dmcu_backlight_settings(
 	uint32_t pwmSeqRefDiv;
 	uint32_t s2;
 
-	bl_pwm_cntl = dm_read_reg(ctx, BL_REG(BL_PWM_CNTL));
+	bl_pwm_cntl = dm_read_reg(ctx, REG(BL_PWM_CNTL));
 
 	/* It must not be 0, so we have to restore them
 	 * Bios bug w/a - period resets to zero,
@@ -2037,40 +2031,38 @@ void dce110_link_encoder_init_dmcu_backlight_settings(
 			BL_ACTIVE_INT_FRAC_CNT) == 0 || bl_pwm_cntl == 1) {
 		if (stored_backlight_registers.vBL_PWM_CNTL != 0) {
 			pwmCntl = stored_backlight_registers.vBL_PWM_CNTL;
-			dm_write_reg(ctx, BL_REG(BL_PWM_CNTL), pwmCntl);
+			dm_write_reg(ctx, REG(BL_PWM_CNTL), pwmCntl);
 
 			pwmCntl2 = stored_backlight_registers.vBL_PWM_CNTL2;
-			dm_write_reg(ctx, BL_REG(BL_PWM_CNTL2), pwmCntl2);
+			dm_write_reg(ctx, REG(BL_PWM_CNTL2), pwmCntl2);
 
 			periodCntl =
 				stored_backlight_registers.vBL_PWM_PERIOD_CNTL;
-			dm_write_reg(ctx, BL_REG(BL_PWM_PERIOD_CNTL),
+			dm_write_reg(ctx, REG(BL_PWM_PERIOD_CNTL),
 					periodCntl);
 
 
 			pwmSeqRefDiv =
 					dm_read_reg(ctx,
-						BL_REG(LVTMA_PWRSEQ_REF_DIV));
+						REG(LVTMA_PWRSEQ_REF_DIV));
 			set_reg_field_value(
 					pwmSeqRefDiv,
 					stored_backlight_registers.
 					vLVTMA_PWRSEQ_REF_DIV_BL_PWM_REF_DIV,
 					LVTMA_PWRSEQ_REF_DIV,
 					BL_PWM_REF_DIV);
-			dm_write_reg(ctx, BL_REG(LVTMA_PWRSEQ_REF_DIV),
+			dm_write_reg(ctx, REG(LVTMA_PWRSEQ_REF_DIV),
 					pwmSeqRefDiv);
 		}
 	} else {
 		stored_backlight_registers.vBL_PWM_CNTL =
-				dm_read_reg(ctx, BL_REG(BL_PWM_CNTL));
+				dm_read_reg(ctx, REG(BL_PWM_CNTL));
 		stored_backlight_registers.vBL_PWM_CNTL2 =
-				dm_read_reg(ctx, BL_REG(BL_PWM_CNTL2));
+				dm_read_reg(ctx, REG(BL_PWM_CNTL2));
 		stored_backlight_registers.vBL_PWM_PERIOD_CNTL =
-				dm_read_reg(ctx, BL_REG(BL_PWM_PERIOD_CNTL));
-
-		uint32_t pwmSeqRefDiv;
+				dm_read_reg(ctx, REG(BL_PWM_PERIOD_CNTL));
 
-		pwmSeqRefDiv = dm_read_reg(ctx, BL_REG(LVTMA_PWRSEQ_REF_DIV));
+		pwmSeqRefDiv = dm_read_reg(ctx, REG(LVTMA_PWRSEQ_REF_DIV));
 		stored_backlight_registers.
 				vLVTMA_PWRSEQ_REF_DIV_BL_PWM_REF_DIV =
 				get_reg_field_value(pwmSeqRefDiv,
@@ -2080,18 +2072,18 @@ void dce110_link_encoder_init_dmcu_backlight_settings(
 	/* Have driver take backlight control
 	 * TakeBacklightControl(true)
 	 */
-	s2 = dm_read_reg(ctx, DMCU_REG(BIOS_SCRATCH_2));
+	s2 = dm_read_reg(ctx, REG(BIOS_SCRATCH_2));
 	s2 |= ATOM_S2_VRI_BRIGHT_ENABLE;
-	dm_write_reg(ctx, DMCU_REG(BIOS_SCRATCH_2), s2);
+	dm_write_reg(ctx, REG(BIOS_SCRATCH_2), s2);
 
 	/* Enable the backlight output */
-	pwmCntl = dm_read_reg(ctx, BL_REG(BL_PWM_CNTL));
+	pwmCntl = dm_read_reg(ctx, REG(BL_PWM_CNTL));
 	set_reg_field_value(
 			pwmCntl,
 			1,
 			BL_PWM_CNTL,
 			BL_PWM_EN);
-	dm_write_reg(ctx, BL_REG(BL_PWM_CNTL), pwmCntl);
+	dm_write_reg(ctx, REG(BL_PWM_CNTL), pwmCntl);
 }
 
 void dce110_link_encoder_set_dmcu_abm_level(
@@ -2111,7 +2103,7 @@ void dce110_link_encoder_set_dmcu_abm_level(
 	/* waitDMCUReadyForCmd */
 	do {
 		dm_delay_in_microseconds(ctx, dmcu_wait_reg_ready_interval);
-		regValue = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG));
+		regValue = dm_read_reg(ctx, REG(MASTER_COMM_CNTL_REG));
 		dmcu_max_retry_on_wait_reg_ready--;
 	} while
 	/* expected value is 0, loop while not 0*/
@@ -2119,7 +2111,7 @@ void dce110_link_encoder_set_dmcu_abm_level(
 		dmcu_max_retry_on_wait_reg_ready > 0);
 
 	/* setDMCUParam_ABMLevel */
-	masterCmd = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG));
+	masterCmd = dm_read_reg(ctx, REG(MASTER_COMM_CMD_REG));
 	set_reg_field_value(
 			masterCmd,
 			MCP_ABM_LEVEL_SET,
@@ -2130,16 +2122,16 @@ void dce110_link_encoder_set_dmcu_abm_level(
 			level,
 			MASTER_COMM_CMD_REG,
 			MASTER_COMM_CMD_REG_BYTE2);
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG), masterCmd);
+	dm_write_reg(ctx, REG(MASTER_COMM_CMD_REG), masterCmd);
 
 	/* notifyDMCUMsg */
-	masterComCntl = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG));
+	masterComCntl = dm_read_reg(ctx, REG(MASTER_COMM_CNTL_REG));
 	set_reg_field_value(
 			masterComCntl,
 			1,
 			MASTER_COMM_CNTL_REG,
 			MASTER_COMM_INTERRUPT);
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG), masterComCntl);
+	dm_write_reg(ctx, REG(MASTER_COMM_CNTL_REG), masterComCntl);
 }
 
 static void get_dmcu_psr_state(struct link_encoder *enc, uint32_t *psr_state)
@@ -2154,26 +2146,26 @@ static void get_dmcu_psr_state(struct link_encoder *enc, uint32_t *psr_state)
 	uint32_t psrStateOffset = 0xf0;
 
 	/* Enable write access to IRAM */
-	ramAccessCntrl = dm_read_reg(ctx, DMCU_REG(DMCU_RAM_ACCESS_CTRL));
+	ramAccessCntrl = dm_read_reg(ctx, REG(DMCU_RAM_ACCESS_CTRL));
 	set_reg_field_value(
 				ramAccessCntrl,
 				1,
 				DMCU_RAM_ACCESS_CTRL,
 				IRAM_HOST_ACCESS_EN);
-	dm_write_reg(ctx, DMCU_REG(DMCU_RAM_ACCESS_CTRL), ramAccessCntrl);
+	dm_write_reg(ctx, REG(DMCU_RAM_ACCESS_CTRL), ramAccessCntrl);
 
 	do {
 		dm_delay_in_microseconds(ctx, 2);
-		powerStatus = dm_read_reg(ctx, DMCU_REG(DCI_MEM_PWR_STATUS));
+		powerStatus = dm_read_reg(ctx, REG(DCI_MEM_PWR_STATUS));
 	} while
 		(get_reg_field_value(powerStatus, DCI_MEM_PWR_STATUS,
 				DMCU_IRAM_MEM_PWR_STATE) != 0 && count++ < 10);
 
 	/* Write address to IRAM_RD_ADDR in DMCU_IRAM_RD_CTRL */
-	dm_write_reg(ctx, DMCU_REG(DMCU_IRAM_RD_CTRL), psrStateOffset);
+	dm_write_reg(ctx, REG(DMCU_IRAM_RD_CTRL), psrStateOffset);
 
 	/* Read data from IRAM_RD_DATA in DMCU_IRAM_RD_DATA*/
-	*psr_state = dm_read_reg(ctx, DMCU_REG(DMCU_IRAM_RD_DATA));
+	*psr_state = dm_read_reg(ctx, REG(DMCU_IRAM_RD_DATA));
 
 	/* Disable write access to IRAM after finished using IRAM
 	 * in order to allow dynamic sleep state
@@ -2183,7 +2175,7 @@ static void get_dmcu_psr_state(struct link_encoder *enc, uint32_t *psr_state)
 				0,
 				DMCU_RAM_ACCESS_CTRL,
 				IRAM_HOST_ACCESS_EN);
-	dm_write_reg(ctx, DMCU_REG(DMCU_RAM_ACCESS_CTRL), ramAccessCntrl);
+	dm_write_reg(ctx, REG(DMCU_RAM_ACCESS_CTRL), ramAccessCntrl);
 }
 
 void dce110_link_encoder_set_dmcu_psr_enable(struct link_encoder *enc,
@@ -2205,7 +2197,7 @@ void dce110_link_encoder_set_dmcu_psr_enable(struct link_encoder *enc,
 	/* waitDMCUReadyForCmd */
 	do {
 		dm_delay_in_microseconds(ctx, dmcu_wait_reg_ready_interval);
-		regValue = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG));
+		regValue = dm_read_reg(ctx, REG(MASTER_COMM_CNTL_REG));
 		dmcu_max_retry_on_wait_reg_ready--;
 	} while
 	/* expected value is 0, loop while not 0*/
@@ -2213,7 +2205,7 @@ void dce110_link_encoder_set_dmcu_psr_enable(struct link_encoder *enc,
 		dmcu_max_retry_on_wait_reg_ready > 0);
 
 	/* setDMCUParam_Cmd */
-	masterCmd = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG));
+	masterCmd = dm_read_reg(ctx, REG(MASTER_COMM_CMD_REG));
 	if (enable)
 		set_reg_field_value(
 				masterCmd,
@@ -2226,16 +2218,16 @@ void dce110_link_encoder_set_dmcu_psr_enable(struct link_encoder *enc,
 				PSR_EXIT,
 				MASTER_COMM_CMD_REG,
 				MASTER_COMM_CMD_REG_BYTE0);
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG), masterCmd);
+	dm_write_reg(ctx, REG(MASTER_COMM_CMD_REG), masterCmd);
 
 	/* notifyDMCUMsg */
-	masterComCntl = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG));
+	masterComCntl = dm_read_reg(ctx, REG(MASTER_COMM_CNTL_REG));
 	set_reg_field_value(
 			masterComCntl,
 			1,
 			MASTER_COMM_CNTL_REG,
 			MASTER_COMM_INTERRUPT);
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG), masterComCntl);
+	dm_write_reg(ctx, REG(MASTER_COMM_CNTL_REG), masterComCntl);
 
 	for (retryCount = 0; retryCount <= 100; retryCount++) {
 		get_dmcu_psr_state(enc, &psr_state);
@@ -2271,7 +2263,7 @@ void dce110_link_encoder_setup_dmcu_psr(struct link_encoder *enc,
 	union dce110_dmcu_psr_config_data_reg2 masterCmdData2;
 	union dce110_dmcu_psr_config_data_reg3 masterCmdData3;
 
-	dphyFastTraining = dm_read_reg(ctx, LINK_REG(DP_DPHY_FAST_TRAINING));
+	dphyFastTraining = dm_read_reg(ctx, REG(DP_DPHY_FAST_TRAINING));
 	if (psr_context->psrExitLinkTrainingRequired)
 		set_reg_field_value(
 					dphyFastTraining,
@@ -2293,20 +2285,20 @@ void dce110_link_encoder_setup_dmcu_psr(struct link_encoder *enc,
 		 * replaced by SR symbol once.
 		 */
 		dpDphyBsSrSwapCntl =
-			dm_read_reg(ctx, LINK_REG(DP_DPHY_BS_SR_SWAP_CNTL));
+			dm_read_reg(ctx, REG(DP_DPHY_BS_SR_SWAP_CNTL));
 		set_reg_field_value(
 					dpDphyBsSrSwapCntl,
 					0x5,
 					DP_DPHY_BS_SR_SWAP_CNTL,
 					DPHY_LOAD_BS_COUNT);
-		dm_write_reg(ctx, LINK_REG(DP_DPHY_BS_SR_SWAP_CNTL),
+		dm_write_reg(ctx, REG(DP_DPHY_BS_SR_SWAP_CNTL),
 						dpDphyBsSrSwapCntl);
 	}
-	dm_write_reg(ctx, LINK_REG(DP_DPHY_FAST_TRAINING), dphyFastTraining);
+	dm_write_reg(ctx, REG(DP_DPHY_FAST_TRAINING), dphyFastTraining);
 
 	/* Enable static screen interrupts for PSR supported display */
 	interruptEnableMask =
-		dm_read_reg(ctx, DMCU_REG(DMCU_INTERRUPT_TO_UC_EN_MASK));
+		dm_read_reg(ctx, REG(DMCU_INTERRUPT_TO_UC_EN_MASK));
 	/* Disable the interrupt coming from other displays. */
 	set_reg_field_value(
 				interruptEnableMask,
@@ -2394,10 +2386,10 @@ void dce110_link_encoder_setup_dmcu_psr(struct link_encoder *enc,
 					STATIC_SCREEN1_INT_TO_UC_EN);
 		break;
 	}
-	dm_write_reg(ctx, DMCU_REG(DMCU_INTERRUPT_TO_UC_EN_MASK),
+	dm_write_reg(ctx, REG(DMCU_INTERRUPT_TO_UC_EN_MASK),
 							interruptEnableMask);
 
-	dpSecCntl1 = dm_read_reg(ctx, LINK_REG(DP_SEC_CNTL1));
+	dpSecCntl1 = dm_read_reg(ctx, REG(DP_SEC_CNTL1));
 	set_reg_field_value(
 				dpSecCntl1,
 				psr_context->sdpTransmitLineNumDeadline,
@@ -2408,24 +2400,24 @@ void dce110_link_encoder_setup_dmcu_psr(struct link_encoder *enc,
 				1,
 				DP_SEC_CNTL1,
 				DP_SEC_GSP0_PRIORITY);
-	dm_write_reg(ctx, LINK_REG(DP_SEC_CNTL1), dpSecCntl1);
+	dm_write_reg(ctx, REG(DP_SEC_CNTL1), dpSecCntl1);
 
 	if (psr_context->psr_level.bits.SKIP_SMU_NOTIFICATION) {
 		smuInterruptControl =
-			dm_read_reg(ctx, DMCU_REG(SMU_INTERRUPT_CONTROL));
+			dm_read_reg(ctx, REG(SMU_INTERRUPT_CONTROL));
 		set_reg_field_value(
 					smuInterruptControl,
 					1,
 					SMU_INTERRUPT_CONTROL,
 					DC_SMU_INT_ENABLE);
-		dm_write_reg(ctx, DMCU_REG(SMU_INTERRUPT_CONTROL),
+		dm_write_reg(ctx, REG(SMU_INTERRUPT_CONTROL),
 						smuInterruptControl);
 	}
 
 	/* waitDMCUReadyForCmd */
 	do {
 		dm_delay_in_microseconds(ctx, dmcu_wait_reg_ready_interval);
-		regValue = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG));
+		regValue = dm_read_reg(ctx, REG(MASTER_COMM_CNTL_REG));
 		dmcu_max_retry_on_wait_reg_ready--;
 	} while
 	/* expected value is 0, loop while not 0*/
@@ -2445,7 +2437,7 @@ void dce110_link_encoder_setup_dmcu_psr(struct link_encoder *enc,
 			psr_context->psrFrameCaptureIndicationReq;
 	masterCmdData1.bits.aux_chan = psr_context->channel;
 	masterCmdData1.bits.aux_repeat = psr_context->aux_repeats;
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_DATA_REG1),
+	dm_write_reg(ctx, REG(MASTER_COMM_DATA_REG1),
 					masterCmdData1.u32All);
 
 	masterCmdData2.u32All = 0;
@@ -2457,31 +2449,31 @@ void dce110_link_encoder_setup_dmcu_psr(struct link_encoder *enc,
 	masterCmdData2.bits.smu_phy_id = psr_context->smuPhyId;
 	masterCmdData2.bits.num_of_controllers =
 			psr_context->numberOfControllers;
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_DATA_REG2),
+	dm_write_reg(ctx, REG(MASTER_COMM_DATA_REG2),
 			masterCmdData2.u32All);
 
 	masterCmdData3.u32All = 0;
 	masterCmdData3.bits.psr_level = psr_context->psr_level.u32all;
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_DATA_REG3),
+	dm_write_reg(ctx, REG(MASTER_COMM_DATA_REG3),
 			masterCmdData3.u32All);
 
 	/* setDMCUParam_Cmd */
-	masterCmd = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG));
+	masterCmd = dm_read_reg(ctx, REG(MASTER_COMM_CMD_REG));
 	set_reg_field_value(
 			masterCmd,
 			PSR_SET,
 			MASTER_COMM_CMD_REG,
 			MASTER_COMM_CMD_REG_BYTE0);
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG), masterCmd);
+	dm_write_reg(ctx, REG(MASTER_COMM_CMD_REG), masterCmd);
 
 	/* notifyDMCUMsg */
-	masterComCntl = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG));
+	masterComCntl = dm_read_reg(ctx, REG(MASTER_COMM_CNTL_REG));
 	set_reg_field_value(
 			masterComCntl,
 			1,
 			MASTER_COMM_CNTL_REG,
 			MASTER_COMM_INTERRUPT);
-	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG), masterComCntl);
+	dm_write_reg(ctx, REG(MASTER_COMM_CNTL_REG), masterComCntl);
 }
 
 void dce110_link_encoder_connect_dig_be_to_fe(
@@ -2496,7 +2488,7 @@ void dce110_link_encoder_connect_dig_be_to_fe(
 	uint32_t field;
 
 	if (engine != ENGINE_ID_UNKNOWN) {
-		addr = LINK_REG(DIG_BE_CNTL);
+		addr = REG(DIG_BE_CNTL);
 		value = dm_read_reg(ctx, addr);
 
 		field = get_reg_field_value(
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h
index b1daa3f..608f308 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h
@@ -31,7 +31,72 @@
 #define TO_DCE110_LINK_ENC(link_encoder)\
 	container_of(link_encoder, struct dce110_link_encoder, base)
 
-struct dce110_link_enc_bl_registers {
+#define AUX_REG_LIST(id)\
+	SRI(AUX_CONTROL, DP_AUX, id), \
+	SRI(AUX_DPHY_RX_CONTROL0, DP_AUX, id)
+
+#define LE_COMMON_REG_LIST_BASE(id) \
+	SR(BL_PWM_CNTL), \
+	SR(BL_PWM_GRP1_REG_LOCK), \
+	SR(BL_PWM_PERIOD_CNTL), \
+	SR(LVTMA_PWRSEQ_CNTL), \
+	SR(LVTMA_PWRSEQ_STATE), \
+	SR(BL_PWM_CNTL2), \
+	SR(LVTMA_PWRSEQ_REF_DIV), \
+	SR(BL1_PWM_USER_LEVEL), \
+	SR(MASTER_COMM_DATA_REG1), \
+	SR(MASTER_COMM_DATA_REG2), \
+	SR(MASTER_COMM_DATA_REG3), \
+	SR(MASTER_COMM_CMD_REG), \
+	SR(MASTER_COMM_CNTL_REG), \
+	SR(DMCU_RAM_ACCESS_CTRL), \
+	SR(DMCU_IRAM_RD_CTRL), \
+	SR(DMCU_IRAM_RD_DATA), \
+	SR(DMCU_INTERRUPT_TO_UC_EN_MASK), \
+	SR(SMU_INTERRUPT_CONTROL), \
+	SR(BIOS_SCRATCH_2), \
+	SRI(DIG_BE_CNTL, DIG, id), \
+	SRI(DIG_BE_EN_CNTL, DIG, id), \
+	SRI(DP_CONFIG, DP, id), \
+	SRI(DP_DPHY_CNTL, DP, id), \
+	SRI(DP_DPHY_INTERNAL_CTRL, DP, id), \
+	SRI(DP_DPHY_PRBS_CNTL, DP, id), \
+	SRI(DP_DPHY_SYM0, DP, id), \
+	SRI(DP_DPHY_SYM1, DP, id), \
+	SRI(DP_DPHY_SYM2, DP, id), \
+	SRI(DP_DPHY_TRAINING_PATTERN_SEL, DP, id), \
+	SRI(DP_LINK_CNTL, DP, id), \
+	SRI(DP_LINK_FRAMING_CNTL, DP, id), \
+	SRI(DP_MSE_SAT0, DP, id), \
+	SRI(DP_MSE_SAT1, DP, id), \
+	SRI(DP_MSE_SAT2, DP, id), \
+	SRI(DP_MSE_SAT_UPDATE, DP, id), \
+	SRI(DP_SEC_CNTL, DP, id), \
+	SRI(DP_VID_STREAM_CNTL, DP, id), \
+	SRI(DP_DPHY_FAST_TRAINING, DP, id), \
+	SRI(DP_SEC_CNTL1, DP, id)
+
+
+	#define LE_COMMON_REG_LIST(id)\
+		LE_COMMON_REG_LIST_BASE(id), \
+		SRI(DP_DPHY_BS_SR_SWAP_CNTL, DP, id), \
+		SR(DCI_MEM_PWR_STATUS)
+
+	#define LE_DCE110_REG_LIST(id)\
+		LE_COMMON_REG_LIST_BASE(id), \
+		SRI(DP_DPHY_BS_SR_SWAP_CNTL, DP, id), \
+		SR(DCI_MEM_PWR_STATUS)
+
+	#define LE_DCE80_REG_LIST(id)\
+		LE_COMMON_REG_LIST_BASE(id)
+
+struct dce110_link_enc_aux_registers {
+	uint32_t AUX_CONTROL;
+	uint32_t AUX_DPHY_RX_CONTROL0;
+};
+
+struct dce110_link_enc_registers {
+	/* BL registers */
 	uint32_t BL_PWM_CNTL;
 	uint32_t BL_PWM_GRP1_REG_LOCK;
 	uint32_t BL_PWM_PERIOD_CNTL;
@@ -39,9 +104,8 @@ struct dce110_link_enc_bl_registers {
 	uint32_t LVTMA_PWRSEQ_STATE;
 	uint32_t BL_PWM_CNTL2;
 	uint32_t LVTMA_PWRSEQ_REF_DIV;
-};
 
-struct dce110_link_enc_dmcu_registers {
+	/* DMCU registers */
 	uint32_t BL1_PWM_USER_LEVEL;
 	uint32_t MASTER_COMM_DATA_REG1;
 	uint32_t MASTER_COMM_DATA_REG2;
@@ -53,19 +117,10 @@ struct dce110_link_enc_dmcu_registers {
 	uint32_t DCI_MEM_PWR_STATUS;
 	uint32_t DMCU_IRAM_RD_CTRL;
 	uint32_t DMCU_IRAM_RD_DATA;
-	uint32_t DP_DPHY_FAST_TRAINING;
-	uint32_t DP_DPHY_BS_SR_SWAP_CNTL;
 	uint32_t DMCU_INTERRUPT_TO_UC_EN_MASK;
-	uint32_t DP_SEC_CNTL1;
 	uint32_t SMU_INTERRUPT_CONTROL;
-};
 
-struct dce110_link_enc_aux_registers {
-	uint32_t AUX_CONTROL;
-	uint32_t AUX_DPHY_RX_CONTROL0;
-};
-
-struct dce110_link_enc_registers {
+	/* Common DP registers */
 	uint32_t DIG_BE_CNTL;
 	uint32_t DIG_BE_EN_CNTL;
 	uint32_t DP_CONFIG;
@@ -93,8 +148,6 @@ struct dce110_link_encoder {
 	struct link_encoder base;
 	const struct dce110_link_enc_registers *link_regs;
 	const struct dce110_link_enc_aux_registers *aux_regs;
-	const struct dce110_link_enc_bl_registers *bl_regs;
-	const struct dce110_link_enc_dmcu_registers *dmcu_regs;
 };
 
 /*******************************************************************
@@ -165,9 +218,7 @@ bool dce110_link_encoder_construct(
 	struct dce110_link_encoder *enc110,
 	const struct encoder_init_data *init_data,
 	const struct dce110_link_enc_registers *link_regs,
-	const struct dce110_link_enc_aux_registers *aux_regs,
-	const struct dce110_link_enc_bl_registers *bl_regs,
-	const struct dce110_link_enc_dmcu_registers *dmcu_regs);
+	const struct dce110_link_enc_aux_registers *aux_regs);
 
 bool dce110_link_encoder_validate_dvi_output(
 	const struct dce110_link_encoder *enc110,
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
index 5b0c659..0713946 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
@@ -66,11 +66,25 @@
 #endif
 
 #ifndef mmDP_DPHY_BS_SR_SWAP_CNTL
-	#define mmDP_DPHY_BS_SR_SWAP_CNTL 0x4ADC
+	#define mmDP_DPHY_BS_SR_SWAP_CNTL                       0x4ADC
+	#define mmDP0_DP_DPHY_BS_SR_SWAP_CNTL                   0x4ADC
+	#define mmDP1_DP_DPHY_BS_SR_SWAP_CNTL                   0x4BDC
+	#define mmDP2_DP_DPHY_BS_SR_SWAP_CNTL                   0x4CDC
+	#define mmDP3_DP_DPHY_BS_SR_SWAP_CNTL                   0x4DDC
+	#define mmDP4_DP_DPHY_BS_SR_SWAP_CNTL                   0x4EDC
+	#define mmDP5_DP_DPHY_BS_SR_SWAP_CNTL                   0x4FDC
+	#define mmDP6_DP_DPHY_BS_SR_SWAP_CNTL                   0x54DC
 #endif
 
-#ifndef mmDP0_DP_DPHY_FAST_TRAINING
-	#define mmDP0_DP_DPHY_FAST_TRAINING 0x193A
+#ifndef mmDP_DPHY_FAST_TRAINING
+	#define mmDP_DPHY_FAST_TRAINING                         0x4ABC
+	#define mmDP0_DP_DPHY_FAST_TRAINING                     0x4ABC
+	#define mmDP1_DP_DPHY_FAST_TRAINING                     0x4BBC
+	#define mmDP2_DP_DPHY_FAST_TRAINING                     0x4CBC
+	#define mmDP3_DP_DPHY_FAST_TRAINING                     0x4DBC
+	#define mmDP4_DP_DPHY_FAST_TRAINING                     0x4EBC
+	#define mmDP5_DP_DPHY_FAST_TRAINING                     0x4FBC
+	#define mmDP6_DP_DPHY_FAST_TRAINING                     0x54BC
 #endif
 
 #ifndef DPHY_RX_FAST_TRAINING_CAPABLE
@@ -168,36 +182,22 @@ static const struct dce110_ipp_reg_offsets dce110_ipp_reg_offsets[] = {
 }
 };
 
-static const struct dce110_link_enc_bl_registers link_enc_bl_regs = {
-		.BL_PWM_CNTL = mmBL_PWM_CNTL,
-		.BL_PWM_GRP1_REG_LOCK = mmBL_PWM_GRP1_REG_LOCK,
-		.BL_PWM_PERIOD_CNTL = mmBL_PWM_PERIOD_CNTL,
-		.LVTMA_PWRSEQ_CNTL = mmLVTMA_PWRSEQ_CNTL,
-		.LVTMA_PWRSEQ_STATE = mmLVTMA_PWRSEQ_STATE,
-		.BL_PWM_CNTL2 = mmBL_PWM_CNTL2,
-		.LVTMA_PWRSEQ_REF_DIV = mmLVTMA_PWRSEQ_REF_DIV
-};
 
-static const struct dce110_link_enc_dmcu_registers link_enc_dmcu_regs = {
-		.BL1_PWM_USER_LEVEL = mmBL1_PWM_USER_LEVEL,
-		.MASTER_COMM_DATA_REG1 = mmMASTER_COMM_DATA_REG1,
-		.MASTER_COMM_DATA_REG2 = mmMASTER_COMM_DATA_REG2,
-		.MASTER_COMM_DATA_REG3 = mmMASTER_COMM_DATA_REG3,
-		.MASTER_COMM_CMD_REG = mmMASTER_COMM_CMD_REG,
-		.MASTER_COMM_CNTL_REG = mmMASTER_COMM_CNTL_REG,
-		.BIOS_SCRATCH_2 = mmBIOS_SCRATCH_2,
-		.DMCU_RAM_ACCESS_CTRL = mmDMCU_RAM_ACCESS_CTRL,
-		.DCI_MEM_PWR_STATUS = mmDCI_MEM_PWR_STATUS,
-		.DMCU_IRAM_RD_CTRL = mmDMCU_IRAM_RD_CTRL,
-		.DMCU_IRAM_RD_DATA = mmDMCU_IRAM_RD_DATA,
-		.DMCU_INTERRUPT_TO_UC_EN_MASK = mmDMCU_INTERRUPT_TO_UC_EN_MASK,
-		.SMU_INTERRUPT_CONTROL = mmSMU_INTERRUPT_CONTROL
-};
+
+
+/* set register offset */
+#define SR(reg_name)\
+	.reg_name = mm ## reg_name
+
+/* set register offset with instance */
+#define SRI(reg_name, block, id)\
+	.reg_name = mm ## block ## id ## _ ## reg_name
+
+
 
 #define aux_regs(id)\
 [id] = {\
-	.AUX_CONTROL = mmDP_AUX ## id ## _AUX_CONTROL,\
-	.AUX_DPHY_RX_CONTROL0 = mmDP_AUX ## id ## _AUX_DPHY_RX_CONTROL0\
+	AUX_REG_LIST(id)\
 }
 
 static const struct dce110_link_enc_aux_registers link_enc_aux_regs[] = {
@@ -211,48 +211,19 @@ static const struct dce110_link_enc_aux_registers link_enc_aux_regs[] = {
 
 #define link_regs(id)\
 [id] = {\
-	.DIG_BE_CNTL = mmDIG ## id ## _DIG_BE_CNTL,\
-	.DIG_BE_EN_CNTL = mmDIG ## id ## _DIG_BE_EN_CNTL,\
-	.DP_CONFIG = mmDP ## id ## _DP_CONFIG,\
-	.DP_DPHY_CNTL = mmDP ## id ## _DP_DPHY_CNTL,\
-	.DP_DPHY_INTERNAL_CTRL = mmDP ## id ## _DP_DPHY_INTERNAL_CTRL,\
-	.DP_DPHY_PRBS_CNTL = mmDP ## id ## _DP_DPHY_PRBS_CNTL,\
-	.DP_DPHY_SYM0 = mmDP ## id ## _DP_DPHY_SYM0,\
-	.DP_DPHY_SYM1 = mmDP ## id ## _DP_DPHY_SYM1,\
-	.DP_DPHY_SYM2 = mmDP ## id ## _DP_DPHY_SYM2,\
-	.DP_DPHY_TRAINING_PATTERN_SEL = mmDP ## id ## _DP_DPHY_TRAINING_PATTERN_SEL,\
-	.DP_LINK_CNTL = mmDP ## id ## _DP_LINK_CNTL,\
-	.DP_LINK_FRAMING_CNTL = mmDP ## id ## _DP_LINK_FRAMING_CNTL,\
-	.DP_MSE_SAT0 = mmDP ## id ## _DP_MSE_SAT0,\
-	.DP_MSE_SAT1 = mmDP ## id ## _DP_MSE_SAT1,\
-	.DP_MSE_SAT2 = mmDP ## id ## _DP_MSE_SAT2,\
-	.DP_MSE_SAT_UPDATE = mmDP ## id ## _DP_MSE_SAT_UPDATE,\
-	.DP_SEC_CNTL = mmDP ## id ## _DP_SEC_CNTL,\
-	.DP_VID_STREAM_CNTL = mmDP ## id ## _DP_VID_STREAM_CNTL,\
-	.DP_DPHY_FAST_TRAINING = mmDP ## id ## _DP_DPHY_FAST_TRAINING,\
-	.DP_DPHY_BS_SR_SWAP_CNTL = mmDP ## id ## _DP_DPHY_BS_SR_SWAP_CNTL,\
-	.DP_SEC_CNTL1  = mmDP ## id ## _DP_SEC_CNTL1\
+	LE_DCE110_REG_LIST(id)\
 }
 
 static const struct dce110_link_enc_registers link_enc_regs[] = {
-		link_regs(0),
-		link_regs(1),
-		link_regs(2),
-		link_regs(3),
-		link_regs(4),
-		link_regs(5),
-		link_regs(6)
+	link_regs(0),
+	link_regs(1),
+	link_regs(2),
+	link_regs(3),
+	link_regs(4),
+	link_regs(5),
+	link_regs(6),
 };
 
-/* set register offset */
-#define SR(reg_name)\
-	.reg_name = mm ## reg_name
-
-/* set register offset with instance */
-#define SRI(reg_name, block, id)\
-	.reg_name = mm ## block ## id ## _ ## reg_name
-
-
 #define stream_enc_regs(id)\
 [id] = {\
 	SE_COMMON_REG_LIST(id)\
@@ -446,9 +417,7 @@ struct link_encoder *dce110_link_encoder_create(
 			enc110,
 			enc_init_data,
 			&link_enc_regs[enc_init_data->transmitter],
-			&link_enc_aux_regs[enc_init_data->channel - 1],
-			&link_enc_bl_regs,
-			&link_enc_dmcu_regs))
+			&link_enc_aux_regs[enc_init_data->channel - 1]))
 		return &enc110->base;
 
 	BREAK_TO_DEBUGGER();
diff --git a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_link_encoder.c b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_link_encoder.c
index 25787e3..c048d35 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_link_encoder.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_link_encoder.c
@@ -169,17 +169,13 @@ bool dce112_link_encoder_construct(
 	struct dce110_link_encoder *enc110,
 	const struct encoder_init_data *init_data,
 	const struct dce110_link_enc_registers *link_regs,
-	const struct dce110_link_enc_aux_registers *aux_regs,
-	const struct dce110_link_enc_bl_registers *bl_regs,
-	const struct dce110_link_enc_dmcu_registers *dmcu_regs)
+	const struct dce110_link_enc_aux_registers *aux_regs)
 {
 	dce110_link_encoder_construct(
 		enc110,
 		init_data,
 		link_regs,
-		aux_regs,
-		bl_regs,
-		dmcu_regs);
+		aux_regs);
 
 	enc110->base.funcs = &dce112_lnk_enc_funcs;
 
diff --git a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_link_encoder.h b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_link_encoder.h
index 71c04cc..4face57 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_link_encoder.h
+++ b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_link_encoder.h
@@ -33,9 +33,7 @@ bool dce112_link_encoder_construct(
 	struct dce110_link_encoder *enc110,
 	const struct encoder_init_data *init_data,
 	const struct dce110_link_enc_registers *link_regs,
-	const struct dce110_link_enc_aux_registers *aux_regs,
-	const struct dce110_link_enc_bl_registers *bl_regs,
-	const struct dce110_link_enc_dmcu_registers *dmcu_regs);
+	const struct dce110_link_enc_aux_registers *aux_regs);
 
 /****************** HW programming ************************/
 
diff --git a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
index 65e7b31..4dad5be 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
@@ -66,11 +66,25 @@
 #endif
 
 #ifndef mmDP_DPHY_BS_SR_SWAP_CNTL
-	#define mmDP_DPHY_BS_SR_SWAP_CNTL 0x4ADC
+	#define mmDP_DPHY_BS_SR_SWAP_CNTL                       0x4ADC
+	#define mmDP0_DP_DPHY_BS_SR_SWAP_CNTL                   0x4ADC
+	#define mmDP1_DP_DPHY_BS_SR_SWAP_CNTL                   0x4BDC
+	#define mmDP2_DP_DPHY_BS_SR_SWAP_CNTL                   0x4CDC
+	#define mmDP3_DP_DPHY_BS_SR_SWAP_CNTL                   0x4DDC
+	#define mmDP4_DP_DPHY_BS_SR_SWAP_CNTL                   0x4EDC
+	#define mmDP5_DP_DPHY_BS_SR_SWAP_CNTL                   0x4FDC
+	#define mmDP6_DP_DPHY_BS_SR_SWAP_CNTL                   0x54DC
 #endif
 
-#ifndef mmDP0_DP_DPHY_FAST_TRAINING
-	#define mmDP0_DP_DPHY_FAST_TRAINING 0x193A
+#ifndef mmDP_DPHY_FAST_TRAINING
+	#define mmDP_DPHY_FAST_TRAINING                         0x4ABC
+	#define mmDP0_DP_DPHY_FAST_TRAINING                     0x4ABC
+	#define mmDP1_DP_DPHY_FAST_TRAINING                     0x4BBC
+	#define mmDP2_DP_DPHY_FAST_TRAINING                     0x4CBC
+	#define mmDP3_DP_DPHY_FAST_TRAINING                     0x4DBC
+	#define mmDP4_DP_DPHY_FAST_TRAINING                     0x4EBC
+	#define mmDP5_DP_DPHY_FAST_TRAINING                     0x4FBC
+	#define mmDP6_DP_DPHY_FAST_TRAINING                     0x54BC
 #endif
 
 enum dce112_clk_src_array_id {
@@ -212,68 +226,32 @@ static const struct dce110_ipp_reg_offsets ipp_reg_offsets[] = {
 }
 };
 
-static const struct dce110_link_enc_bl_registers link_enc_bl_regs = {
-		.BL_PWM_CNTL = mmBL_PWM_CNTL,
-		.BL_PWM_GRP1_REG_LOCK = mmBL_PWM_GRP1_REG_LOCK,
-		.BL_PWM_PERIOD_CNTL = mmBL_PWM_PERIOD_CNTL,
-		.LVTMA_PWRSEQ_CNTL = mmLVTMA_PWRSEQ_CNTL,
-		.LVTMA_PWRSEQ_STATE = mmLVTMA_PWRSEQ_STATE
-};
 
-static const struct dce110_link_enc_dmcu_registers link_enc_dmcu_regs = {
-		.BL1_PWM_USER_LEVEL = mmBL1_PWM_USER_LEVEL,
-		.MASTER_COMM_DATA_REG1 = mmMASTER_COMM_DATA_REG1,
-		.MASTER_COMM_DATA_REG2 = mmMASTER_COMM_DATA_REG2,
-		.MASTER_COMM_DATA_REG3 = mmMASTER_COMM_DATA_REG3,
-		.MASTER_COMM_CMD_REG = mmMASTER_COMM_CMD_REG,
-		.MASTER_COMM_CNTL_REG = mmMASTER_COMM_CNTL_REG,
-		.BIOS_SCRATCH_2 = mmBIOS_SCRATCH_2,
-		.DMCU_RAM_ACCESS_CTRL = mmDMCU_RAM_ACCESS_CTRL,
-		.DCI_MEM_PWR_STATUS = mmDCI_MEM_PWR_STATUS,
-		.DMCU_IRAM_RD_CTRL = mmDMCU_IRAM_RD_CTRL,
-		.DMCU_IRAM_RD_DATA = mmDMCU_IRAM_RD_DATA,
-		.DP_DPHY_FAST_TRAINING = mmDP_DPHY_FAST_TRAINING,
-		.DP_DPHY_BS_SR_SWAP_CNTL = mmDP_DPHY_BS_SR_SWAP_CNTL,
-		.DMCU_INTERRUPT_TO_UC_EN_MASK = mmDMCU_INTERRUPT_TO_UC_EN_MASK,
-		.DP_SEC_CNTL1 = mmDP_SEC_CNTL1,
-		.SMU_INTERRUPT_CONTROL = mmSMU_INTERRUPT_CONTROL
-};
+/* set register offset */
+#define SR(reg_name)\
+	.reg_name = mm ## reg_name
+
+/* set register offset with instance */
+#define SRI(reg_name, block, id)\
+	.reg_name = mm ## block ## id ## _ ## reg_name
 
 #define aux_regs(id)\
 [id] = {\
-	.AUX_CONTROL = mmDP_AUX ## id ## _AUX_CONTROL,\
-	.AUX_DPHY_RX_CONTROL0 = mmDP_AUX ## id ## _AUX_DPHY_RX_CONTROL0\
+	AUX_REG_LIST(id)\
 }
 
 static const struct dce110_link_enc_aux_registers link_enc_aux_regs[] = {
-	aux_regs(0),
-	aux_regs(1),
-	aux_regs(2),
-	aux_regs(3),
-	aux_regs(4),
-	aux_regs(5)
+		aux_regs(0),
+		aux_regs(1),
+		aux_regs(2),
+		aux_regs(3),
+		aux_regs(4),
+		aux_regs(5)
 };
 
 #define link_regs(id)\
 [id] = {\
-	.DIG_BE_CNTL = mmDIG ## id ## _DIG_BE_CNTL,\
-	.DIG_BE_EN_CNTL = mmDIG ## id ## _DIG_BE_EN_CNTL,\
-	.DP_CONFIG = mmDP ## id ## _DP_CONFIG,\
-	.DP_DPHY_CNTL = mmDP ## id ## _DP_DPHY_CNTL,\
-	.DP_DPHY_INTERNAL_CTRL = mmDP ## id ## _DP_DPHY_INTERNAL_CTRL,\
-	.DP_DPHY_PRBS_CNTL = mmDP ## id ## _DP_DPHY_PRBS_CNTL,\
-	.DP_DPHY_SYM0 = mmDP ## id ## _DP_DPHY_SYM0,\
-	.DP_DPHY_SYM1 = mmDP ## id ## _DP_DPHY_SYM1,\
-	.DP_DPHY_SYM2 = mmDP ## id ## _DP_DPHY_SYM2,\
-	.DP_DPHY_TRAINING_PATTERN_SEL = mmDP ## id ## _DP_DPHY_TRAINING_PATTERN_SEL,\
-	.DP_LINK_CNTL = mmDP ## id ## _DP_LINK_CNTL,\
-	.DP_LINK_FRAMING_CNTL = mmDP ## id ## _DP_LINK_FRAMING_CNTL,\
-	.DP_MSE_SAT0 = mmDP ## id ## _DP_MSE_SAT0,\
-	.DP_MSE_SAT1 = mmDP ## id ## _DP_MSE_SAT1,\
-	.DP_MSE_SAT2 = mmDP ## id ## _DP_MSE_SAT2,\
-	.DP_MSE_SAT_UPDATE = mmDP ## id ## _DP_MSE_SAT_UPDATE,\
-	.DP_SEC_CNTL = mmDP ## id ## _DP_SEC_CNTL,\
-	.DP_VID_STREAM_CNTL = mmDP ## id ## _DP_VID_STREAM_CNTL\
+	LE_DCE110_REG_LIST(id)\
 }
 
 static const struct dce110_link_enc_registers link_enc_regs[] = {
@@ -282,18 +260,10 @@ static const struct dce110_link_enc_registers link_enc_regs[] = {
 	link_regs(2),
 	link_regs(3),
 	link_regs(4),
-	link_regs(5)
+	link_regs(5),
+	link_regs(6),
 };
 
-/* set register offset */
-#define SR(reg_name)\
-	.reg_name = mm ## reg_name
-
-/* set register offset with instance */
-#define SRI(reg_name, block, id)\
-	.reg_name = mm ## block ## id ## _ ## reg_name
-
-
 #define stream_enc_regs(id)\
 [id] = {\
 	SE_COMMON_REG_LIST(id)\
@@ -477,9 +447,7 @@ struct link_encoder *dce112_link_encoder_create(
 			enc110,
 			enc_init_data,
 			&link_enc_regs[enc_init_data->transmitter],
-			&link_enc_aux_regs[enc_init_data->channel - 1],
-			&link_enc_bl_regs,
-			&link_enc_dmcu_regs))
+			&link_enc_aux_regs[enc_init_data->channel - 1]))
 		return &enc110->base;
 
 	BREAK_TO_DEBUGGER();
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c
index 70dada5..9667842 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c
@@ -220,8 +220,7 @@ bool dce80_link_encoder_construct(
 	struct dce110_link_encoder *enc110,
 	const struct encoder_init_data *init_data,
 	const struct dce110_link_enc_registers *link_regs,
-	const struct dce110_link_enc_aux_registers *aux_regs,
-	const struct dce110_link_enc_bl_registers *bl_regs)
+	const struct dce110_link_enc_aux_registers *aux_regs)
 {
 	struct graphics_object_encoder_cap_info enc_cap_info = {0};
 
@@ -281,7 +280,6 @@ bool dce80_link_encoder_construct(
 
 	enc110->link_regs = link_regs;
 	enc110->aux_regs = aux_regs;
-	enc110->bl_regs = bl_regs;
 
 	switch (enc110->base.transmitter) {
 	case TRANSMITTER_UNIPHY_A:
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.h b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.h
index 06e2c37..73be5fc 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.h
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.h
@@ -33,7 +33,6 @@ bool dce80_link_encoder_construct(
 	struct dce110_link_encoder *enc110,
 	const struct encoder_init_data *init_data,
 	const struct dce110_link_enc_registers *link_regs,
-	const struct dce110_link_enc_aux_registers *aux_regs,
-	const struct dce110_link_enc_bl_registers *bl_regs);
+	const struct dce110_link_enc_aux_registers *aux_regs);
 
 #endif /* __DC_LINK_ENCODER__DCE80_H__ */
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
index 476774d..e2819a3 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
@@ -64,6 +64,23 @@
 #define mmDP6_DP_DPHY_INTERNAL_CTRL                     0x4EDE
 #endif
 
+
+#ifndef mmBIOS_SCRATCH_2
+	#define mmBIOS_SCRATCH_2 0x05CB
+#endif
+
+#ifndef mmDP_DPHY_FAST_TRAINING
+	#define mmDP_DPHY_FAST_TRAINING                         0x1CCE
+	#define mmDP0_DP_DPHY_FAST_TRAINING                     0x1CCE
+	#define mmDP1_DP_DPHY_FAST_TRAINING                     0x1FCE
+	#define mmDP2_DP_DPHY_FAST_TRAINING                     0x42CE
+	#define mmDP3_DP_DPHY_FAST_TRAINING                     0x45CE
+	#define mmDP4_DP_DPHY_FAST_TRAINING                     0x48CE
+	#define mmDP5_DP_DPHY_FAST_TRAINING                     0x4BCE
+	#define mmDP6_DP_DPHY_FAST_TRAINING                     0x4ECE
+#endif
+
+
 #define DCE11_DIG_FE_CNTL 0x4a00
 #define DCE11_DIG_BE_CNTL 0x4a47
 #define DCE11_DP_SEC 0x4ac3
@@ -216,18 +233,17 @@ static const struct dce110_ipp_reg_offsets ipp_reg_offsets[] = {
 }
 };
 
-static const struct dce110_link_enc_bl_registers link_enc_bl_regs = {
-		.BL_PWM_CNTL = mmBL_PWM_CNTL,
-		.BL_PWM_GRP1_REG_LOCK = mmBL_PWM_GRP1_REG_LOCK,
-		.BL_PWM_PERIOD_CNTL = mmBL_PWM_PERIOD_CNTL,
-		.LVTMA_PWRSEQ_CNTL = mmLVTMA_PWRSEQ_CNTL,
-		.LVTMA_PWRSEQ_STATE = mmLVTMA_PWRSEQ_STATE
-};
+/* set register offset */
+#define SR(reg_name)\
+	.reg_name = mm ## reg_name
+
+/* set register offset with instance */
+#define SRI(reg_name, block, id)\
+	.reg_name = mm ## block ## id ## _ ## reg_name
 
 #define aux_regs(id)\
 [id] = {\
-	.AUX_CONTROL = mmDP_AUX ## id ## _AUX_CONTROL,\
-	.AUX_DPHY_RX_CONTROL0 = mmDP_AUX ## id ## _AUX_DPHY_RX_CONTROL0\
+	AUX_REG_LIST(id)\
 }
 
 static const struct dce110_link_enc_aux_registers link_enc_aux_regs[] = {
@@ -241,24 +257,7 @@ static const struct dce110_link_enc_aux_registers link_enc_aux_regs[] = {
 
 #define link_regs(id)\
 [id] = {\
-	.DIG_BE_CNTL = mmDIG ## id ## _DIG_BE_CNTL,\
-	.DIG_BE_EN_CNTL = mmDIG ## id ## _DIG_BE_EN_CNTL,\
-	.DP_CONFIG = mmDP ## id ## _DP_CONFIG,\
-	.DP_DPHY_CNTL = mmDP ## id ## _DP_DPHY_CNTL,\
-	.DP_DPHY_INTERNAL_CTRL = mmDP ## id ## _DP_DPHY_INTERNAL_CTRL,\
-	.DP_DPHY_PRBS_CNTL = mmDP ## id ## _DP_DPHY_PRBS_CNTL,\
-	.DP_DPHY_SYM0 = mmDP ## id ## _DP_DPHY_SYM0,\
-	.DP_DPHY_SYM1 = mmDP ## id ## _DP_DPHY_SYM1,\
-	.DP_DPHY_SYM2 = mmDP ## id ## _DP_DPHY_SYM2,\
-	.DP_DPHY_TRAINING_PATTERN_SEL = mmDP ## id ## _DP_DPHY_TRAINING_PATTERN_SEL,\
-	.DP_LINK_CNTL = mmDP ## id ## _DP_LINK_CNTL,\
-	.DP_LINK_FRAMING_CNTL = mmDP ## id ## _DP_LINK_FRAMING_CNTL,\
-	.DP_MSE_SAT0 = mmDP ## id ## _DP_MSE_SAT0,\
-	.DP_MSE_SAT1 = mmDP ## id ## _DP_MSE_SAT1,\
-	.DP_MSE_SAT2 = mmDP ## id ## _DP_MSE_SAT2,\
-	.DP_MSE_SAT_UPDATE = mmDP ## id ## _DP_MSE_SAT_UPDATE,\
-	.DP_SEC_CNTL = mmDP ## id ## _DP_SEC_CNTL,\
-	.DP_VID_STREAM_CNTL = mmDP ## id ## _DP_VID_STREAM_CNTL\
+	LE_DCE80_REG_LIST(id)\
 }
 
 static const struct dce110_link_enc_registers link_enc_regs[] = {
@@ -267,17 +266,10 @@ static const struct dce110_link_enc_registers link_enc_regs[] = {
 	link_regs(2),
 	link_regs(3),
 	link_regs(4),
-	link_regs(5)
+	link_regs(5),
+	link_regs(6),
 };
 
-/* set register offset */
-#define SR(reg_name)\
-	.reg_name = mm ## reg_name
-
-/* set register offset with instance */
-#define SRI(reg_name, block, id)\
-	.reg_name = mm ## block ## id ## _ ## reg_name
-
 #define stream_enc_regs(id)\
 [id] = {\
 	SE_COMMON_REG_LIST_BASE(id),\
@@ -441,8 +433,7 @@ struct link_encoder *dce80_link_encoder_create(
 			enc110,
 			enc_init_data,
 			&link_enc_regs[enc_init_data->transmitter],
-			&link_enc_aux_regs[enc_init_data->channel - 1],
-			&link_enc_bl_regs))
+			&link_enc_aux_regs[enc_init_data->channel - 1]))
 		return &enc110->base;
 
 	BREAK_TO_DEBUGGER();
-- 
2.7.4

