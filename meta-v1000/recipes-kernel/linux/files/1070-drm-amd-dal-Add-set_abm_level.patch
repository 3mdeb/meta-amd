From 0c68d13bbd37e144ba44d130403637109778902c Mon Sep 17 00:00:00 2001
From: Amy Zhang <Amy.Zhang@amd.com>
Date: Tue, 6 Sep 2016 11:22:35 -0400
Subject: [PATCH 1070/1722] drm/amd/dal: Add set_abm_level

Adding automatic backlight management function.

- Created ABM control interface in backlight module
- Created dc link encoder function to set DMCU ABM registers

Change-Id: I2fe7fc0ed285b3214c80291f11fc45c1f1e4418c
Signed-off-by: Amy Zhang <Amy.Zhang@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/core/dc.c               |  15 +++
 drivers/gpu/drm/amd/dal/dc/core/dc_link.c          |  18 ++-
 drivers/gpu/drm/amd/dal/dc/dc.h                    |   3 +
 .../drm/amd/dal/dc/dce100/dce100_link_encoder.c    |   1 +
 .../drm/amd/dal/dc/dce110/dce110_link_encoder.c    |  51 +++++++++
 .../drm/amd/dal/dc/dce110/dce110_link_encoder.h    |   4 +
 .../drm/amd/dal/dc/dce112/dce112_link_encoder.c    |   1 +
 .../gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c  |   1 +
 drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h   |   1 +
 .../gpu/drm/amd/dal/modules/backlight/backlight.c  | 125 +++++++++++++++++++++
 .../gpu/drm/amd/dal/modules/inc/mod_backlight.h    |  25 +++++
 11 files changed, 243 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc.c b/drivers/gpu/drm/amd/dal/dc/core/dc.c
index adc053a..4815657 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc.c
@@ -304,6 +304,18 @@ static bool set_backlight(struct dc *dc, unsigned int backlight_level,
 
 }
 
+static bool set_abm_level(struct dc *dc, unsigned int abm_level)
+{
+	struct core_dc *core_dc = DC_TO_CORE(dc);
+	int i;
+
+	for (i = 0; i < core_dc->link_count; i++)
+		dc_link_set_abm_level(&core_dc->links[i]->public,
+				abm_level);
+
+	return true;
+}
+
 static void allocate_dc_stream_funcs(struct core_dc *core_dc)
 {
 	core_dc->public.stream_funcs.stream_update_scaling = stream_update_scaling;
@@ -317,6 +329,9 @@ static void allocate_dc_stream_funcs(struct core_dc *core_dc)
 
 	core_dc->public.stream_funcs.set_backlight =
 			set_backlight;
+
+	core_dc->public.stream_funcs.set_abm_level =
+			set_abm_level;
 }
 
 static bool construct(struct core_dc *dc,
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_link.c b/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
index adbd1ff..d1e3754 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
@@ -1371,10 +1371,11 @@ enum dc_status dc_link_validate_mode_timing(
 	return DC_OK;
 }
 
-bool dc_link_set_backlight_level(const struct dc_link *public, uint32_t level,
+
+bool dc_link_set_backlight_level(const struct dc_link *dc_link, uint32_t level,
 		uint32_t frame_ramp, const struct dc_stream *stream)
 {
-	struct core_link *link = DC_LINK_TO_CORE(public);
+	struct core_link *link = DC_LINK_TO_CORE(dc_link);
 	struct dc_context *ctx = link->ctx;
 	struct core_dc *core_dc = DC_TO_CORE(ctx->dc);
 	struct core_stream *core_stream = DC_STREAM_TO_CORE(stream);
@@ -1402,6 +1403,19 @@ bool dc_link_set_backlight_level(const struct dc_link *public, uint32_t level,
 	return true;
 }
 
+bool dc_link_set_abm_level(const struct dc_link *dc_link, uint32_t level)
+{
+	struct core_link *link = DC_LINK_TO_CORE(dc_link);
+	struct dc_context *ctx = link->ctx;
+
+	dal_logger_write(ctx->logger, LOG_MAJOR_BACKLIGHT,
+			LOG_MINOR_BACKLIGHT_INTERFACE,
+			"New abm level: %d (0x%X)\n", level, level);
+
+	link->link_enc->funcs->set_dmcu_abm_level(link->link_enc, level);
+	return true;
+}
+
 const struct dc_link_status *dc_link_get_status(const struct dc_link *dc_link)
 {
 	struct core_link *link = DC_LINK_TO_CORE(dc_link);
diff --git a/drivers/gpu/drm/amd/dal/dc/dc.h b/drivers/gpu/drm/amd/dal/dc/dc.h
index fba9ac0..67b8350 100644
--- a/drivers/gpu/drm/amd/dal/dc/dc.h
+++ b/drivers/gpu/drm/amd/dal/dc/dc.h
@@ -71,6 +71,7 @@ struct dc_stream_funcs {
 			const struct dc_stream **stream, int num_streams);
 	bool (*set_backlight)(struct dc *dc, unsigned int backlight_level,
 			unsigned int frame_ramp, const struct dc_stream *stream);
+	bool (*set_abm_level)(struct dc *dc, unsigned int abm_level);
 };
 
 /* Structure to hold configuration flags set by dm at dc creation. */
@@ -499,6 +500,8 @@ const struct graphics_object_id dc_get_link_id_at_index(
 bool dc_link_set_backlight_level(const struct dc_link *dc_link, uint32_t level,
 		uint32_t frame_ramp, const struct dc_stream *stream);
 
+bool dc_link_set_abm_level(const struct dc_link *dc_link, uint32_t level);
+
 /* Request DC to detect if there is a Panel connected.
  * boot - If this call is during initial boot.
  * Return false for any type of detection failure or MST detection
diff --git a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_link_encoder.c b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_link_encoder.c
index e430f43..2f66f10 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_link_encoder.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_link_encoder.c
@@ -56,6 +56,7 @@ static const struct link_encoder_funcs dce100_lnk_enc_funcs = {
 		dce110_link_encoder_update_mst_stream_allocation_table,
 	.set_dmcu_backlight_level =
 		dce110_link_encoder_set_dmcu_backlight_level,
+	.set_dmcu_abm_level = dce110_link_encoder_set_dmcu_abm_level,
 	.backlight_control = dce110_link_encoder_edp_backlight_control,
 	.power_control = dce110_link_encoder_edp_power_control,
 	.connect_dig_be_to_fe = dce110_link_encoder_connect_dig_be_to_fe,
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
index 2dbf55c..1dc4794 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
@@ -92,6 +92,8 @@
 
 /* Set the ABM Pipe */
 #define MCP_ABM_PIPE_SET 0x66
+/* Set the ABM level */
+#define MCP_ABM_LEVEL_SET 0x65
 /* Set backlight level */
 #define MCP_BL_SET 0x67
 
@@ -120,6 +122,7 @@ static const struct link_encoder_funcs dce110_lnk_enc_funcs = {
 		dce110_link_encoder_update_mst_stream_allocation_table,
 	.set_dmcu_backlight_level =
 			dce110_link_encoder_set_dmcu_backlight_level,
+	.set_dmcu_abm_level = dce110_link_encoder_set_dmcu_abm_level,
 	.backlight_control = dce110_link_encoder_edp_backlight_control,
 	.power_control = dce110_link_encoder_edp_power_control,
 	.connect_dig_be_to_fe = dce110_link_encoder_connect_dig_be_to_fe,
@@ -1865,6 +1868,54 @@ void dce110_link_encoder_set_dmcu_backlight_level(
 	dm_write_reg(ctx, DMCU_REG(BIOS_SCRATCH_2), s2);
 }
 
+void dce110_link_encoder_set_dmcu_abm_level(
+	struct link_encoder *enc,
+	uint32_t level)
+{
+	struct dce110_link_encoder *enc110 = TO_DCE110_LINK_ENC(enc);
+	struct dc_context *ctx = enc110->base.ctx;
+
+	unsigned int dmcu_max_retry_on_wait_reg_ready = 801;
+	unsigned int dmcu_wait_reg_ready_interval = 100;
+
+	unsigned int regValue;
+	uint32_t masterCmd;
+	uint32_t masterComCntl;
+
+	/* waitDMCUReadyForCmd */
+	do {
+		dm_delay_in_microseconds(ctx, dmcu_wait_reg_ready_interval);
+		regValue = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG));
+		dmcu_max_retry_on_wait_reg_ready--;
+	} while
+	((MASTER_COMM_CNTL_REG__MASTER_COMM_INTERRUPT_MASK & regValue) !=
+		(MASTER_COMM_CNTL_REG__MASTER_COMM_INTERRUPT_MASK & 0) &&
+		dmcu_max_retry_on_wait_reg_ready > 0);
+
+	/* setDMCUParam_ABMLevel */
+	masterCmd = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG));
+	set_reg_field_value(
+			masterCmd,
+			MCP_ABM_LEVEL_SET,
+			MASTER_COMM_CMD_REG,
+			MASTER_COMM_CMD_REG_BYTE0);
+	set_reg_field_value(
+			masterCmd,
+			level,
+			MASTER_COMM_CMD_REG,
+			MASTER_COMM_CMD_REG_BYTE2);
+	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG), masterCmd);
+
+	/* notifyDMCUMsg */
+	masterComCntl = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG));
+	set_reg_field_value(
+			masterComCntl,
+			1,
+			MASTER_COMM_CNTL_REG,
+			MASTER_COMM_INTERRUPT);
+	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG), masterComCntl);
+}
+
 void dce110_link_encoder_connect_dig_be_to_fe(
 	struct link_encoder *enc,
 	enum engine_id engine,
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h
index 80e9478..2534b4d 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h
@@ -171,6 +171,10 @@ void dce110_link_encoder_set_dmcu_backlight_level(
 	uint32_t frame_ramp,
 	uint32_t controller_id);
 
+void dce110_link_encoder_set_dmcu_abm_level(
+	struct link_encoder *enc,
+	uint32_t level);
+
 void dce110_link_encoder_edp_backlight_control(
 	struct link_encoder *enc,
 	bool enable);
diff --git a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_link_encoder.c b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_link_encoder.c
index e0c0ace..7b98fc9 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_link_encoder.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_link_encoder.c
@@ -157,6 +157,7 @@ static const struct link_encoder_funcs dce112_lnk_enc_funcs = {
 		dce110_link_encoder_update_mst_stream_allocation_table,
 	.set_dmcu_backlight_level =
 		dce110_link_encoder_set_dmcu_backlight_level,
+	.set_dmcu_abm_level = dce110_link_encoder_set_dmcu_abm_level,
 	.backlight_control = dce110_link_encoder_edp_backlight_control,
 	.power_control = dce110_link_encoder_edp_power_control,
 	.connect_dig_be_to_fe = dce110_link_encoder_connect_dig_be_to_fe,
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c
index 1be8853..dd41cd6 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c
@@ -208,6 +208,7 @@ static const struct link_encoder_funcs dce80_lnk_enc_funcs = {
 		dce110_link_encoder_update_mst_stream_allocation_table,
 	.set_dmcu_backlight_level =
 		dce110_link_encoder_set_dmcu_backlight_level,
+	.set_dmcu_abm_level = dce110_link_encoder_set_dmcu_abm_level,
 	.backlight_control = dce110_link_encoder_edp_backlight_control,
 	.power_control = dce110_link_encoder_edp_power_control,
 	.connect_dig_be_to_fe = dce110_link_encoder_connect_dig_be_to_fe,
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h b/drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h
index 70adf25..962520c 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h
@@ -110,6 +110,7 @@ struct link_encoder_funcs {
 		const struct link_mst_stream_allocation_table *table);
 	void (*set_dmcu_backlight_level)(struct link_encoder *enc,
 		uint32_t level, uint32_t frame_ramp, uint32_t controller_id);
+	void (*set_dmcu_abm_level)(struct link_encoder *enc, uint32_t level);
 	void (*backlight_control) (struct link_encoder *enc,
 		bool enable);
 	void (*power_control) (struct link_encoder *enc,
diff --git a/drivers/gpu/drm/amd/dal/modules/backlight/backlight.c b/drivers/gpu/drm/amd/dal/modules/backlight/backlight.c
index 14fc3ea..f159023 100644
--- a/drivers/gpu/drm/amd/dal/modules/backlight/backlight.c
+++ b/drivers/gpu/drm/amd/dal/modules/backlight/backlight.c
@@ -69,6 +69,10 @@ static bool backlight_caps_initialized;
 /* AC/DC levels initialized later in separate context */
 static bool  backlight_def_levels_valid;
 
+/* ABM cached properties */
+static unsigned int abm_level;
+static bool abm_user_enable;
+static bool abm_active;
 
 /* Defines default backlight curve F(x) = A(x*x) + Bx + C.
  *
@@ -183,6 +187,9 @@ struct mod_backlight *mod_backlight_create(struct dc *dc)
 	if (!check_dc_support(dc))
 		goto fail_construct;
 
+	abm_user_enable = false;
+	abm_active = false;
+
 	return &core_backlight->public;
 
 fail_construct:
@@ -607,3 +614,121 @@ bool mod_backlight_notify_mode_change(struct mod_backlight *mod_backlight,
 
 }
 
+
+static bool mod_backlight_abm_feature_enable(struct mod_backlight
+		*mod_backlight, bool enable)
+{
+	struct core_backlight *core_backlight =
+					MOD_BACKLIGHT_TO_CORE(mod_backlight);
+	if (abm_user_enable == enable)
+		return true;
+
+	abm_user_enable = enable;
+
+	if (enable) {
+		if (abm_level != 0 && abm_active)
+			core_backlight->dc->stream_funcs.set_abm_level
+					(core_backlight->dc, abm_level);
+	} else {
+		if (abm_level != 0 && abm_active) {
+			abm_level = 0;
+			core_backlight->dc->stream_funcs.set_abm_level
+					(core_backlight->dc, abm_level);
+		}
+	}
+
+	return true;
+}
+
+static bool mod_backlight_abm_activate(struct mod_backlight
+		*mod_backlight, bool activate)
+{
+	struct core_backlight *core_backlight =
+					MOD_BACKLIGHT_TO_CORE(mod_backlight);
+	if (abm_active == activate)
+		return true;
+
+	abm_active = activate;
+
+	if (activate) {
+		if (abm_level != 0 && abm_user_enable)
+			core_backlight->dc->stream_funcs.set_abm_level
+					(core_backlight->dc, abm_level);
+	} else {
+		if (abm_level != 0 && abm_user_enable) {
+			abm_level = 0;
+			core_backlight->dc->stream_funcs.set_abm_level
+					(core_backlight->dc, abm_level);
+		}
+	}
+
+	return true;
+}
+
+static bool mod_backlight_abm_set_level(struct mod_backlight *mod_backlight,
+		unsigned int level)
+{
+	struct core_backlight *core_backlight =
+					MOD_BACKLIGHT_TO_CORE(mod_backlight);
+	if (abm_level == level)
+		return true;
+
+	if (abm_active && abm_user_enable && level == 0)
+		core_backlight->dc->stream_funcs.set_abm_level
+			(core_backlight->dc, 0);
+	else if (abm_active && abm_user_enable && level != 0)
+		core_backlight->dc->stream_funcs.set_abm_level
+				(core_backlight->dc, level);
+
+	abm_level = level;
+
+	return true;
+}
+
+bool mod_backlight_varibright_control(struct mod_backlight *mod_backlight,
+		struct varibright_info *input_varibright_info)
+{
+	switch (input_varibright_info->cmd) {
+	case VariBright_Cmd__SetVBLevel:
+	{
+		/* Set VariBright user level. */
+		mod_backlight_abm_set_level(mod_backlight,
+				input_varibright_info->level);
+	}
+	break;
+
+	case VariBright_Cmd__UserEnable:
+	{
+		/* Set VariBright user enable state. */
+		mod_backlight_abm_feature_enable(mod_backlight,
+				input_varibright_info->enable);
+	}
+	break;
+
+	case VariBright_Cmd__PostDisplayConfigChange:
+	{
+		/* Set VariBright user level. */
+		mod_backlight_abm_set_level(mod_backlight,
+						input_varibright_info->level);
+
+		/* Set VariBright user enable state. */
+		mod_backlight_abm_feature_enable(mod_backlight,
+				input_varibright_info->enable);
+
+		/* Set VariBright activate based on power state. */
+		mod_backlight_abm_activate(mod_backlight,
+				input_varibright_info->activate);
+	}
+	break;
+
+	default:
+	{
+		return false;
+	}
+	break;
+	}
+
+	return true;
+}
+
+
diff --git a/drivers/gpu/drm/amd/dal/modules/inc/mod_backlight.h b/drivers/gpu/drm/amd/dal/modules/inc/mod_backlight.h
index bee3665..b5d9729 100644
--- a/drivers/gpu/drm/amd/dal/modules/inc/mod_backlight.h
+++ b/drivers/gpu/drm/amd/dal/modules/inc/mod_backlight.h
@@ -32,6 +32,27 @@ struct mod_backlight {
 	int dummy;
 };
 
+/* VariBright related commands */
+enum varibright_command {
+	VariBright_Cmd__SetVBLevel = 0,
+	VariBright_Cmd__UserEnable,
+	VariBright_Cmd__PreDisplayConfigChange,
+	VariBright_Cmd__PostDisplayConfigChange,
+	VariBright_Cmd__SuspendABM,
+	VariBright_Cmd__ResumeABM,
+
+	VariBright_Cmd__Unknown,
+};
+
+/* VariBright settings structure */
+struct varibright_info {
+	enum varibright_command cmd;
+
+	unsigned int level;
+	bool enable;
+	bool activate;
+};
+
 struct mod_backlight *mod_backlight_create(struct dc *dc);
 
 void mod_backlight_destroy(struct mod_backlight *mod_backlight);
@@ -71,4 +92,8 @@ bool mod_backlight_set_smooth_brightness(struct mod_backlight *mod_backlight,
 
 bool mod_backlight_notify_mode_change(struct mod_backlight *mod_backlight,
 		const struct dc_stream *stream);
+
+bool mod_backlight_varibright_control(struct mod_backlight *mod_backlight,
+		struct varibright_info *input_varibright_info);
+
 #endif /* MODULES_INC_MOD_BACKLIGHT_H_ */
-- 
2.7.4

