From 36ba66179382b7761ec8d8237dd25bb21346b904 Mon Sep 17 00:00:00 2001
From: Amy Zhang <Amy.Zhang@amd.com>
Date: Mon, 26 Sep 2016 11:21:23 -0400
Subject: [PATCH 1171/1722] drm/amd/dal: DP Test Harness Link and Lane Settings

Exposing dc_link functions for DP link training and lane
settings through dc.

Change-Id: Ia143000b20c8478961ec527ad6997437d5e5d629
Signed-off-by: Amy Zhang <Amy.Zhang@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/core/dc.c         | 48 ++++++++++++++++++++++++++++
 drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c | 33 +++++++++++--------
 drivers/gpu/drm/amd/dal/dc/dc.h              | 20 ++++++++++++
 drivers/gpu/drm/amd/dal/dc/dc_dp_types.h     |  5 +++
 4 files changed, 92 insertions(+), 14 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc.c b/drivers/gpu/drm/amd/dal/dc/core/dc.c
index 1423013..eaef0bd 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc.c
@@ -366,6 +366,45 @@ static bool setup_psr(struct dc *dc, const struct dc_stream *stream)
 	return true;
 }
 
+static void set_drive_settings(struct dc *dc,
+		struct link_training_settings *lt_settings)
+{
+	struct core_dc *core_dc = DC_TO_CORE(dc);
+	int i;
+
+	for (i = 0; i < core_dc->link_count; i++)
+		dc_link_dp_set_drive_settings(&core_dc->links[i]->public,
+				lt_settings);
+}
+
+static void perform_link_training(struct dc *dc,
+		struct dc_link_settings *link_setting,
+		bool skip_video_pattern)
+{
+	struct core_dc *core_dc = DC_TO_CORE(dc);
+	int i;
+
+	for (i = 0; i < core_dc->link_count; i++)
+		dc_link_dp_perform_link_training(
+			&core_dc->links[i]->public,
+			link_setting,
+			skip_video_pattern);
+}
+
+static void set_preferred_link_settings(struct dc *dc,
+		struct dc_link_settings *link_setting)
+{
+	struct core_dc *core_dc = DC_TO_CORE(dc);
+	int i;
+
+	for (i = 0; i < core_dc->link_count; i++) {
+		core_dc->links[i]->public.verified_link_cap.lane_count =
+				link_setting->lane_count;
+		core_dc->links[i]->public.verified_link_cap.link_rate =
+				link_setting->link_rate;
+	}
+}
+
 static void allocate_dc_stream_funcs(struct core_dc *core_dc)
 {
 	core_dc->public.stream_funcs.stream_update_scaling = stream_update_scaling;
@@ -391,6 +430,15 @@ static void allocate_dc_stream_funcs(struct core_dc *core_dc)
 
 	core_dc->public.stream_funcs.setup_psr =
 			setup_psr;
+
+	core_dc->public.link_funcs.set_drive_settings =
+			set_drive_settings;
+
+	core_dc->public.link_funcs.perform_link_training =
+			perform_link_training;
+
+	core_dc->public.link_funcs.set_preferred_link_settings =
+			set_preferred_link_settings;
 }
 
 static bool construct(struct core_dc *dc,
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c b/drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c
index acf4981..e330c57 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c
@@ -622,15 +622,16 @@ static bool is_max_vs_reached(
 
 }
 
-void set_drive_settings(
-	struct core_link *link,
+void dc_link_dp_set_drive_settings(
+	struct dc_link *link,
 	struct link_training_settings *lt_settings)
 {
+	struct core_link *core_link = DC_LINK_TO_CORE(link);
 	/* program ASIC PHY settings*/
-	dp_set_hw_lane_settings(link, lt_settings);
+	dp_set_hw_lane_settings(core_link, lt_settings);
 
 	/* Notify DP sink the PHY settings from source */
-	dpcd_set_lane_settings(link, lt_settings);
+	dpcd_set_lane_settings(core_link, lt_settings);
 }
 
 static bool perform_post_lt_adj_req_sequence(
@@ -698,7 +699,8 @@ static bool perform_post_lt_adj_req_sequence(
 				update_drive_settings(
 					lt_settings,req_settings);
 
-				set_drive_settings(link, lt_settings);
+				dc_link_dp_set_drive_settings(&link->public,
+						lt_settings);
 				break;
 			}
 
@@ -964,11 +966,12 @@ static inline bool perform_link_training_int(
 	return status;
 }
 
-bool perform_link_training(
-	struct core_link *link,
+bool dc_link_dp_perform_link_training(
+	struct dc_link *link,
 	const struct dc_link_settings *link_setting,
 	bool skip_video_pattern)
 {
+	struct core_link *core_link = DC_LINK_TO_CORE(link);
 	bool status;
 
 	const int8_t *link_rate = "Unknown";
@@ -992,18 +995,20 @@ bool perform_link_training(
 	lt_settings.link_settings.link_spread = LINK_SPREAD_05_DOWNSPREAD_30KHZ;
 
 	/* 1. set link rate, lane count and spread*/
-	dpcd_set_link_settings(link, &lt_settings);
+	dpcd_set_link_settings(core_link, &lt_settings);
 
 	/* 2. perform link training (set link training done
 	 *  to false is done as well)*/
-	if (perform_clock_recovery_sequence(link, &lt_settings)) {
+	if (perform_clock_recovery_sequence(core_link, &lt_settings)) {
 
-		if (perform_channel_equalization_sequence(link, &lt_settings))
+		if (perform_channel_equalization_sequence(core_link,
+				&lt_settings))
 			status = true;
 	}
 
 	if (status || !skip_video_pattern)
-		status = perform_link_training_int(link, &lt_settings, status);
+		status = perform_link_training_int(core_link,
+				&lt_settings, status);
 
 	/* 6. print status message*/
 	switch (lt_settings.link_settings.link_rate) {
@@ -1028,7 +1033,7 @@ bool perform_link_training(
 	}
 
 	/* Connectivity log: link training */
-	CONN_MSG_LT(link, "%sx%d %s VS=%d, PE=%d",
+	CONN_MSG_LT(core_link, "%sx%d %s VS=%d, PE=%d",
 			link_rate,
 			lt_settings.link_settings.lane_count,
 			status ? "pass" : "fail",
@@ -1050,8 +1055,8 @@ bool perform_link_training_with_retries(
 
 	for (j = 0; j < attempts; ++j) {
 
-		if (perform_link_training(
-				link,
+		if (dc_link_dp_perform_link_training(
+				&link->public,
 				link_setting,
 				skip_video_pattern))
 			return true;
diff --git a/drivers/gpu/drm/amd/dal/dc/dc.h b/drivers/gpu/drm/amd/dal/dc/dc.h
index 4d7b359..2ba7ae9 100644
--- a/drivers/gpu/drm/amd/dal/dc/dc.h
+++ b/drivers/gpu/drm/amd/dal/dc/dc.h
@@ -77,6 +77,16 @@ struct dc_stream_funcs {
 	bool (*setup_psr)(struct dc *dc, const struct dc_stream *stream);
 };
 
+struct dc_link_funcs {
+	void (*set_drive_settings)(struct dc *dc,
+			struct link_training_settings *lt_settings);
+	void (*perform_link_training)(struct dc *dc,
+			struct dc_link_settings *link_setting,
+			bool skip_video_pattern);
+	void (*set_preferred_link_settings)(struct dc *dc,
+			struct dc_link_settings *link_setting);
+};
+
 /* Structure to hold configuration flags set by dm at dc creation. */
 struct dc_config {
 	bool gpu_vm_support;
@@ -90,6 +100,7 @@ struct dc_debug {
 struct dc {
 	struct dc_caps caps;
 	struct dc_stream_funcs stream_funcs;
+	struct dc_link_funcs link_funcs;
 	struct dc_config config;
 	struct dc_debug debug;
 };
@@ -546,6 +557,15 @@ void dc_link_remove_remote_sink(
 /* Used by diagnostics for virtual link at the moment */
 void dc_link_set_sink(const struct dc_link *link, struct dc_sink *sink);
 
+void dc_link_dp_set_drive_settings(
+	struct dc_link *link,
+	struct link_training_settings *lt_settings);
+
+bool dc_link_dp_perform_link_training(
+	struct dc_link *link,
+	const struct dc_link_settings *link_setting,
+	bool skip_video_pattern);
+
 /*******************************************************************************
  * Sink Interfaces - A sink corresponds to a display output device
  ******************************************************************************/
diff --git a/drivers/gpu/drm/amd/dal/dc/dc_dp_types.h b/drivers/gpu/drm/amd/dal/dc/dc_dp_types.h
index e271ea9..befc498 100644
--- a/drivers/gpu/drm/amd/dal/dc/dc_dp_types.h
+++ b/drivers/gpu/drm/amd/dal/dc/dc_dp_types.h
@@ -97,4 +97,9 @@ struct dc_lane_settings {
 	enum dc_post_cursor2 POST_CURSOR2;
 };
 
+struct dc_link_training_settings {
+	struct dc_link_settings link;
+	struct dc_lane_settings lane_settings[LANE_COUNT_DP_MAX];
+};
+
 #endif /* DC_DP_TYPES_H */
-- 
2.7.4

