From 8c463b8dcf2e67cda2005da84fb4cbc23c9501b7 Mon Sep 17 00:00:00 2001
From: Felix Kuehling <Felix.Kuehling@amd.com>
Date: Fri, 14 Oct 2016 18:05:59 -0400
Subject: [PATCH 1690/1722] amd/powerplay: Optimize default compute power
 profile

Apply compute-optimized settings for compute power profile based on
input from the powerplay team.

Change-Id: I3ffae5a89f52df1ce76e11b38251acef93c8d682
Signed-off-by: Felix Kuehling <Felix.Kuehling@amd.com>
---
 drivers/gpu/drm/amd/powerplay/hwmgr/fiji_hwmgr.c      | 18 +++++++++++++++---
 drivers/gpu/drm/amd/powerplay/hwmgr/polaris10_hwmgr.c | 18 +++++++++++++++---
 drivers/gpu/drm/amd/powerplay/hwmgr/tonga_hwmgr.c     | 18 +++++++++++++++---
 3 files changed, 45 insertions(+), 9 deletions(-)

diff --git a/drivers/gpu/drm/amd/powerplay/hwmgr/fiji_hwmgr.c b/drivers/gpu/drm/amd/powerplay/hwmgr/fiji_hwmgr.c
index cf05641..5a24361 100644
--- a/drivers/gpu/drm/amd/powerplay/hwmgr/fiji_hwmgr.c
+++ b/drivers/gpu/drm/amd/powerplay/hwmgr/fiji_hwmgr.c
@@ -2960,6 +2960,7 @@ static int fiji_save_default_power_profile(struct pp_hwmgr *hwmgr)
 	struct fiji_hwmgr *data = (struct fiji_hwmgr *)(hwmgr->backend);
 	struct SMU73_Discrete_GraphicsLevel *levels =
 				data->smc_state_table.GraphicsLevel;
+	unsigned min_level = 1;
 
 	hwmgr->default_gfx_power_profile.activity_threshold =
 			be16_to_cpu(levels[0].ActivityLevel);
@@ -2970,10 +2971,21 @@ static int fiji_save_default_power_profile(struct pp_hwmgr *hwmgr)
 	hwmgr->default_compute_power_profile = hwmgr->default_gfx_power_profile;
 	hwmgr->default_compute_power_profile.type = PP_COMPUTE_PROFILE;
 
-	/* Workaround for SDMA instability: disable lowest SCLK DPM state */
+	/* Workaround compute SDMA instability: disable lowest SCLK
+	 * DPM level. Optimize compute power profile: Use only highest
+	 * 2 power levels (if more than 2 are available), Hysteresis:
+	 * 0ms up, 5ms down
+	 */
+	if (data->smc_state_table.GraphicsDpmLevelCount > 2)
+		min_level = data->smc_state_table.GraphicsDpmLevelCount - 2;
+	else if (data->smc_state_table.GraphicsDpmLevelCount == 2)
+		min_level = 1;
+	else
+		min_level = 0;
 	hwmgr->default_compute_power_profile.min_sclk =
-			be32_to_cpu(levels[1].SclkFrequency);
-	/* TODO: Optimize hysteresis and threshold for compute workloads */
+			be32_to_cpu(levels[min_level].SclkFrequency);
+	hwmgr->default_compute_power_profile.up_hyst = 0;
+	hwmgr->default_compute_power_profile.down_hyst = 5;
 
 	hwmgr->gfx_power_profile = hwmgr->default_gfx_power_profile;
 	hwmgr->compute_power_profile = hwmgr->default_compute_power_profile;
diff --git a/drivers/gpu/drm/amd/powerplay/hwmgr/polaris10_hwmgr.c b/drivers/gpu/drm/amd/powerplay/hwmgr/polaris10_hwmgr.c
index 7348f1e..ba7be6d 100644
--- a/drivers/gpu/drm/amd/powerplay/hwmgr/polaris10_hwmgr.c
+++ b/drivers/gpu/drm/amd/powerplay/hwmgr/polaris10_hwmgr.c
@@ -2021,6 +2021,7 @@ static void polaris10_save_default_power_profile(struct pp_hwmgr *hwmgr)
 			(struct polaris10_hwmgr *)(hwmgr->backend);
 	struct SMU74_Discrete_GraphicsLevel *levels =
 				data->smc_state_table.GraphicsLevel;
+	unsigned min_level = 1;
 
 	hwmgr->default_gfx_power_profile.activity_threshold =
 			be16_to_cpu(levels[0].ActivityLevel);
@@ -2031,10 +2032,21 @@ static void polaris10_save_default_power_profile(struct pp_hwmgr *hwmgr)
 	hwmgr->default_compute_power_profile = hwmgr->default_gfx_power_profile;
 	hwmgr->default_compute_power_profile.type = PP_COMPUTE_PROFILE;
 
-	/* Workaround for SDMA instability: disable lowest SCLK DPM state */
+	/* Workaround compute SDMA instability: disable lowest SCLK
+	 * DPM level. Optimize compute power profile: Use only highest
+	 * 2 power levels (if more than 2 are available), Hysteresis:
+	 * 0ms up, 5ms down
+	 */
+	if (data->smc_state_table.GraphicsDpmLevelCount > 2)
+		min_level = data->smc_state_table.GraphicsDpmLevelCount - 2;
+	else if (data->smc_state_table.GraphicsDpmLevelCount == 2)
+		min_level = 1;
+	else
+		min_level = 0;
 	hwmgr->default_compute_power_profile.min_sclk =
-			be32_to_cpu(levels[1].SclkSetting.SclkFrequency);
-	/* TODO: Optimize hysteresis and threshold for compute workloads */
+		be32_to_cpu(levels[min_level].SclkSetting.SclkFrequency);
+	hwmgr->default_compute_power_profile.up_hyst = 0;
+	hwmgr->default_compute_power_profile.down_hyst = 5;
 
 	hwmgr->gfx_power_profile = hwmgr->default_gfx_power_profile;
 	hwmgr->compute_power_profile = hwmgr->default_compute_power_profile;
diff --git a/drivers/gpu/drm/amd/powerplay/hwmgr/tonga_hwmgr.c b/drivers/gpu/drm/amd/powerplay/hwmgr/tonga_hwmgr.c
index 8a42fac..9eeeab2 100644
--- a/drivers/gpu/drm/amd/powerplay/hwmgr/tonga_hwmgr.c
+++ b/drivers/gpu/drm/amd/powerplay/hwmgr/tonga_hwmgr.c
@@ -2885,6 +2885,7 @@ static void tonga_save_default_power_profile(struct pp_hwmgr *hwmgr)
 	struct tonga_hwmgr *data = (struct tonga_hwmgr *)(hwmgr->backend);
 	struct SMU72_Discrete_GraphicsLevel *levels =
 				data->smc_state_table.GraphicsLevel;
+	unsigned min_level = 1;
 
 	hwmgr->default_gfx_power_profile.activity_threshold =
 			be16_to_cpu(levels[0].ActivityLevel);
@@ -2895,10 +2896,21 @@ static void tonga_save_default_power_profile(struct pp_hwmgr *hwmgr)
 	hwmgr->default_compute_power_profile = hwmgr->default_gfx_power_profile;
 	hwmgr->default_compute_power_profile.type = PP_COMPUTE_PROFILE;
 
-	/* Workaround for SDMA instability: disable lowest SCLK DPM state */
+	/* Workaround compute SDMA instability: disable lowest SCLK
+	 * DPM level. Optimize compute power profile: Use only highest
+	 * 2 power levels (if more than 2 are available), Hysteresis:
+	 * 0ms up, 5ms down
+	 */
+	if (data->smc_state_table.GraphicsDpmLevelCount > 2)
+		min_level = data->smc_state_table.GraphicsDpmLevelCount - 2;
+	else if (data->smc_state_table.GraphicsDpmLevelCount == 2)
+		min_level = 1;
+	else
+		min_level = 0;
 	hwmgr->default_compute_power_profile.min_sclk =
-			be32_to_cpu(levels[1].SclkFrequency);
-	/* TODO: Optimize hysteresis and threshold for compute workloads */
+			be32_to_cpu(levels[min_level].SclkFrequency);
+	hwmgr->default_compute_power_profile.up_hyst = 0;
+	hwmgr->default_compute_power_profile.down_hyst = 5;
 
 	hwmgr->gfx_power_profile = hwmgr->default_gfx_power_profile;
 	hwmgr->compute_power_profile = hwmgr->default_compute_power_profile;
-- 
2.7.4

