From c81fc968aa8f9fec4a450ede64f60d123a923611 Mon Sep 17 00:00:00 2001
From: Samuel Li <Samuel.Li@amd.com>
Date: Fri, 19 Jan 2018 16:15:59 -0500
Subject: [PATCH 4736/5855] drm/amdgpu: rename amdgpu_freesync_ioctl
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add display to the name for consistency.

Signed-off-by: Samuel Li <Samuel.Li@amd.com>
Acked-by: Christian KÃ¶nig <christian.koenig@amd.com>
Reviewed-by: Alex Deucher <alexander.deucher@amd.com>
Signed-off-by: Pavan Kumar Ramayanam <pavan.ramayanam@amd.com>
Conflicts:
      drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c

Change-Id: I2ebe82b5e171b194254bb35feb3363ece03d5a8b
---
 drivers/gpu/drm/amd/amdgpu/amdgpu.h         |  4 +-
 drivers/gpu/drm/amd/amdgpu/amdgpu_display.c |  4 +-
 drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c     | 86 ++++++++++++++---------------
 3 files changed, 47 insertions(+), 47 deletions(-)

diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu.h b/drivers/gpu/drm/amd/amdgpu/amdgpu.h
index 34f163f..5b29aae 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu.h
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu.h
@@ -1278,8 +1278,8 @@ int amdgpu_cs_wait_fences_ioctl(struct drm_device *dev, void *data,
 int amdgpu_gem_metadata_ioctl(struct drm_device *dev, void *data,
 				struct drm_file *filp);
 
-int amdgpu_freesync_ioctl(struct drm_device *dev, void *data,
-			    struct drm_file *filp);
+int amdgpu_display_freesync_ioctl(struct drm_device *dev, void *data,
+				  struct drm_file *filp);
 
 int amdgpu_gem_dgma_ioctl(struct drm_device *dev, void *data,
 			  struct drm_file *filp);
diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_display.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_display.c
index c34777e..e98eae9 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_display.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_display.c
@@ -923,8 +923,8 @@ int amdgpu_display_crtc_idx_to_irq_type(struct amdgpu_device *adev, int crtc)
 	}
 }
 
-int amdgpu_freesync_ioctl(struct drm_device *dev, void *data,
-			    struct drm_file *filp)
+int amdgpu_display_freesync_ioctl(struct drm_device *dev, void *data,
+				  struct drm_file *filp)
 {
 	int ret = -EPERM;
 	struct amdgpu_device *adev = dev->dev_private;
diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c
index 247651b..2c25895 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_kms.c
@@ -1018,36 +1018,36 @@ u32 amdgpu_get_vblank_counter_kms(struct drm_device *dev, unsigned int pipe)
 		do {
 			count = amdgpu_display_vblank_get_counter(adev, pipe);
 			/* Ask amdgpu_display_get_crtc_scanoutpos to return
-			 * vpos as distance to start of vblank, instead of
-			 * regular vertical scanout pos.
-			 */
-			stat = amdgpu_display_get_crtc_scanoutpos(
-				dev, pipe, GET_DISTANCE_TO_VBLANKSTART,
-				&vpos, &hpos, NULL, NULL,
-				&adev->mode_info.crtcs[pipe]->base.hwmode);
-		} while (count != amdgpu_display_vblank_get_counter(adev, pipe));
-
-		if (((stat & (DRM_SCANOUTPOS_VALID | DRM_SCANOUTPOS_ACCURATE)) !=
-		    (DRM_SCANOUTPOS_VALID | DRM_SCANOUTPOS_ACCURATE))) {
-			DRM_DEBUG_VBL("Query failed! stat %d\n", stat);
-		} else {
-			DRM_DEBUG_VBL("crtc %d: dist from vblank start %d\n",
-				      pipe, vpos);
-
-			/* Bump counter if we are at >= leading edge of vblank,
-			 * but before vsync where vpos would turn negative and
-			 * the hw counter really increments.
-			 */
-			if (vpos >= 0)
-				count++;
-		}
-	} else {
-		/* Fallback to use value as is. */
-		count = amdgpu_display_vblank_get_counter(adev, pipe);
-		DRM_DEBUG_VBL("NULL mode info! Returned count may be wrong.\n");
-	}
-
-	return count;
+             * vpos as distance to start of vblank, instead of
+             * regular vertical scanout pos.
+             */
+            stat = amdgpu_display_get_crtc_scanoutpos(
+                                                      dev, pipe, GET_DISTANCE_TO_VBLANKSTART,
+                                                      &vpos, &hpos, NULL, NULL,
+                                                      &adev->mode_info.crtcs[pipe]->base.hwmode);
+        } while (count != amdgpu_display_vblank_get_counter(adev, pipe));
+
+        if (((stat & (DRM_SCANOUTPOS_VALID | DRM_SCANOUTPOS_ACCURATE)) !=
+             (DRM_SCANOUTPOS_VALID | DRM_SCANOUTPOS_ACCURATE))) {
+            DRM_DEBUG_VBL("Query failed! stat %d\n", stat);
+        } else {
+            DRM_DEBUG_VBL("crtc %d: dist from vblank start %d\n",
+                          pipe, vpos);
+
+            /* Bump counter if we are at >= leading edge of vblank,
+             * but before vsync where vpos would turn negative and
+             * the hw counter really increments.
+             */
+            if (vpos >= 0)
+                count++;
+        }
+    } else {
+        /* Fallback to use value as is. */
+        count = amdgpu_display_vblank_get_counter(adev, pipe);
+        DRM_DEBUG_VBL("NULL mode info! Returned count may be wrong.\n");
+    }
+
+    return count;
 }
 
 /**
@@ -1061,10 +1061,10 @@ u32 amdgpu_get_vblank_counter_kms(struct drm_device *dev, unsigned int pipe)
  */
 int amdgpu_enable_vblank_kms(struct drm_device *dev, unsigned int pipe)
 {
-	struct amdgpu_device *adev = dev->dev_private;
-	int idx = amdgpu_display_crtc_idx_to_irq_type(adev, pipe);
+    struct amdgpu_device *adev = dev->dev_private;
+    int idx = amdgpu_display_crtc_idx_to_irq_type(adev, pipe);
 
-	return amdgpu_irq_get(adev, &adev->crtc_irq, idx);
+    return amdgpu_irq_get(adev, &adev->crtc_irq, idx);
 }
 
 /**
@@ -1077,10 +1077,10 @@ int amdgpu_enable_vblank_kms(struct drm_device *dev, unsigned int pipe)
  */
 void amdgpu_disable_vblank_kms(struct drm_device *dev, unsigned int pipe)
 {
-	struct amdgpu_device *adev = dev->dev_private;
-	int idx = amdgpu_display_crtc_idx_to_irq_type(adev, pipe);
+    struct amdgpu_device *adev = dev->dev_private;
+    int idx = amdgpu_display_crtc_idx_to_irq_type(adev, pipe);
 
-	amdgpu_irq_put(adev, &adev->crtc_irq, idx);
+    amdgpu_irq_put(adev, &adev->crtc_irq, idx);
 }
 
 /**
@@ -1114,14 +1114,14 @@ int amdgpu_get_vblank_timestamp_kms(struct drm_device *dev, unsigned int pipe,
 	if (!crtc) {
 		/* This can occur on driver load if some component fails to
 		 * initialize completely and driver is unloaded */
-		DRM_ERROR("Uninitialized crtc %d\n", pipe);
-		return -EINVAL;
+		 DRM_ERROR("Uninitialized crtc %d\n", pipe);
+		 return -EINVAL;
 	}
 
 	/* Helper routine in DRM core does all the work: */
-	return drm_calc_vbltimestamp_from_scanoutpos(dev, pipe, max_error,
-						     vblank_time, flags,
-						     &crtc->hwmode);
+	return kcl_drm_calc_vbltimestamp_from_scanoutpos(dev, pipe, max_error,
+							 vblank_time, flags,
+							 crtc, &crtc->hwmode);
 }
 
 const struct drm_ioctl_desc amdgpu_ioctls_kms[] = {
@@ -1142,9 +1142,9 @@ const struct drm_ioctl_desc amdgpu_ioctls_kms[] = {
 	DRM_IOCTL_DEF_DRV(AMDGPU_GEM_VA, amdgpu_gem_va_ioctl, DRM_AUTH|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(AMDGPU_GEM_OP, amdgpu_gem_op_ioctl, DRM_AUTH|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(AMDGPU_GEM_USERPTR, amdgpu_gem_userptr_ioctl, DRM_AUTH|DRM_RENDER_ALLOW),
-	DRM_IOCTL_DEF_DRV(AMDGPU_FREESYNC, amdgpu_freesync_ioctl, DRM_MASTER),
-	DRM_IOCTL_DEF_DRV(AMDGPU_GEM_DGMA, amdgpu_gem_dgma_ioctl, DRM_AUTH|DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(AMDGPU_FREESYNC, amdgpu_display_freesync_ioctl, DRM_MASTER),
 	DRM_IOCTL_DEF_DRV(AMDGPU_GEM_FIND_BO, amdgpu_gem_find_bo_by_cpu_mapping_ioctl, DRM_AUTH|DRM_RENDER_ALLOW),
+	DRM_IOCTL_DEF_DRV(AMDGPU_GEM_DGMA, amdgpu_gem_dgma_ioctl, DRM_AUTH|DRM_RENDER_ALLOW),
 	DRM_IOCTL_DEF_DRV(AMDGPU_SEM, amdgpu_sem_ioctl, DRM_AUTH|DRM_UNLOCKED|DRM_RENDER_ALLOW),
 };
 const int amdgpu_max_kms_ioctl = ARRAY_SIZE(amdgpu_ioctls_kms);
-- 
2.7.4

