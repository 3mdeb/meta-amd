From e9f78538fb4f5ac9fdfd13fbb7a549e9eceac89c Mon Sep 17 00:00:00 2001
From: David Rokhvarg <David.Rokhvarg@amd.com>
Date: Fri, 3 Jul 2015 17:59:39 -0400
Subject: [PATCH 335/343] amd/dal: Do not clear input/output config signals in
 Stream Context when releasing path resources.

After Display Detection we need the (detected) stream signals but we don't need the actual resources.
The same goes for a cloned path - we need the stream signals for validation.

Signed-off-by: David Rokhvarg <David.Rokhvarg@amd.com>
Reviewed-by: Eagle Yeh <Eagle.Yeh@amd.com>
Signed-off-by: Sanjay R Mehta <sanju.mehta@amd.com>
---
 .../gpu/drm/amd/dal/display_path/display_path.c    |  9 +++--
 drivers/gpu/drm/amd/dal/topology/tm_resource_mgr.c | 40 +++++++++-------------
 2 files changed, 23 insertions(+), 26 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/display_path/display_path.c b/drivers/gpu/drm/amd/dal/display_path/display_path.c
index 8d593ac..f4cb67a 100644
--- a/drivers/gpu/drm/amd/dal/display_path/display_path.c
+++ b/drivers/gpu/drm/amd/dal/display_path/display_path.c
@@ -349,8 +349,6 @@ void dal_display_path_release_resources(struct display_path *path)
 		cntx->state.LINK = false;
 		cntx->state.AUDIO = false;
 		cntx->engine = ENGINE_ID_UNKNOWN;
-		cntx->input_config_signal = SIGNAL_TYPE_NONE;
-		cntx->output_config_signal = SIGNAL_TYPE_NONE;
 		cntx->link_config_interface = NULL;
 	}
 
@@ -484,9 +482,9 @@ void dal_display_path_set_clock_source(
 	struct display_path *path,
 	struct clock_source *clock)
 {
-	/*ASSERT(path->clock_source == NULL || clock == NULL);*/
 	path->clock_source = clock;
 }
+
 struct clock_source *dal_display_path_get_clock_source(
 	const struct display_path *path)
 {
@@ -499,6 +497,7 @@ void dal_display_path_set_alt_clock_source(
 {
 	path->alt_clock_source = clock;
 }
+
 struct clock_source *dal_display_path_get_alt_clock_source(
 	const struct display_path *path)
 {
@@ -511,6 +510,7 @@ void dal_display_path_set_fbc_info(
 {
 	path->fbc_info = *fbc_info;
 }
+
 struct fbc_info *dal_display_path_get_fbc_info(struct display_path *path)
 {
 	return &path->fbc_info;
@@ -589,6 +589,7 @@ void dal_display_path_set_stereo_sync_object(
 {
 	path->stereo_sync_object = stereo_sync;
 }
+
 struct encoder *dal_display_path_get_stereo_sync_object(
 	const struct display_path *path)
 {
@@ -601,6 +602,7 @@ void dal_display_path_set_sync_input_source(
 {
 	path->sync_input_source = s;
 }
+
 enum sync_source dal_display_path_get_sync_input_source(
 	const struct display_path *path)
 {
@@ -613,6 +615,7 @@ void dal_display_path_set_sync_output_source(
 {
 	path->sync_output_source = s;
 }
+
 enum sync_source dal_display_path_get_sync_output_source(
 	const struct display_path *path)
 {
diff --git a/drivers/gpu/drm/amd/dal/topology/tm_resource_mgr.c b/drivers/gpu/drm/amd/dal/topology/tm_resource_mgr.c
index 915fb90..7ae6361 100644
--- a/drivers/gpu/drm/amd/dal/topology/tm_resource_mgr.c
+++ b/drivers/gpu/drm/amd/dal/topology/tm_resource_mgr.c
@@ -1435,7 +1435,7 @@ static void tmrm_do_controller_power_gating(
 		}
 
 		if (ref_counter != 0) {
-			TM_ERROR("%s: Can NOT power gate with non-zero "\
+			TM_WARNING("%s: Can NOT power gate with non-zero "\
 					"reference counter:%d!\n",
 				__func__, ref_counter);
 			return;
@@ -1445,7 +1445,7 @@ static void tmrm_do_controller_power_gating(
 		 * It must have logical state of "not power gated". */
 		if (TO_CONTROLLER_INFO(tm_resource)->power_gating_state !=
 				TM_POWER_GATE_STATE_OFF) {
-			TM_ERROR("%s: Invalid state:%d!"\
+			TM_WARNING("%s: Invalid state:%d!"\
 				" (expected TM_POWER_GATE_STATE_OFF)\n",
 				__func__,
 				TO_CONTROLLER_INFO(tm_resource)->
@@ -1470,7 +1470,7 @@ static void tmrm_do_controller_power_gating(
 
 		if (ref_counter != 1) {
 			/* Un-gate only once! */
-			TM_ERROR("%s: Can NOT un-gate with reference "\
+			TM_WARNING("%s: Can NOT un-gate with reference "\
 					"counter '%d' note equal to one!\n",
 				__func__, ref_counter);
 			return;
@@ -1479,7 +1479,7 @@ static void tmrm_do_controller_power_gating(
 		/* Un-gate the pipe, if NOT un-gated already. */
 		if (TO_CONTROLLER_INFO(tm_resource)->power_gating_state !=
 				TM_POWER_GATE_STATE_ON) {
-			TM_ERROR("%s: Invalid state:%d!"\
+			TM_WARNING("%s: Invalid state:%d!"\
 				" (expected TM_POWER_GATE_STATE_ON)\n",
 				__func__,
 				TO_CONTROLLER_INFO(tm_resource)->
@@ -1954,6 +1954,15 @@ enum tm_result tmrm_add_root_plane(
  * connect/disconnect.
  * Here we only activate audio if required and such acquired
  *
+ * It is OK to use TM_ACQUIRE_METHOD_SW on a path which is already
+ * acquired by TM_ACQUIRE_METHOD_HW (because it is a noop).
+ *
+ * It is *not* OK to use TM_ACQUIRE_METHOD_HW on a path which is already
+ * acquired by TM_ACQUIRE_METHOD_SW because many HW-update actions depend on
+ * resource usage counter transitions from 1-to-0 and from 0-to-1.
+ * If this is done, then tmrm_resources_available() will fail and this function
+ * will fail too.
+ *
  * \param [in] display_path:	Display path for which to acquire resources
  * \param [in] method:	How to acquire resources
  *
@@ -2376,26 +2385,11 @@ static void tmrm_release_clock_source(
 					dal_controller_get_id(controller));
 		}
 	}
-}
-
-/**
- * Detaches the alternative ClockSource resource from display path,
- * and powers it down.
- * If alternative ClockSource resource is not attached to display path,
- * then this function does nothing.
- *
- * \param [in] display_path: Display path from which ClockSource resource
- *	should be detached.
- */
-void tm_resource_mgr_release_alternative_clock_source(
-		struct tm_resource_mgr *tm_rm,
-		struct display_path *display_path)
-{
-	tmrm_release_clock_source(tm_rm, display_path,
-		dal_display_path_get_alt_clock_source(display_path),
-		TM_ACQUIRE_METHOD_HW);
 
-	dal_display_path_set_alt_clock_source(display_path, NULL);
+	if (dal_display_path_get_alt_clock_source(display_path) == clock_source)
+		dal_display_path_set_alt_clock_source(display_path, NULL);
+	else
+		dal_display_path_set_clock_source(display_path, NULL);
 }
 
 /**
-- 
1.9.1

