From 7243c1b94896464c54b199b6388b478ecbd984f3 Mon Sep 17 00:00:00 2001
From: Eric Yang <eric.yang2@amd.com>
Date: Tue, 21 Jun 2016 17:52:02 -0400
Subject: [PATCH 0589/1722] drm/amd/dal: hook up bw_calcs for underlay pipe and
 use result

Fill in inputs into bw_calcs and use result to program watermarks

Change-Id: I39d88e8145bc55185061af685709d8493d538cc3
Signed-off-by: Eric Yang <eric.yang2@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/calcs/bandwidth_calcs.c | 281 +++++++++++++++------
 .../drm/amd/dal/dc/dce110/dce110_hw_sequencer.c    |  36 +--
 .../gpu/drm/amd/dal/dc/dce110/dce110_mem_input_v.c |  27 +-
 .../gpu/drm/amd/dal/dc/dce110/dce110_resource.c    | 142 +++++++----
 drivers/gpu/drm/amd/dal/dc/inc/bandwidth_calcs.h   |   1 +
 drivers/gpu/drm/amd/dal/dc/inc/hw/mem_input.h      |   7 +
 6 files changed, 334 insertions(+), 160 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/calcs/bandwidth_calcs.c b/drivers/gpu/drm/amd/dal/dc/calcs/bandwidth_calcs.c
index 8a19139..7482d6a 100644
--- a/drivers/gpu/drm/amd/dal/dc/calcs/bandwidth_calcs.c
+++ b/drivers/gpu/drm/amd/dal/dc/calcs/bandwidth_calcs.c
@@ -25,6 +25,7 @@
 
 #include "dm_services.h"
 #include "bandwidth_calcs.h"
+#include "dc.h"
 
 /*******************************************************************************
  * Private Functions
@@ -4057,9 +4058,6 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 			mode_data->displays_data[0].fbc_enable;
 		bw_data_internal->d0_lpt_enable =
 			mode_data->displays_data[0].lpt_enable;
-		bw_data_internal->d0_underlay_mode =
-			mode_data->displays_data[0].underlay_mode;
-		bw_data_internal->d0_underlay_scale_ratio = bw_int_to_fixed(0);
 		bw_data_internal->d0_htotal =
 			mode_data->displays_data[0].h_total;
 		bw_data_internal->d0_pixel_rate =
@@ -4072,6 +4070,8 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 			mode_data->displays_data[0].graphics_scale_ratio;
 		bw_data_internal->d0_graphics_stereo_mode =
 			mode_data->displays_data[0].graphics_stereo_mode;
+		bw_data_internal->d0_underlay_mode =
+				mode_data->displays_data[0].underlay_mode;
 		/* fall through */
 	default:
 		/* data for all displays */
@@ -4101,6 +4101,8 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 			mode_data->displays_data[0].underlay_lb_bpc;
 		bw_data_internal->underlay_tiling_mode =
 			mode_data->displays_data[0].underlay_tiling_mode;
+		bw_data_internal->d0_underlay_scale_ratio =
+			mode_data->displays_data[0].underlay_scale_ratio;
 		bw_data_internal->underlay_htaps =
 			mode_data->displays_data[0].underlay_h_taps;
 		bw_data_internal->underlay_vtaps =
@@ -4166,6 +4168,9 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 				bw_mul(high_yclk, bw_int_to_fixed(1000)));
 
 		/* units: nanosecond, 16bit storage. */
+
+
+
 		calcs_output->nbp_state_change_wm_ns[0].a_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[4], bw_int_to_fixed(1000)));
@@ -4175,16 +4180,28 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->nbp_state_change_wm_ns[2].a_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[6], bw_int_to_fixed(1000)));
-		calcs_output->nbp_state_change_wm_ns[3].a_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				nbp_state_change_watermark[7], bw_int_to_fixed(1000)));
-		calcs_output->nbp_state_change_wm_ns[4].a_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				nbp_state_change_watermark[8], bw_int_to_fixed(1000)));
+
+		if (ctx->dc->caps.max_underlays) {
+			calcs_output->nbp_state_change_wm_ns[3].a_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[0], bw_int_to_fixed(1000)));
+			calcs_output->nbp_state_change_wm_ns[4].a_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+							nbp_state_change_watermark[1], bw_int_to_fixed(1000)));
+		} else {
+			calcs_output->nbp_state_change_wm_ns[3].a_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[7], bw_int_to_fixed(1000)));
+			calcs_output->nbp_state_change_wm_ns[4].a_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[8], bw_int_to_fixed(1000)));
+		}
 		calcs_output->nbp_state_change_wm_ns[5].a_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[9], bw_int_to_fixed(1000)));
 
+
+
 		calcs_output->stutter_exit_wm_ns[0].a_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[4], bw_int_to_fixed(1000)));
@@ -4194,16 +4211,27 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->stutter_exit_wm_ns[2].a_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[6], bw_int_to_fixed(1000)));
-		calcs_output->stutter_exit_wm_ns[3].a_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				stutter_exit_watermark[7], bw_int_to_fixed(1000)));
-		calcs_output->stutter_exit_wm_ns[4].a_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				stutter_exit_watermark[8], bw_int_to_fixed(1000)));
+		if (ctx->dc->caps.max_underlays) {
+			calcs_output->stutter_exit_wm_ns[3].a_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[0], bw_int_to_fixed(1000)));
+			calcs_output->stutter_exit_wm_ns[4].a_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[1], bw_int_to_fixed(1000)));
+		} else {
+			calcs_output->stutter_exit_wm_ns[3].a_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[7], bw_int_to_fixed(1000)));
+			calcs_output->stutter_exit_wm_ns[4].a_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[8], bw_int_to_fixed(1000)));
+		}
 		calcs_output->stutter_exit_wm_ns[5].a_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[9], bw_int_to_fixed(1000)));
 
+
+
 		calcs_output->urgent_wm_ns[0].a_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[4], bw_int_to_fixed(1000)));
@@ -4213,12 +4241,21 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->urgent_wm_ns[2].a_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[6], bw_int_to_fixed(1000)));
-		calcs_output->urgent_wm_ns[3].a_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				urgent_watermark[7], bw_int_to_fixed(1000)));
-		calcs_output->urgent_wm_ns[4].a_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				urgent_watermark[8], bw_int_to_fixed(1000)));
+		if (ctx->dc->caps.max_underlays) {
+			calcs_output->urgent_wm_ns[3].a_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[0], bw_int_to_fixed(1000)));
+			calcs_output->urgent_wm_ns[4].a_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[1], bw_int_to_fixed(1000)));
+		} else {
+			calcs_output->urgent_wm_ns[3].a_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[7], bw_int_to_fixed(1000)));
+			calcs_output->urgent_wm_ns[4].a_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[8], bw_int_to_fixed(1000)));
+		}
 		calcs_output->urgent_wm_ns[5].a_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[9], bw_int_to_fixed(1000)));
@@ -4228,6 +4265,8 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calculate_bandwidth(dceip, vbios, bw_data_internal,
 							bw_results_internal);
 
+
+
 		calcs_output->nbp_state_change_wm_ns[0].b_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[4],bw_int_to_fixed(1000)));
@@ -4237,16 +4276,28 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->nbp_state_change_wm_ns[2].b_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[6], bw_int_to_fixed(1000)));
-		calcs_output->nbp_state_change_wm_ns[3].b_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				nbp_state_change_watermark[7], bw_int_to_fixed(1000)));
-		calcs_output->nbp_state_change_wm_ns[4].b_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				nbp_state_change_watermark[8], bw_int_to_fixed(1000)));
+
+		if (ctx->dc->caps.max_underlays) {
+			calcs_output->nbp_state_change_wm_ns[3].b_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[0], bw_int_to_fixed(1000)));
+			calcs_output->nbp_state_change_wm_ns[4].b_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[1], bw_int_to_fixed(1000)));
+		} else {
+			calcs_output->nbp_state_change_wm_ns[3].b_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[7], bw_int_to_fixed(1000)));
+			calcs_output->nbp_state_change_wm_ns[4].b_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[8], bw_int_to_fixed(1000)));
+		}
 		calcs_output->nbp_state_change_wm_ns[5].b_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[9], bw_int_to_fixed(1000)));
 
+
+
 		calcs_output->stutter_exit_wm_ns[0].b_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[4], bw_int_to_fixed(1000)));
@@ -4256,16 +4307,27 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->stutter_exit_wm_ns[2].b_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[6], bw_int_to_fixed(1000)));
-		calcs_output->stutter_exit_wm_ns[3].b_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				stutter_exit_watermark[7], bw_int_to_fixed(1000)));
-		calcs_output->stutter_exit_wm_ns[4].b_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				stutter_exit_watermark[8], bw_int_to_fixed(1000)));
+		if (ctx->dc->caps.max_underlays) {
+			calcs_output->stutter_exit_wm_ns[3].b_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[0], bw_int_to_fixed(1000)));
+			calcs_output->stutter_exit_wm_ns[4].b_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[1], bw_int_to_fixed(1000)));
+		} else {
+			calcs_output->stutter_exit_wm_ns[3].b_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[7], bw_int_to_fixed(1000)));
+			calcs_output->stutter_exit_wm_ns[4].b_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[8], bw_int_to_fixed(1000)));
+		}
 		calcs_output->stutter_exit_wm_ns[5].b_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[9], bw_int_to_fixed(1000)));
 
+
+
 		calcs_output->urgent_wm_ns[0].b_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[4], bw_int_to_fixed(1000)));
@@ -4275,12 +4337,21 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->urgent_wm_ns[2].b_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[6], bw_int_to_fixed(1000)));
-		calcs_output->urgent_wm_ns[3].b_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				urgent_watermark[7], bw_int_to_fixed(1000)));
-		calcs_output->urgent_wm_ns[4].b_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				urgent_watermark[8], bw_int_to_fixed(1000)));
+		if (ctx->dc->caps.max_underlays) {
+			calcs_output->urgent_wm_ns[3].b_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[0], bw_int_to_fixed(1000)));
+			calcs_output->urgent_wm_ns[4].b_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[1], bw_int_to_fixed(1000)));
+		} else {
+			calcs_output->urgent_wm_ns[3].b_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[7], bw_int_to_fixed(1000)));
+			calcs_output->urgent_wm_ns[4].b_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[8], bw_int_to_fixed(1000)));
+		}
 		calcs_output->urgent_wm_ns[5].b_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[9], bw_int_to_fixed(1000)));
@@ -4291,6 +4362,8 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calculate_bandwidth(dceip, vbios, bw_data_internal,
 							bw_results_internal);
 
+
+
 		calcs_output->nbp_state_change_wm_ns[0].c_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[4], bw_int_to_fixed(1000)));
@@ -4300,16 +4373,26 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->nbp_state_change_wm_ns[2].c_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[6], bw_int_to_fixed(1000)));
-		calcs_output->nbp_state_change_wm_ns[3].c_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				nbp_state_change_watermark[7], bw_int_to_fixed(1000)));
-		calcs_output->nbp_state_change_wm_ns[4].c_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				nbp_state_change_watermark[8], bw_int_to_fixed(1000)));
+		if (ctx->dc->caps.max_underlays) {
+			calcs_output->nbp_state_change_wm_ns[3].c_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[0], bw_int_to_fixed(1000)));
+			calcs_output->nbp_state_change_wm_ns[4].c_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[1], bw_int_to_fixed(1000)));
+		} else {
+			calcs_output->nbp_state_change_wm_ns[3].c_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[7], bw_int_to_fixed(1000)));
+			calcs_output->nbp_state_change_wm_ns[4].c_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[8], bw_int_to_fixed(1000)));
+		}
 		calcs_output->nbp_state_change_wm_ns[5].c_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[9], bw_int_to_fixed(1000)));
 
+
 		calcs_output->stutter_exit_wm_ns[0].c_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[4], bw_int_to_fixed(1000)));
@@ -4319,16 +4402,27 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->stutter_exit_wm_ns[2].c_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[6], bw_int_to_fixed(1000)));
-		calcs_output->stutter_exit_wm_ns[3].c_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				stutter_exit_watermark[7], bw_int_to_fixed(1000)));
-		calcs_output->stutter_exit_wm_ns[4].c_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				stutter_exit_watermark[8], bw_int_to_fixed(1000)));
+		if (ctx->dc->caps.max_underlays) {
+			calcs_output->stutter_exit_wm_ns[3].c_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[0], bw_int_to_fixed(1000)));
+			calcs_output->stutter_exit_wm_ns[4].c_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[1], bw_int_to_fixed(1000)));
+		} else {
+			calcs_output->stutter_exit_wm_ns[3].c_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[7], bw_int_to_fixed(1000)));
+			calcs_output->stutter_exit_wm_ns[4].c_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[8], bw_int_to_fixed(1000)));
+		}
 		calcs_output->stutter_exit_wm_ns[5].c_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[9], bw_int_to_fixed(1000)));
 
+
+
 		calcs_output->urgent_wm_ns[0].c_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[4], bw_int_to_fixed(1000)));
@@ -4338,12 +4432,21 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->urgent_wm_ns[2].c_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[6], bw_int_to_fixed(1000)));
-		calcs_output->urgent_wm_ns[3].c_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				urgent_watermark[7], bw_int_to_fixed(1000)));
-		calcs_output->urgent_wm_ns[4].c_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				urgent_watermark[8], bw_int_to_fixed(1000)));
+		if (ctx->dc->caps.max_underlays) {
+			calcs_output->urgent_wm_ns[3].c_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[0], bw_int_to_fixed(1000)));
+			calcs_output->urgent_wm_ns[4].c_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[1], bw_int_to_fixed(1000)));
+		} else {
+			calcs_output->urgent_wm_ns[3].c_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[7], bw_int_to_fixed(1000)));
+			calcs_output->urgent_wm_ns[4].c_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[8], bw_int_to_fixed(1000)));
+		}
 		calcs_output->urgent_wm_ns[5].c_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[9], bw_int_to_fixed(1000)));
@@ -4365,12 +4468,21 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->nbp_state_change_wm_ns[2].d_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[6], bw_int_to_fixed(1000)));
-		calcs_output->nbp_state_change_wm_ns[3].d_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				nbp_state_change_watermark[7], bw_int_to_fixed(1000)));
-		calcs_output->nbp_state_change_wm_ns[4].d_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				nbp_state_change_watermark[8], bw_int_to_fixed(1000)));
+		if (ctx->dc->caps.max_underlays) {
+			calcs_output->nbp_state_change_wm_ns[3].d_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[0], bw_int_to_fixed(1000)));
+			calcs_output->nbp_state_change_wm_ns[4].d_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[1], bw_int_to_fixed(1000)));
+		} else {
+			calcs_output->nbp_state_change_wm_ns[3].d_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[7], bw_int_to_fixed(1000)));
+			calcs_output->nbp_state_change_wm_ns[4].d_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					nbp_state_change_watermark[8], bw_int_to_fixed(1000)));
+		}
 		calcs_output->nbp_state_change_wm_ns[5].d_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[9], bw_int_to_fixed(1000)));
@@ -4384,16 +4496,26 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->stutter_exit_wm_ns[2].d_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[6], bw_int_to_fixed(1000)));
-		calcs_output->stutter_exit_wm_ns[3].d_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				stutter_exit_watermark[7], bw_int_to_fixed(1000)));
-		calcs_output->stutter_exit_wm_ns[4].d_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				stutter_exit_watermark[8], bw_int_to_fixed(1000)));
+		if (ctx->dc->caps.max_underlays) {
+			calcs_output->stutter_exit_wm_ns[3].d_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[0], bw_int_to_fixed(1000)));
+			calcs_output->stutter_exit_wm_ns[4].d_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[1], bw_int_to_fixed(1000)));
+		} else {
+			calcs_output->stutter_exit_wm_ns[3].d_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[7], bw_int_to_fixed(1000)));
+			calcs_output->stutter_exit_wm_ns[4].d_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					stutter_exit_watermark[8], bw_int_to_fixed(1000)));
+		}
 		calcs_output->stutter_exit_wm_ns[5].d_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[9], bw_int_to_fixed(1000)));
 
+
 		calcs_output->urgent_wm_ns[0].d_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[4], bw_int_to_fixed(1000)));
@@ -4403,12 +4525,21 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->urgent_wm_ns[2].d_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[6], bw_int_to_fixed(1000)));
-		calcs_output->urgent_wm_ns[3].d_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				urgent_watermark[7], bw_int_to_fixed(1000)));
-		calcs_output->urgent_wm_ns[4].d_mark =
-			bw_fixed_to_int(bw_mul(bw_results_internal->
-				urgent_watermark[8], bw_int_to_fixed(1000)));
+		if (ctx->dc->caps.max_underlays) {
+			calcs_output->urgent_wm_ns[3].d_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[0], bw_int_to_fixed(1000)));
+			calcs_output->urgent_wm_ns[4].d_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[1], bw_int_to_fixed(1000)));
+		} else {
+			calcs_output->urgent_wm_ns[3].d_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[7], bw_int_to_fixed(1000)));
+			calcs_output->urgent_wm_ns[4].d_mark =
+				bw_fixed_to_int(bw_mul(bw_results_internal->
+					urgent_watermark[8], bw_int_to_fixed(1000)));
+		}
 		calcs_output->urgent_wm_ns[5].d_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[9], bw_int_to_fixed(1000)));
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
index 4c635d2..13111e0 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
@@ -1060,11 +1060,15 @@ int get_bw_result_idx(
 {
 	int i, collapsed_idx;
 
+	if (res_ctx->pipe_ctx[pipe_idx].top_pipe)
+		return 3;
+
 	collapsed_idx = 0;
 	for (i = 0; i < pipe_idx; i++) {
-		if (res_ctx->pipe_ctx->stream)
+		if (res_ctx->pipe_ctx[i].stream)
 			collapsed_idx++;
 	}
+
 	return collapsed_idx;
 }
 
@@ -1115,6 +1119,14 @@ static void program_wm_for_pipe(struct core_dc *dc,
 		context->bw_results.stutter_exit_wm_ns[bw_result_idx],
 		context->bw_results.urgent_wm_ns[bw_result_idx],
 		total_dest_line_time_ns);
+
+	if (pipe_ctx->top_pipe)
+		pipe_ctx->mi->funcs->mem_input_program_chroma_display_marks(
+				pipe_ctx->mi,
+				context->bw_results.nbp_state_change_wm_ns[bw_result_idx + 1],
+				context->bw_results.stutter_exit_wm_ns[bw_result_idx + 1],
+				context->bw_results.urgent_wm_ns[bw_result_idx + 1],
+				total_dest_line_time_ns);
 }
 
 static void set_displaymarks(
@@ -1143,21 +1155,6 @@ static void set_displaymarks(
 	}
 }
 
-static void set_safe_displaymarks_for_pipe(struct pipe_ctx *pipe_ctx)
-{
-	struct bw_watermarks max_marks = {
-		MAX_WATERMARK, MAX_WATERMARK, MAX_WATERMARK, MAX_WATERMARK };
-	struct bw_watermarks nbp_marks = {
-		SAFE_NBP_MARK, SAFE_NBP_MARK, SAFE_NBP_MARK, SAFE_NBP_MARK };
-
-		pipe_ctx->mi->funcs->mem_input_program_display_marks(
-				pipe_ctx->mi,
-				nbp_marks,
-				max_marks,
-				max_marks,
-				MAX_WATERMARK);
-}
-
 static void set_safe_displaymarks(struct resource_context *res_ctx)
 {
 	uint8_t i;
@@ -1726,12 +1723,7 @@ static void set_display_mark_for_pipe_if_needed(struct core_dc *dc,
 		struct pipe_ctx *pipe_ctx,
 		struct validate_context *context)
 {
-	struct pipe_ctx *old_pipe_ctx =  &dc->current_context->res_ctx.pipe_ctx[pipe_ctx->pipe_idx];
-
-	/* hack for underlay pipe*/
-	if (pipe_ctx->top_pipe && !old_pipe_ctx->top_pipe)
-		set_safe_displaymarks_for_pipe(pipe_ctx);
-	else if (watermark_changed(pipe_ctx, context, dc->current_context))
+	if (watermark_changed(pipe_ctx, context, dc->current_context))
 		program_wm_for_pipe(dc, pipe_ctx, context);
 }
 
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_mem_input_v.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_mem_input_v.c
index 85cde7d..e48a6c9 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_mem_input_v.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_mem_input_v.c
@@ -816,23 +816,32 @@ void dce110_mem_input_v_program_display_marks(
 		urgent,
 		total_dest_line_time_ns);
 
+	program_nbp_watermark_l(
+		mem_input->ctx,
+		nbp);
+
+	program_stutter_watermark_l(
+		mem_input->ctx,
+		stutter);
+
+}
+
+void dce110_mem_input_program_chroma_display_marks(
+	struct mem_input *mem_input,
+	struct bw_watermarks nbp,
+	struct bw_watermarks stutter,
+	struct bw_watermarks urgent,
+	uint32_t total_dest_line_time_ns)
+{
 	program_urgency_watermark_c(
 		mem_input->ctx,
 		urgent,
 		total_dest_line_time_ns);
 
-	program_nbp_watermark_l(
-		mem_input->ctx,
-		nbp);
-
 	program_nbp_watermark_c(
 		mem_input->ctx,
 		nbp);
 
-	program_stutter_watermark_l(
-		mem_input->ctx,
-		stutter);
-
 	program_stutter_watermark_c(
 		mem_input->ctx,
 		stutter);
@@ -856,6 +865,8 @@ void dce110_free_mem_input_v(
 static struct mem_input_funcs dce110_mem_input_v_funcs = {
 	.mem_input_program_display_marks =
 			dce110_mem_input_v_program_display_marks,
+	.mem_input_program_chroma_display_marks =
+			dce110_mem_input_program_chroma_display_marks,
 	.allocate_mem_input = dce110_allocate_mem_input_v,
 	.free_mem_input = dce110_free_mem_input_v,
 	.mem_input_program_surface_flip_and_addr =
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
index cb9fe06..25b9b35 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
@@ -684,77 +684,109 @@ static enum dc_status validate_mapped_resource(
 	return DC_OK;
 }
 
+static void bw_calcs_input_single_display(
+		struct bw_calcs_input_single_display *disp,
+		struct pipe_ctx *pipe_ctx,
+		int *max_htaps,
+		int *max_vtaps)
+{
+	if (pipe_ctx->scl_data.ratios.vert.value == 0) {
+		disp->graphics_scale_ratio = bw_int_to_fixed(1);
+		disp->graphics_h_taps = 2;
+		disp->graphics_v_taps = 2;
+
+		/* TODO: remove when bw formula accepts taps per
+		 * display
+		 */
+		if (*max_vtaps < 2)
+			*max_vtaps = 2;
+		if (*max_htaps < 2)
+			*max_htaps = 2;
+
+	} else {
+		disp->graphics_scale_ratio =
+			fixed31_32_to_bw_fixed(
+				pipe_ctx->scl_data.ratios.vert.value);
+		disp->graphics_h_taps = pipe_ctx->scl_data.taps.h_taps;
+		disp->graphics_v_taps = pipe_ctx->scl_data.taps.v_taps;
+
+		/* TODO: remove when bw formula accepts taps per
+		 * display
+		 */
+		if (*max_vtaps < pipe_ctx->scl_data.taps.v_taps)
+			*max_vtaps = pipe_ctx->scl_data.taps.v_taps;
+		if (*max_htaps < pipe_ctx->scl_data.taps.h_taps)
+			*max_htaps = pipe_ctx->scl_data.taps.h_taps;
+	}
+
+	disp->graphics_src_width =
+		pipe_ctx->stream->public.timing.h_addressable;
+	disp->graphics_src_height =
+		pipe_ctx->stream->public.timing.v_addressable;
+	disp->h_total = pipe_ctx->stream->public.timing.h_total;
+	disp->pixel_rate = bw_frc_to_fixed(
+		pipe_ctx->stream->public.timing.pix_clk_khz, 1000);
+
+	/*TODO: get from surface*/
+	disp->graphics_bytes_per_pixel = 4;
+	disp->graphics_tiling_mode = bw_def_tiled;
+
+	/* DCE11 defaults*/
+	disp->graphics_lb_bpc = 10;
+	disp->graphics_interlace_mode = false;
+	disp->fbc_enable = false;
+	disp->lpt_enable = false;
+	disp->graphics_stereo_mode = bw_def_mono;
+	disp->underlay_mode = bw_def_none;
+}
+
 enum dc_status dce110_validate_bandwidth(
 	const struct core_dc *dc,
 	struct validate_context *context)
 {
-	uint8_t i;
+	int i;
 	enum dc_status result = DC_ERROR_UNEXPECTED;
-	uint8_t number_of_displays = 0;
-	uint8_t max_htaps = 1;
-	uint8_t max_vtaps = 1;
+	int number_of_displays = 0;
+	int max_htaps = 1;
+	int max_vtaps = 1;
+
 	bool all_displays_in_sync = true;
 	struct dc_crtc_timing prev_timing;
+	struct pipe_ctx *underlay_pipe_ctx = &context->res_ctx.pipe_ctx[DCE110_UNDERLAY_IDX];
+	struct bw_calcs_input_single_display *underlay_input = &context->
+		bw_mode_data.displays_data[number_of_displays];
 
 	memset(&context->bw_mode_data, 0, sizeof(context->bw_mode_data));
 
-	for (i = 0; i < MAX_PIPES; i++) {
+	/* Due to organization of bw_calcs, the underlay pipe must be at the beginning of the array*/
+
+	if (underlay_pipe_ctx->stream) {
+		bw_calcs_input_single_display(underlay_input, underlay_pipe_ctx->top_pipe, &max_htaps, &max_vtaps);
+		prev_timing = underlay_pipe_ctx->stream->public.timing;
+		underlay_input->underlay_mode = bw_def_yes;
+		underlay_input->underlay_h_taps = underlay_pipe_ctx->scl_data.taps.h_taps;
+		underlay_input->underlay_v_taps = underlay_pipe_ctx->scl_data.taps.v_taps;
+		underlay_input->underlay_scale_ratio = fixed31_32_to_bw_fixed(
+				underlay_pipe_ctx->scl_data.ratios.vert.value);
+		underlay_input->underlay_pitch_in_pixels = underlay_pipe_ctx->surface->public.plane_size.video.luma_pitch;
+		underlay_input->underlay_lb_bpc = 10;
+		underlay_input->underlay_src_width = underlay_pipe_ctx->surface->public.src_rect.width;
+		underlay_input->underlay_src_height = underlay_pipe_ctx->surface->public.src_rect.height;
+		underlay_input->underlay_tiling_mode = bw_def_tiled;
+		underlay_input->underlay_surface_type = bw_def_420;
+
+		number_of_displays++;
+	}
+
+	for (i = 0; i < context->res_ctx.pool->pipe_count; i++) {
 		struct pipe_ctx *pipe_ctx = &context->res_ctx.pipe_ctx[i];
 		struct bw_calcs_input_single_display *disp = &context->
 			bw_mode_data.displays_data[number_of_displays];
 
-		if (pipe_ctx->stream == NULL)
+		if (pipe_ctx->stream == NULL || pipe_ctx->bottom_pipe || pipe_ctx->top_pipe)
 			continue;
 
-		if (pipe_ctx->scl_data.ratios.vert.value == 0) {
-			disp->graphics_scale_ratio = bw_int_to_fixed(1);
-			disp->graphics_h_taps = 2;
-			disp->graphics_v_taps = 2;
-
-			/* TODO: remove when bw formula accepts taps per
-			 * display
-			 */
-			if (max_vtaps < 2)
-				max_vtaps = 2;
-			if (max_htaps < 2)
-				max_htaps = 2;
-
-		} else {
-			disp->graphics_scale_ratio =
-				fixed31_32_to_bw_fixed(
-					pipe_ctx->scl_data.ratios.vert.value);
-			disp->graphics_h_taps = pipe_ctx->scl_data.taps.h_taps;
-			disp->graphics_v_taps = pipe_ctx->scl_data.taps.v_taps;
-
-			/* TODO: remove when bw formula accepts taps per
-			 * display
-			 */
-			if (max_vtaps < pipe_ctx->scl_data.taps.v_taps)
-				max_vtaps = pipe_ctx->scl_data.taps.v_taps;
-			if (max_htaps < pipe_ctx->scl_data.taps.h_taps)
-				max_htaps = pipe_ctx->scl_data.taps.h_taps;
-		}
-
-		disp->graphics_src_width =
-			pipe_ctx->stream->public.timing.h_addressable;
-		disp->graphics_src_height =
-			pipe_ctx->stream->public.timing.v_addressable;
-		disp->h_total = pipe_ctx->stream->public.timing.h_total;
-		disp->pixel_rate = bw_frc_to_fixed(
-			pipe_ctx->stream->public.timing.pix_clk_khz, 1000);
-
-		/*TODO: get from surface*/
-		disp->graphics_bytes_per_pixel = 4;
-		disp->graphics_tiling_mode = bw_def_tiled;
-
-		/* DCE11 defaults*/
-		disp->graphics_lb_bpc = 10;
-		disp->graphics_interlace_mode = false;
-		disp->fbc_enable = false;
-		disp->lpt_enable = false;
-		disp->graphics_stereo_mode = bw_def_mono;
-		disp->underlay_mode = bw_def_none;
-
+		bw_calcs_input_single_display(disp, pipe_ctx,  &max_htaps, &max_vtaps);
 		/*All displays will be synchronized if timings are all
 		 * the same
 		 */
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/bandwidth_calcs.h b/drivers/gpu/drm/amd/dal/dc/inc/bandwidth_calcs.h
index 6961c82..83efb46 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/bandwidth_calcs.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/bandwidth_calcs.h
@@ -261,6 +261,7 @@ struct bw_calcs_input_single_display {
 	uint32_t graphics_lb_bpc;
 	uint32_t underlay_lb_bpc;
 	enum bw_defines underlay_tiling_mode;
+	struct bw_fixed underlay_scale_ratio;
 	uint32_t underlay_h_taps;
 	uint32_t underlay_v_taps;
 	uint32_t underlay_src_width;
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/hw/mem_input.h b/drivers/gpu/drm/amd/dal/dc/inc/hw/mem_input.h
index 6d7412c..0a8285e 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/hw/mem_input.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/hw/mem_input.h
@@ -43,6 +43,13 @@ struct mem_input_funcs {
 		struct bw_watermarks urgent,
 		uint32_t total_dest_line_time_ns);
 
+	void (*mem_input_program_chroma_display_marks)(
+			struct mem_input *mem_input,
+			struct bw_watermarks nbp,
+			struct bw_watermarks stutter,
+			struct bw_watermarks urgent,
+			uint32_t total_dest_line_time_ns);
+
 	void (*allocate_mem_input)(
 		struct mem_input *mem_input,
 		uint32_t h_total,/* for current target */
-- 
2.7.4

