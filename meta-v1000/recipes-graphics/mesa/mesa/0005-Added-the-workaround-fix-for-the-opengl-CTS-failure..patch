From 6f3f4dd45d01583caf5dc73ce3352b4e04a484c9 Mon Sep 17 00:00:00 2001
From: Ravi Patlegar <ravi.patlegar@amd.com>
Date: Fri, 4 Aug 2017 15:50:36 +0530
Subject: [PATCH 5/7] Added the workaround fix for the opengl CTS failure. The
 commit in master expects forceful alignment to 16 bytes to resolve the issue
 with big endianc ARM processors, which is causing a memory corruption for
 amdgpu targets.

Signed-off-by: Ravi Patlegar <ravi.patlegar@amd.com>
Reviewed-by: Tamil Velan <Tamil-Velan.Jayakumar@amd.com>
---
 src/util/ralloc.c | 15 +--------------
 1 file changed, 1 insertion(+), 14 deletions(-)

diff --git a/src/util/ralloc.c b/src/util/ralloc.c
index bf46439..cc65db7 100644
--- a/src/util/ralloc.c
+++ b/src/util/ralloc.c
@@ -46,20 +46,7 @@ _CRTIMP int _vscprintf(const char *format, va_list argptr);
 
 #define CANARY 0x5A1106
 
-/* Align the header's size so that ralloc() allocations will return with the
- * same alignment as a libc malloc would have (8 on 32-bit GLIBC, 16 on
- * 64-bit), avoiding performance penalities on x86 and alignment faults on
- * ARM.
- */
-struct
-#ifdef _MSC_VER
- __declspec(align(8))
-#elif defined(__LP64__)
- __attribute__((aligned(16)))
-#else
- __attribute__((aligned(8)))
-#endif
-   ralloc_header
+struct ralloc_header
 {
 #ifdef DEBUG
    /* A canary value used to determine whether a pointer is ralloc'd. */
-- 
2.7.4

