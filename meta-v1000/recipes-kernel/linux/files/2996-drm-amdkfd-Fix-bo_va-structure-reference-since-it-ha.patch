From d83a118eec7d020a81521e0bfa9bcf2b30492ab4 Mon Sep 17 00:00:00 2001
From: "Le.Ma" <Le.Ma@amd.com>
Date: Wed, 23 Aug 2017 15:19:18 +0800
Subject: [PATCH 2996/5855] drm/amdkfd: Fix bo_va structure reference since it
 has been separated.

Change-Id: I90f6d67b14004f56113fb93659323633ec12f087
Signed-off-by: Le.Ma <Le.Ma@amd.com>
Reviewed-by: Junwei Zhang <Jerry.Zhang@amd.com>
Signed-off-by: Raveendra Talabattula <raveendra.talabattula@amd.com>
---
 drivers/gpu/drm/amd/amdgpu/amdgpu_amdkfd_gpuvm.c | 30 ++++++++++++------------
 1 file changed, 15 insertions(+), 15 deletions(-)

diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_amdkfd_gpuvm.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_amdkfd_gpuvm.c
index 2beb61e..9964222 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_amdkfd_gpuvm.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_amdkfd_gpuvm.c
@@ -91,7 +91,7 @@ static bool check_if_add_bo_to_vm(struct amdgpu_vm *avm,
 	struct kfd_bo_va_list *entry;
 
 	list_for_each_entry(entry, &mem->bo_va_list, bo_list)
-		if (entry->bo_va->vm == avm)
+		if (entry->bo_va->base.vm == avm)
 			return false;
 
 	return true;
@@ -817,7 +817,7 @@ static int reserve_bo_and_cond_vms(struct kgd_mem *mem,
 	INIT_LIST_HEAD(&ctx->duplicates);
 
 	list_for_each_entry(entry, &mem->bo_va_list, bo_list) {
-		if ((vm && vm != entry->bo_va->vm) ||
+		if ((vm && vm != entry->bo_va->base.vm) ||
 			(entry->is_mapped != map_type
 			&& map_type != VA_DO_NOT_CARE))
 			continue;
@@ -841,12 +841,12 @@ static int reserve_bo_and_cond_vms(struct kgd_mem *mem,
 
 	i = 0;
 	list_for_each_entry(entry, &mem->bo_va_list, bo_list) {
-		if ((vm && vm != entry->bo_va->vm) ||
+		if ((vm && vm != entry->bo_va->base.vm) ||
 			(entry->is_mapped != map_type
 			&& map_type != VA_DO_NOT_CARE))
 			continue;
 
-		amdgpu_vm_get_pd_bo(entry->bo_va->vm, &ctx->list,
+		amdgpu_vm_get_pd_bo(entry->bo_va->base.vm, &ctx->list,
 				&ctx->vm_pd[i]);
 		i++;
 	}
@@ -894,7 +894,7 @@ static int unmap_bo_from_gpuvm(struct amdgpu_device *adev,
 				struct amdgpu_sync *sync)
 {
 	struct amdgpu_bo_va *bo_va = entry->bo_va;
-	struct amdgpu_vm *vm = bo_va->vm;
+	struct amdgpu_vm *vm = bo_va->base.vm;
 	struct amdkfd_vm *kvm = container_of(vm, struct amdkfd_vm, base);
 	struct amdgpu_bo *pd = vm->root.bo;
 
@@ -937,8 +937,8 @@ static int update_gpuvm_pte(struct amdgpu_device *adev,
 	struct amdgpu_bo *bo;
 
 	bo_va = entry->bo_va;
-	vm = bo_va->vm;
-	bo = bo_va->bo;
+	vm = bo_va->base.vm;
+	bo = bo_va->base.bo;
 
 	/* Update the page directory */
 	ret = amdgpu_vm_update_directories(adev, vm);
@@ -976,10 +976,10 @@ static int map_bo_to_gpuvm(struct amdgpu_device *adev,
 		bool no_update_pte)
 {
 	int ret;
-	struct amdgpu_bo *bo = entry->bo_va->bo;
-	struct amdkfd_vm *kvm = container_of(entry->bo_va->vm,
+	struct amdgpu_bo *bo = entry->bo_va->base.bo;
+	struct amdkfd_vm *kvm = container_of(entry->bo_va->base.vm,
 					     struct amdkfd_vm, base);
-	struct amdgpu_bo *pd = entry->bo_va->vm->root.bo;
+	struct amdgpu_bo *pd = entry->bo_va->base.vm->root.bo;
 
 	/* Remove eviction fence from PD (and thereby from PTs too as they
 	 * share the resv. object. This is necessary because new PTs are
@@ -990,7 +990,7 @@ static int map_bo_to_gpuvm(struct amdgpu_device *adev,
 					kvm->process_info->eviction_fence,
 					NULL, NULL);
 
-	ret = amdgpu_vm_alloc_pts(adev, entry->bo_va->vm, entry->va,
+	ret = amdgpu_vm_alloc_pts(adev, entry->bo_va->base.vm, entry->va,
 				  amdgpu_bo_size(bo));
 
 	if (ret) {
@@ -1013,7 +1013,7 @@ static int map_bo_to_gpuvm(struct amdgpu_device *adev,
 	/* PT BOs may be created during amdgpu_vm_bo_map() call,
 	 * so we have to validate the newly created PT BOs.
 	 */
-	ret = vm_validate_pt_pd_bos(entry->bo_va->vm);
+	ret = vm_validate_pt_pd_bos(entry->bo_va->base.vm);
 	if (ret != 0) {
 		pr_err("validate_pt_pd_bos() failed\n");
 		return ret;
@@ -1330,7 +1330,7 @@ int amdgpu_amdkfd_gpuvm_map_memory_to_gpu(
 	}
 
 	list_for_each_entry(entry, &mem->bo_va_list, bo_list) {
-		if (entry->bo_va->vm == vm && !entry->is_mapped) {
+		if (entry->bo_va->base.vm == vm && !entry->is_mapped) {
 			pr_debug("\t map VA 0x%llx - 0x%llx in entry %p\n",
 					entry->va, entry->va + bo_size,
 					entry);
@@ -1539,7 +1539,7 @@ static bool is_mem_on_local_device(struct kgd_dev *kgd,
 	struct kfd_bo_va_list *entry;
 
 	list_for_each_entry(entry, bo_va_list, bo_list) {
-		if (entry->kgd_dev == kgd && entry->bo_va->vm == vm)
+		if (entry->kgd_dev == kgd && entry->bo_va->base.vm == vm)
 			return true;
 	}
 
@@ -1590,7 +1590,7 @@ int amdgpu_amdkfd_gpuvm_unmap_memory_from_gpu(
 		vm);
 
 	list_for_each_entry(entry, &mem->bo_va_list, bo_list) {
-		if (entry->bo_va->vm == vm && entry->is_mapped) {
+		if (entry->bo_va->base.vm == vm && entry->is_mapped) {
 			pr_debug("\t unmap VA 0x%llx - 0x%llx from entry %p\n",
 					entry->va,
 					entry->va + bo_size,
-- 
2.7.4

