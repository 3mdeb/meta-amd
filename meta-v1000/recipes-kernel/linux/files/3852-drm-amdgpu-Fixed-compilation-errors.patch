From b59b329fa5f4d13da2ce26bd716737a293dc1372 Mon Sep 17 00:00:00 2001
From: Pavan Kumar Ramayanam <pavan.ramayanam@amd.com>
Date: Mon, 7 May 2018 09:58:01 +0530
Subject: [PATCH 3852/5855] drm/amdgpu: Fixed compilation errors

Signed-off-by: Pavan Kumar Ramayanam <pavan.ramayanam@amd.com>
---
 drivers/gpu/drm/amd/amdgpu/amdgpu_cs.c             |  14 +--
 drivers/gpu/drm/amd/amdgpu/amdgpu_ctx.c            |   6 +-
 drivers/gpu/drm/amd/amdgpu/amdgpu_gtt_mgr.c        |   2 +-
 drivers/gpu/drm/amd/amdgpu/amdgpu_job.c            |   4 +-
 drivers/gpu/drm/amd/amdgpu/amdgpu_ttm.c            |   4 +-
 drivers/gpu/drm/amd/amdgpu/uvd_v6_0.c              |  26 ++---
 drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c  |  13 ++-
 .../drm/amd/display/dc/dcn10/dcn10_hw_sequencer.c  |  62 ------------
 .../amd/display/dc/dcn10/dcn10_timing_generator.c  | 112 ---------------------
 drivers/gpu/drm/amd/scheduler/gpu_scheduler.c      |   6 +-
 drivers/gpu/drm/amd/scheduler/gpu_scheduler.h      |   1 +
 drivers/gpu/drm/drm_syncobj.c                      |   2 +-
 include/drm/drm_syncobj.h                          |   2 +-
 include/linux/fence.h                              |  19 ++++
 include/uapi/drm/amdgpu_drm.h                      |  15 ---
 15 files changed, 59 insertions(+), 229 deletions(-)
 mode change 100644 => 100755 drivers/gpu/drm/amd/display/dc/dcn10/dcn10_hw_sequencer.c
 mode change 100644 => 100755 drivers/gpu/drm/amd/display/dc/dcn10/dcn10_timing_generator.c
 mode change 100644 => 100755 drivers/gpu/drm/amd/scheduler/gpu_scheduler.h

diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_cs.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_cs.c
index b41943d..e050fa8 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_cs.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_cs.c
@@ -1331,13 +1331,13 @@ static struct fence *amdgpu_cs_get_fence(struct amdgpu_device *adev,
 
 	return fence;
 }
-
+#if !defined(BUILD_AS_DKMS)
 int amdgpu_cs_fence_to_handle_ioctl(struct drm_device *dev, void *data,
 				    struct drm_file *filp)
 {
 	struct amdgpu_device *adev = dev->dev_private;
 	union drm_amdgpu_fence_to_handle *info = data;
-	struct dma_fence *fence;
+	struct fence *fence;
 	struct drm_syncobj *syncobj;
 	struct sync_file *sync_file;
 	int fd, r;
@@ -1349,7 +1349,7 @@ int amdgpu_cs_fence_to_handle_ioctl(struct drm_device *dev, void *data,
 	switch (info->in.what) {
 	case AMDGPU_FENCE_TO_HANDLE_GET_SYNCOBJ:
 		r = drm_syncobj_create(&syncobj, 0, fence);
-		dma_fence_put(fence);
+		fence_put(fence);
 		if (r)
 			return r;
 		r = drm_syncobj_get_handle(filp, syncobj, &info->out.handle);
@@ -1358,7 +1358,7 @@ int amdgpu_cs_fence_to_handle_ioctl(struct drm_device *dev, void *data,
 
 	case AMDGPU_FENCE_TO_HANDLE_GET_SYNCOBJ_FD:
 		r = drm_syncobj_create(&syncobj, 0, fence);
-		dma_fence_put(fence);
+		fence_put(fence);
 		if (r)
 			return r;
 		r = drm_syncobj_get_fd(syncobj, (int*)&info->out.handle);
@@ -1368,12 +1368,12 @@ int amdgpu_cs_fence_to_handle_ioctl(struct drm_device *dev, void *data,
 	case AMDGPU_FENCE_TO_HANDLE_GET_SYNC_FILE_FD:
 		fd = get_unused_fd_flags(O_CLOEXEC);
 		if (fd < 0) {
-			dma_fence_put(fence);
+			fence_put(fence);
 			return fd;
 		}
 
 		sync_file = sync_file_create(fence);
-		dma_fence_put(fence);
+		fence_put(fence);
 		if (!sync_file) {
 			put_unused_fd(fd);
 			return -ENOMEM;
@@ -1387,7 +1387,7 @@ int amdgpu_cs_fence_to_handle_ioctl(struct drm_device *dev, void *data,
 		return -EINVAL;
 	}
 }
-
+#endif
 /**
  * amdgpu_cs_wait_all_fence - wait on all fences to signal
  *
diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_ctx.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_ctx.c
index a6af4be..9ac635a 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_ctx.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_ctx.c
@@ -362,7 +362,7 @@ uint64_t amdgpu_ctx_add_fence(struct amdgpu_ctx *ctx, struct amdgpu_ring *ring,
 	other = cring->fences[idx];
 
         if (other)
-                BUG_ON(!dma_fence_is_signaled(other));
+                BUG_ON(!fence_is_signaled(other));
 
 	fence_get(fence);
 
@@ -435,11 +435,11 @@ int amdgpu_ctx_wait_prev_fence(struct amdgpu_ctx *ctx, unsigned ring_id)
 {
 	struct amdgpu_ctx_ring *cring = &ctx->rings[ring_id];
 	unsigned idx = cring->sequence & (amdgpu_sched_jobs - 1);
-	struct dma_fence *other = cring->fences[idx];
+	struct fence *other = cring->fences[idx];
 
 	if (other) {
 		signed long r;
-		r = kcl_fence_wait_timeout(other, false, MAX_SCHEDULE_TIMEOUT);
+		r = fence_wait_timeout(other, false, MAX_SCHEDULE_TIMEOUT);
 		if (r < 0) {
 			DRM_ERROR("Error (%ld) waiting for fence!\n", r);
 			return r;
diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_gtt_mgr.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_gtt_mgr.c
index 16bb754..7b2c776 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_gtt_mgr.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_gtt_mgr.c
@@ -229,7 +229,7 @@ static void amdgpu_gtt_mgr_del(struct ttm_mem_type_manager *man,
 
 	spin_lock(&mgr->lock);
 	if (node->node.start != AMDGPU_BO_INVALID_OFFSET)
-		drm_mm_remove_node(&nomdgpu_gtt_mgr_newde->node);
+		drm_mm_remove_node(&node->node);
 	spin_unlock(&mgr->lock);
 	atomic64_add(mem->num_pages, &mgr->available);
 
diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_job.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_job.c
index efd640f..312e260 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_job.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_job.c
@@ -196,9 +196,9 @@ static struct fence *amdgpu_job_run(struct amd_sched_job *sched_job)
 	trace_amdgpu_sched_run_job(job);
 	/* skip ib schedule when vram is lost */
 	if (job->vram_lost_counter != atomic_read(&adev->vram_lost_counter)) 
-		dma_fence_set_error(finished, -ECANCELED);/* skip IB as well if VRAM lost */
+		fence_set_error(finished, -ECANCELED);/* skip IB as well if VRAM lost */
 
-	if (finished->error < 0) {
+	if (finished->status < 0) {
 		DRM_INFO("Skip scheduling IBs!\n");
 	} else {
 		r = amdgpu_ib_schedule(job->ring, job->num_ibs, job->ibs, job,
diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_ttm.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_ttm.c
index 8d326cd..a996a2c 100755
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_ttm.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_ttm.c
@@ -363,7 +363,7 @@ int amdgpu_ttm_copy_mem_to_mem(struct amdgpu_device *adev,
                                struct amdgpu_copy_mem *dst,
                                uint64_t size,
                                struct reservation_object *resv,
-                               struct dma_fence **f)
+                               struct fence **f)
 {
 	struct amdgpu_ring *ring = adev->mman.buffer_funcs_ring;
 
@@ -483,7 +483,7 @@ static int amdgpu_move_blit(struct ttm_buffer_object *bo,
 {
 	struct amdgpu_device *adev = amdgpu_ttm_adev(bo->bdev);
 	struct amdgpu_copy_mem src, dst;
-	struct dma_fence *fence = NULL;
+	struct fence *fence = NULL;
 	int r;
 
 	src.bo = bo;
diff --git a/drivers/gpu/drm/amd/amdgpu/uvd_v6_0.c b/drivers/gpu/drm/amd/amdgpu/uvd_v6_0.c
index 0e8b887..7804982 100644
--- a/drivers/gpu/drm/amd/amdgpu/uvd_v6_0.c
+++ b/drivers/gpu/drm/amd/amdgpu/uvd_v6_0.c
@@ -206,12 +206,12 @@ static int uvd_v6_0_enc_ring_test_ring(struct amdgpu_ring *ring)
  * Open up a stream for HW test
  */
 static int uvd_v6_0_enc_get_create_msg(struct amdgpu_ring *ring, uint32_t handle,
-				       struct dma_fence **fence)
+				       struct fence **fence)
 {
 	const unsigned ib_size_dw = 16;
 	struct amdgpu_job *job;
 	struct amdgpu_ib *ib;
-	struct dma_fence *f = NULL;
+	struct fence *f = NULL;
 	uint64_t dummy;
 	int i, r;
 
@@ -243,14 +243,14 @@ static int uvd_v6_0_enc_get_create_msg(struct amdgpu_ring *ring, uint32_t handle
 		ib->ptr[i] = 0x0;
 
 	r = amdgpu_ib_schedule(ring, 1, ib, NULL, &f);
-	job->fence = dma_fence_get(f);
+	job->fence = fence_get(f);
 	if (r)
 		goto err;
 
 	amdgpu_job_free(job);
 	if (fence)
-		*fence = dma_fence_get(f);
-	dma_fence_put(f);
+		*fence = fence_get(f);
+	fence_put(f);
 	return 0;
 
 err:
@@ -270,12 +270,12 @@ static int uvd_v6_0_enc_get_create_msg(struct amdgpu_ring *ring, uint32_t handle
  */
 static int uvd_v6_0_enc_get_destroy_msg(struct amdgpu_ring *ring,
 					uint32_t handle,
-					bool direct, struct dma_fence **fence)
+					bool direct, struct fence **fence)
 {
 	const unsigned ib_size_dw = 16;
 	struct amdgpu_job *job;
 	struct amdgpu_ib *ib;
-	struct dma_fence *f = NULL;
+	struct fence *f = NULL;
 	uint64_t dummy;
 	int i, r;
 
@@ -308,7 +308,7 @@ static int uvd_v6_0_enc_get_destroy_msg(struct amdgpu_ring *ring,
 
 	if (direct) {
 		r = amdgpu_ib_schedule(ring, 1, ib, NULL, &f);
-		job->fence = dma_fence_get(f);
+		job->fence = fence_get(f);
 		if (r)
 			goto err;
 
@@ -321,8 +321,8 @@ static int uvd_v6_0_enc_get_destroy_msg(struct amdgpu_ring *ring,
 	}
 
 	if (fence)
-		*fence = dma_fence_get(f);
-	dma_fence_put(f);
+		*fence = fence_get(f);
+	fence_put(f);
 	return 0;
 
 err:
@@ -338,7 +338,7 @@ static int uvd_v6_0_enc_get_destroy_msg(struct amdgpu_ring *ring,
  */
 static int uvd_v6_0_enc_ring_test_ib(struct amdgpu_ring *ring, long timeout)
 {
-	struct dma_fence *fence = NULL;
+	struct fence *fence = NULL;
 	long r;
 
 	r = uvd_v6_0_enc_get_create_msg(ring, 1, NULL);
@@ -353,7 +353,7 @@ static int uvd_v6_0_enc_ring_test_ib(struct amdgpu_ring *ring, long timeout)
 		goto error;
 	}
 
-	r = dma_fence_wait_timeout(fence, false, timeout);
+	r = fence_wait_timeout(fence, false, timeout);
 	if (r == 0) {
 		DRM_ERROR("amdgpu: IB test timed out.\n");
 		r = -ETIMEDOUT;
@@ -364,7 +364,7 @@ static int uvd_v6_0_enc_ring_test_ib(struct amdgpu_ring *ring, long timeout)
 		r = 0;
 	}
 error:
-	dma_fence_put(fence);
+	fence_put(fence);
 	return r;
 }
 static int uvd_v6_0_early_init(void *handle)
diff --git a/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c b/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c
index 1dcfb10..2c88de6 100644
--- a/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c
+++ b/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c
@@ -4657,7 +4657,7 @@ static int dm_update_crtcs_state(
 	/* update changed items */
 	for_each_crtc_in_state(state, crtc, crtc_state, i) {
 		struct amdgpu_crtc *acrtc = NULL;
-		struct amdgpu_connector *aconnector = NULL;
+		struct amdgpu_dm_connector *aconnector = NULL;
 		struct dc_stream_state *new_stream = NULL;
 		struct drm_connector_state *conn_state = NULL;
 		struct dm_connector_state *dm_conn_state = NULL;
@@ -4803,7 +4803,8 @@ static int dm_update_planes_state(
 		return ret;
 
 	/* Add new planes */
-	for_each_oldnew_plane_in_state(state, plane, old_plane_state, new_plane_state, i) {
+	for_each_plane_in_state(state, plane, new_plane_state, i) {
+		old_plane_state = plane->state;
 		new_plane_crtc = new_plane_state->crtc;
 		old_plane_crtc = old_plane_state->crtc;
 		new_dm_plane_state = to_dm_plane_state(new_plane_state);
@@ -4819,9 +4820,7 @@ static int dm_update_planes_state(
 				continue;
 
 			old_acrtc_state = to_dm_crtc_state(
-					drm_atomic_get_old_crtc_state(
-							state,
-							old_plane_crtc));
+					state->crtcs[drm_crtc_index(old_plane_crtc)].ptr->state);
 
 			if (!old_acrtc_state->stream)
 				continue;
@@ -4846,13 +4845,13 @@ static int dm_update_planes_state(
 
 		} else { /* Add new planes */
 
-			if (drm_atomic_plane_disabling(plane->state, new_plane_state))
+			if (drm_atomic_plane_disabling(plane, old_plane_state))
 				continue;
 
 			if (!new_plane_crtc)
 				continue;
 
-			new_crtc_state = drm_atomic_get_new_crtc_state(state, new_plane_crtc);
+			new_crtc_state = state->crtcs[drm_crtc_index(new_plane_crtc)].state;
 			new_acrtc_state = to_dm_crtc_state(new_crtc_state);
 
 			if (!new_acrtc_state->stream)
diff --git a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_hw_sequencer.c b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_hw_sequencer.c
old mode 100644
new mode 100755
index b137fd9..27561d6
--- a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_hw_sequencer.c
+++ b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_hw_sequencer.c
@@ -2864,68 +2864,6 @@ void dcn10_update_pending_status(struct pipe_ctx *pipe_ctx)
 	}
 }
 
-static void dcn10_config_stereo_parameters(struct core_stream *stream,\
-										   struct crtc_stereo_flags *flags)
-{
-	enum view_3d_format view_format = stream->public.view_format;
-	enum dc_timing_3d_format timing_3d_format =\
-			stream->public.timing.timing_3d_format;
-	bool non_stereo_timing = false;
-
-	if (timing_3d_format == TIMING_3D_FORMAT_NONE ||
-		timing_3d_format == TIMING_3D_FORMAT_SIDE_BY_SIDE ||
-		timing_3d_format == TIMING_3D_FORMAT_TOP_AND_BOTTOM)
-		non_stereo_timing = true;
-
-	if (non_stereo_timing == false &&
-		view_format == VIEW_3D_FORMAT_FRAME_SEQUENTIAL) {
-
-		flags->PROGRAM_STEREO         = 1;
-		flags->PROGRAM_POLARITY       = 1;
-		if (timing_3d_format == TIMING_3D_FORMAT_INBAND_FA ||
-			timing_3d_format == TIMING_3D_FORMAT_DP_HDMI_INBAND_FA ||
-			timing_3d_format == TIMING_3D_FORMAT_SIDEBAND_FA) {
-			enum display_dongle_type dongle = \
-					stream->sink->link->public.ddc->dongle_type;
-			if (dongle == DISPLAY_DONGLE_DP_VGA_CONVERTER ||
-				dongle == DISPLAY_DONGLE_DP_DVI_CONVERTER ||
-				dongle == DISPLAY_DONGLE_DP_HDMI_CONVERTER)
-				flags->DISABLE_STEREO_DP_SYNC = 1;
-		}
-		flags->RIGHT_EYE_POLARITY =\
-				stream->public.timing.flags.RIGHT_EYE_3D_POLARITY;
-		if (timing_3d_format == TIMING_3D_FORMAT_HW_FRAME_PACKING)
-			flags->FRAME_PACKED = 1;
-	}
-
-	return;
-}
-
-static void dcn10_setup_stereo(struct pipe_ctx *pipe_ctx,
-								struct core_dc *dc)
-{
-	struct crtc_stereo_flags flags = { 0 };
-	struct core_stream *stream = pipe_ctx->stream;
-
-	dcn10_config_stereo_parameters(stream, &flags);
-
-	pipe_ctx->opp->funcs->opp_set_stereo_polarity(
-		pipe_ctx->opp,
-		flags.PROGRAM_STEREO == 1 ? true:false,
-		stream->public.timing.flags.RIGHT_EYE_3D_POLARITY == 1 ? true:false);
-
-	pipe_ctx->tg->funcs->program_stereo(
-		pipe_ctx->tg,
-		&stream->public.timing,
-		&flags);
-
-
-
-	return;
-}
-
-
-
 static const struct hw_sequencer_funcs dcn10_funcs = {
 	.program_gamut_remap = program_gamut_remap,
 	.program_csc_matrix = program_csc_matrix,
diff --git a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_timing_generator.c b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_timing_generator.c
old mode 100644
new mode 100755
index ad3f8f4..15cf1a5
--- a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_timing_generator.c
+++ b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_timing_generator.c
@@ -1097,118 +1097,6 @@ static bool tgn10_is_stereo_left_eye(struct timing_generator *tg)
 	return ret;
 }
 
-
-
-static void dcn10_enable_stereo(struct timing_generator *tg,
-	const struct dc_crtc_timing *timing, struct crtc_stereo_flags *flags)
-{
-	struct dcn10_timing_generator *tgn10 = DCN10TG_FROM_TG(tg);
-
-	uint32_t active_width = timing->h_addressable;
-	uint32_t space1_size = timing->v_total - timing->v_addressable;
-
-	if (flags) {
-		uint32_t stereo_en;
-		stereo_en = flags->FRAME_PACKED == 0 ? 1 : 0;
-
-		if (flags->PROGRAM_STEREO)
-			REG_UPDATE_3(OTG_STEREO_CONTROL,
-				OTG_STEREO_EN, stereo_en,
-				OTG_STEREO_SYNC_OUTPUT_LINE_NUM, 0,
-				OTG_STEREO_SYNC_OUTPUT_POLARITY, 0);
-
-		if (flags->PROGRAM_POLARITY)
-			REG_UPDATE(OTG_STEREO_CONTROL,
-				OTG_STEREO_EYE_FLAG_POLARITY,
-				flags->RIGHT_EYE_POLARITY == 0 ? 0 : 1);
-
-		if (flags->DISABLE_STEREO_DP_SYNC)
-			REG_UPDATE(OTG_STEREO_CONTROL,
-				OTG_DISABLE_STEREOSYNC_OUTPUT_FOR_DP, 1);
-
-		if (flags->PROGRAM_STEREO)
-			REG_UPDATE_3(OTG_3D_STRUCTURE_CONTROL,
-				OTG_3D_STRUCTURE_EN, flags->FRAME_PACKED,
-				OTG_3D_STRUCTURE_V_UPDATE_MODE, flags->FRAME_PACKED,
-				OTG_3D_STRUCTURE_STEREO_SEL_OVR, flags->FRAME_PACKED);
-
-	}
-
-	REG_UPDATE(OPPBUF_CONTROL,
-		OPPBUF_ACTIVE_WIDTH, active_width);
-
-	REG_UPDATE(OPPBUF_3D_PARAMETERS_0,
-		OPPBUF_3D_VACT_SPACE1_SIZE, space1_size);
-}
-
-static void dcn10_program_stereo(struct timing_generator *tg,
-	const struct dc_crtc_timing *timing, struct crtc_stereo_flags *flags)
-{
-	if (flags->PROGRAM_STEREO)
-		dcn10_enable_stereo(tg, timing, flags);
-	else
-		dcn10_disable_stereo(tg);
-}
-
-
-static bool dcn10_is_stereo_left_eye(struct timing_generator *tg)
-{
-	bool ret = false;
-	uint32_t left_eye = 0;
-	struct dcn10_timing_generator *tgn10 = DCN10TG_FROM_TG(tg);
-
-	REG_GET(OTG_STEREO_STATUS,
-		OTG_STEREO_CURRENT_EYE, &left_eye);
-	if (left_eye == 1)
-		ret = true;
-	else
-		ret = false;
-
-	return ret;
-}
-
-void tgn10_read_otg_state(struct dcn10_timing_generator *tgn10,
-		struct dcn_otg_state *s)
-{
-	REG_GET_2(OTG_V_BLANK_START_END,
-			OTG_V_BLANK_START, &s->v_blank_start,
-			OTG_V_BLANK_END, &s->v_blank_end);
-
-	REG_GET(OTG_V_SYNC_A_CNTL,
-			OTG_V_SYNC_A_POL, &s->v_sync_a_pol);
-
-	REG_GET(OTG_V_TOTAL,
-			OTG_V_TOTAL, &s->v_total);
-
-	REG_GET(OTG_V_TOTAL_MAX,
-			OTG_V_TOTAL_MAX, &s->v_total_max);
-
-	REG_GET(OTG_V_TOTAL_MIN,
-			OTG_V_TOTAL_MIN, &s->v_total_min);
-
-	REG_GET_2(OTG_V_SYNC_A,
-			OTG_V_SYNC_A_START, &s->v_sync_a_start,
-			OTG_V_SYNC_A_END, &s->v_sync_a_end);
-
-	REG_GET_2(OTG_H_BLANK_START_END,
-			OTG_H_BLANK_START, &s->h_blank_start,
-			OTG_H_BLANK_END, &s->h_blank_end);
-
-	REG_GET_2(OTG_H_SYNC_A,
-			OTG_H_SYNC_A_START, &s->h_sync_a_start,
-			OTG_H_SYNC_A_END, &s->h_sync_a_end);
-
-	REG_GET(OTG_H_SYNC_A_CNTL,
-			OTG_H_SYNC_A_POL, &s->h_sync_a_pol);
-
-	REG_GET(OTG_H_TOTAL,
-			OTG_H_TOTAL, &s->h_total);
-
-	REG_GET(OPTC_INPUT_GLOBAL_CONTROL,
-			OPTC_UNDERFLOW_OCCURRED_STATUS, &s->underflow_occurred_status);
-}
-
-
 static struct timing_generator_funcs dcn10_tg_funcs = {
 		.validate_timing = tgn10_validate_timing,
 		.program_timing = tgn10_program_timing,
diff --git a/drivers/gpu/drm/amd/scheduler/gpu_scheduler.c b/drivers/gpu/drm/amd/scheduler/gpu_scheduler.c
index 916af7e..9f25e0b 100755
--- a/drivers/gpu/drm/amd/scheduler/gpu_scheduler.c
+++ b/drivers/gpu/drm/amd/scheduler/gpu_scheduler.c
@@ -356,7 +356,7 @@ amd_sched_entity_pop_job(struct amd_sched_entity *entity)
 
 	/* skip jobs from entity that marked guilty */
 	if (entity->guilty && atomic_read(entity->guilty))
-		dma_fence_set_error(&sched_job->s_fence->finished, -ECANCELED);
+		fence_set_error(&sched_job->s_fence->finished, -ECANCELED);
 
 	spsc_queue_pop(&entity->job_queue);
 	return sched_job;
@@ -433,7 +433,7 @@ static void amd_sched_job_begin(struct amd_sched_job *s_job)
 {
 	struct amd_gpu_scheduler *sched = s_job->sched;
 
-	dma_fence_add_callback(&s_job->s_fence->finished, &s_job->finish_cb,
+	fence_add_callback(&s_job->s_fence->finished, &s_job->finish_cb,
 			       amd_sched_job_finish_cb);
 
 	spin_lock(&sched->job_list_lock);
@@ -528,7 +528,7 @@ void amd_sched_job_recovery(struct amd_gpu_scheduler *sched)
                 }
 
                 if (found_guilty && s_job->s_fence->scheduled.context == guilty_context)
-                        dma_fence_set_error(&s_fence->finished, -ECANCELED);
+                        fence_set_error(&s_fence->finished, -ECANCELED);
 
 		spin_unlock(&sched->job_list_lock);
 		fence = sched->ops->run_job(s_job);
diff --git a/drivers/gpu/drm/amd/scheduler/gpu_scheduler.h b/drivers/gpu/drm/amd/scheduler/gpu_scheduler.h
old mode 100644
new mode 100755
index fddea56..b943b59
--- a/drivers/gpu/drm/amd/scheduler/gpu_scheduler.h
+++ b/drivers/gpu/drm/amd/scheduler/gpu_scheduler.h
@@ -26,6 +26,7 @@
 
 #include <linux/kfifo.h>
 #include <linux/fence.h>
+#include "spsc_queue.h"
 
 struct amd_gpu_scheduler;
 struct amd_sched_rq;
diff --git a/drivers/gpu/drm/drm_syncobj.c b/drivers/gpu/drm/drm_syncobj.c
index a134a2a..65efffc 100644
--- a/drivers/gpu/drm/drm_syncobj.c
+++ b/drivers/gpu/drm/drm_syncobj.c
@@ -273,7 +273,7 @@ EXPORT_SYMBOL(drm_syncobj_free);
  * @fence: if non-NULL, the syncobj will represent this fence
  */
 int drm_syncobj_create(struct drm_syncobj **out_syncobj, uint32_t flags,
-		       struct dma_fence *fence)
+		       struct fence *fence)
 {
 	int ret;
 	struct drm_syncobj *syncobj;
diff --git a/include/drm/drm_syncobj.h b/include/drm/drm_syncobj.h
index f36d525..213c752 100644
--- a/include/drm/drm_syncobj.h
+++ b/include/drm/drm_syncobj.h
@@ -139,7 +139,7 @@ int drm_syncobj_find_fence(struct drm_file *file_private,
 			  struct fence **fence);
 void drm_syncobj_free(struct kref *kref);
 int drm_syncobj_create(struct drm_syncobj **out_syncobj, uint32_t flags,
-		       struct dma_fence *fence);
+		       struct fence *fence);
 int drm_syncobj_get_handle(struct drm_file *file_private,
 			   struct drm_syncobj *syncobj, u32 *handle);
 int drm_syncobj_get_fd(struct drm_syncobj *syncobj, int *p_fd);
diff --git a/include/linux/fence.h b/include/linux/fence.h
index 6629d68..80a38d7 100644
--- a/include/linux/fence.h
+++ b/include/linux/fence.h
@@ -393,4 +393,23 @@ fence_get_rcu_safe(struct fence * __rcu *fencep)
 			##args);					\
 	} while (0)
 
+/**
+ * fence_set_error - flag an error condition on the fence
+ * @fence: [in] the fence
+ * @error: [in] the error to store
+ *
+ * Drivers can supply an optional error status condition before they signal
+ * the fence, to indicate that the fence was completed due to an error
+ * rather than success. This must be set before signaling (so that the value
+ * is visible before any waiters on the signal callback are woken). This
+ * helper exists to help catching erroneous setting of #dma_fence.error.
+ */
+static inline void fence_set_error(struct fence *fence,
+                                   int error)
+{
+	BUG_ON(test_bit(FENCE_FLAG_SIGNALED_BIT, &fence->flags));
+	BUG_ON(error >= 0 || error < -MAX_ERRNO);
+	
+	fence->status = error;
+}
 #endif /* __LINUX_FENCE_H */
diff --git a/include/uapi/drm/amdgpu_drm.h b/include/uapi/drm/amdgpu_drm.h
index 5b543cd..9911540 100644
--- a/include/uapi/drm/amdgpu_drm.h
+++ b/include/uapi/drm/amdgpu_drm.h
@@ -304,21 +304,6 @@ union drm_amdgpu_sem {
 	union drm_amdgpu_sem_out out;
 };
 
-/* sched ioctl */
-#define AMDGPU_SCHED_OP_PROCESS_PRIORITY_OVERRIDE	1
-
-struct drm_amdgpu_sched_in {
-	/* AMDGPU_SCHED_OP_* */
-	__u32	op;
-	__u32	fd;
-	__s32	priority;
-	__u32	flags;
-};
-
-union drm_amdgpu_sched {
-	struct drm_amdgpu_sched_in in;
-};
-
 /*
  * This is not a reliable API and you should expect it to fail for any
  * number of reasons and have fallback path that do not use userptr to
-- 
2.7.4

