From 9289665565234e39c64358c933f4c6739e8a64e6 Mon Sep 17 00:00:00 2001
From: Dave Airlie <airlied@redhat.com>
Date: Tue, 12 Apr 2016 12:02:37 +1000
Subject: [PATCH 0554/1722] drm/amd/dal: store defaults values in adapter
 service.

This lets us make the feature_entry_table static const data,
and also stores values per adapter rather than globally.

Signed-off-by: Dave Airlie <airlied@redhat.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 .../gpu/drm/amd/dal/dc/adapter/adapter_service.c    | 21 ++++++++++++++++++---
 .../gpu/drm/amd/dal/dc/adapter/adapter_service.h    |  8 +-------
 2 files changed, 19 insertions(+), 10 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.c b/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.c
index 3d5ca9f..3645aff 100644
--- a/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.c
+++ b/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.c
@@ -83,8 +83,14 @@
  * In this case, the default value is 0x1FF7 and not a boolean type, which
  * makes it an int type.
  */
+/* Type of feature with its runtime parameter and default value */
+struct feature_source_entry {
+	enum adapter_feature_id feature_id;
+	uint32_t default_value;
+	bool is_boolean_type;
+};
 
-static struct feature_source_entry feature_entry_table[] = {
+static const struct feature_source_entry feature_entry_table[] = {
 	/* Feature name | default value | is boolean type */
 	{FEATURE_ENABLE_HW_EDID_POLLING, false, true},
 	{FEATURE_DP_SINK_DETECT_POLL_DATA_PIN, false, true},
@@ -631,7 +637,7 @@ static bool generate_feature_set(
 				 * above data sources
 				 * Assign default value
 				 */
-				value = entry->default_value;
+				value = as->default_values[entry->feature_id];
 			}
 		}
 
@@ -719,6 +725,7 @@ static bool adapter_service_construct(
 {
 	struct dc_bios *dcb;
 	enum dce_version dce_version;
+	uint32_t i;
 
 	if (!init_data)
 		return false;
@@ -733,6 +740,13 @@ static bool adapter_service_construct(
 		return false;
 	}
 
+	for (i = 0; i < ARRAY_SIZE(feature_entry_table); i++) {
+		enum adapter_feature_id id =
+			feature_entry_table[i].feature_id;
+
+		as->default_values[id] = feature_entry_table[i].default_value;
+	}
+
 #if defined(CONFIG_DRM_AMD_DAL_DCE11_0)
 	if (dal_adapter_service_get_dce_version(as) == DCE_VERSION_11_0) {
 		uint32_t i;
@@ -740,10 +754,11 @@ static bool adapter_service_construct(
 		for (i = 0; i < ARRAY_SIZE(feature_entry_table); i++) {
 			enum adapter_feature_id id =
 				feature_entry_table[i].feature_id;
+
 			if (id == FEATURE_MAXIMIZE_URGENCY_WATERMARKS ||
 				id == FEATURE_MAXIMIZE_STUTTER_MARKS ||
 				id == FEATURE_MAXIMIZE_NBP_MARKS)
-				feature_entry_table[i].default_value = true;
+				as->default_values[id] = true;
 		}
 	}
 #endif
diff --git a/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.h b/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.h
index 25afa9b..2bcfdfe 100644
--- a/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.h
+++ b/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.h
@@ -57,13 +57,7 @@ struct adapter_service {
 	uint32_t backlight_caps_initialized;
 	uint32_t backlight_8bit_lut[SIZEOF_BACKLIGHT_LUT];
 	uint32_t adapter_feature_set[FEATURE_MAXIMUM/32];
-};
-
-/* Type of feature with its runtime parameter and default value */
-struct feature_source_entry {
-	enum adapter_feature_id feature_id;
-	uint32_t default_value;
-	bool is_boolean_type;
+	uint32_t default_values[FEATURE_MAXIMUM];
 };
 
 #endif /* __DAL_ADAPTER_SERVICE_H__ */
-- 
2.7.4

