From abaf8d791af799ce0c52dcc1f258099a7415926d Mon Sep 17 00:00:00 2001
From: Harry Wentland <harry.wentland@amd.com>
Date: Wed, 12 Oct 2016 19:51:37 -0400
Subject: [PATCH 1317/1722] drm/amd/dal: Remove old irq gpio struct

Change-Id: Idc0fb9a7b3979ec9fc1dd3fbc884ddb3ef52e145
Signed-off-by: Harry Wentland <harry.wentland@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/core/dc_link.c          | 29 ++++++-----
 .../drm/amd/dal/dc/dce110/dce110_link_encoder.c    | 11 ++---
 drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.c     |  6 +--
 drivers/gpu/drm/amd/dal/dc/gpio/irq.c              | 56 +++++++++-------------
 drivers/gpu/drm/amd/dal/dc/gpio/irq.h              |  9 +---
 .../drm/amd/dal/include/gpio_service_interface.h   |  9 ++--
 drivers/gpu/drm/amd/dal/include/irq_interface.h    | 14 +++---
 7 files changed, 58 insertions(+), 76 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_link.c b/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
index 3c53767..21588be 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
@@ -91,8 +91,7 @@ static void destruct(struct core_link *link)
 		dc_sink_release(link->public.remote_sinks[i]);
 }
 
-static struct irq *get_hpd_gpio(
-		const struct core_link *link)
+static struct gpio *get_hpd_gpio(const struct core_link *link)
 {
 	enum bp_result bp_result;
 	struct dc_bios *dcb = link->ctx->dc_bios;
@@ -133,7 +132,7 @@ static bool program_hpd_filter(
 {
 	bool result = false;
 
-	struct irq *hpd;
+	struct gpio *hpd;
 
 	int delay_on_connect_in_ms = 0;
 	int delay_on_disconnect_in_ms = 0;
@@ -173,7 +172,7 @@ static bool program_hpd_filter(
 		return result;
 
 	/* Setup HPD filtering */
-	if (dal_irq_open(hpd) == GPIO_RESULT_OK) {
+	if (dal_gpio_open(hpd, GPIO_MODE_INTERRUPT) == GPIO_RESULT_OK) {
 		struct gpio_hpd_config config;
 
 		config.delay_on_connect = delay_on_connect_in_ms;
@@ -181,7 +180,7 @@ static bool program_hpd_filter(
 
 		dal_irq_setup_hpd_filter(hpd, &config);
 
-		dal_irq_close(hpd);
+		dal_gpio_close(hpd);
 
 		result = true;
 	} else {
@@ -189,7 +188,7 @@ static bool program_hpd_filter(
 	}
 
 	/* Release HPD handle */
-	dal_gpio_service_destroy_irq(&hpd);
+	dal_gpio_destroy_irq(&hpd);
 
 	return result;
 }
@@ -197,16 +196,16 @@ static bool program_hpd_filter(
 static bool detect_sink(struct core_link *link, enum dc_connection_type *type)
 {
 	uint32_t is_hpd_high = 0;
-	struct irq *hpd_pin;
+	struct gpio *hpd_pin;
 
 	/* todo: may need to lock gpio access */
 	hpd_pin = get_hpd_gpio(link);
 	if (hpd_pin == NULL)
 		goto hpd_gpio_failure;
 
-	dal_irq_open(hpd_pin);
-	dal_irq_get_value(hpd_pin, &is_hpd_high);
-	dal_irq_close(hpd_pin);
+	dal_gpio_open(hpd_pin, GPIO_MODE_INTERRUPT);
+	dal_gpio_get_value(hpd_pin, &is_hpd_high);
+	dal_gpio_close(hpd_pin);
 	dal_gpio_service_destroy_irq(&hpd_pin);
 
 	if (is_hpd_high) {
@@ -805,7 +804,7 @@ static enum hpd_source_id get_hpd_line(
 		struct core_link *link,
 		struct adapter_service *as)
 {
-	struct irq *hpd;
+	struct gpio *hpd;
 	enum hpd_source_id hpd_id = HPD_SOURCEID_UNKNOWN;
 
 	hpd = get_hpd_gpio(link);
@@ -835,7 +834,7 @@ static enum hpd_source_id get_hpd_line(
 		break;
 		}
 
-		dal_gpio_service_destroy_irq(&hpd);
+		dal_gpio_destroy_irq(&hpd);
 	}
 
 	return hpd_id;
@@ -954,7 +953,7 @@ static bool construct(
 {
 	uint8_t i;
 	struct adapter_service *as = init_params->adapter_srv;
-	struct irq *hpd_gpio = NULL;
+	struct gpio *hpd_gpio = NULL;
 	struct ddc_service_init_data ddc_service_init_data = { 0 };
 	struct dc_context *dc_ctx = init_params->ctx;
 	struct encoder_init_data enc_init_data = { 0 };
@@ -1022,7 +1021,7 @@ static bool construct(
 	}
 
 	if (hpd_gpio != NULL) {
-		dal_gpio_service_destroy_irq(&hpd_gpio);
+		dal_gpio_destroy_irq(&hpd_gpio);
 		hpd_gpio = NULL;
 	}
 
@@ -1124,7 +1123,7 @@ ddc_create_fail:
 create_fail:
 
 	if (hpd_gpio != NULL) {
-		dal_gpio_service_destroy_irq(&hpd_gpio);
+		dal_gpio_destroy_irq(&hpd_gpio);
 	}
 
 	return false;
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
index 1500dfc..29c485d 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
@@ -549,8 +549,7 @@ static bool is_panel_powered_on(struct dce110_link_encoder *enc110)
 
 
 /* TODO duplicate of dc_link.c version */
-static struct irq *get_hpd_gpio(
-		const struct link_encoder *enc)
+static struct gpio *get_hpd_gpio(const struct link_encoder *enc)
 {
 	enum bp_result bp_result;
 	struct dc_bios *dcb = enc->ctx->dc_bios;
@@ -585,7 +584,7 @@ static void link_encoder_edp_wait_for_hpd_ready(
 	struct dc_context *ctx = enc110->base.ctx;
 	struct adapter_service *as = enc110->base.adapter_service;
 	struct graphics_object_id connector = enc110->base.connector;
-	struct irq *hpd;
+	struct gpio *hpd;
 	bool edp_hpd_high = false;
 	uint32_t time_elapsed = 0;
 	uint32_t timeout = power_up ?
@@ -615,14 +614,14 @@ static void link_encoder_edp_wait_for_hpd_ready(
 		return;
 	}
 
-	dal_irq_open(hpd);
+	dal_gpio_open(hpd, GPIO_MODE_INTERRUPT);
 
 	/* wait until timeout or panel detected */
 
 	do {
 		uint32_t detected = 0;
 
-		dal_irq_get_value(hpd, &detected);
+		dal_gpio_get_value(hpd, &detected);
 
 		if (!(detected ^ power_up)) {
 			edp_hpd_high = true;
@@ -634,7 +633,7 @@ static void link_encoder_edp_wait_for_hpd_ready(
 		time_elapsed += HPD_CHECK_INTERVAL;
 	} while (time_elapsed < timeout);
 
-	dal_irq_close(hpd);
+	dal_gpio_close(hpd);
 
 	dal_gpio_service_destroy_irq(&hpd);
 
diff --git a/drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.c b/drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.c
index 8b4eba9..c68f578 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.c
+++ b/drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.c
@@ -195,7 +195,7 @@ void dal_gpio_service_destroy_ddc(
 	dal_gpio_destroy_ddc(ddc);
 }
 
-struct irq *dal_gpio_service_create_irq(
+struct gpio *dal_gpio_service_create_irq(
 	struct gpio_service *service,
 	uint32_t offset,
 	uint32_t mask)
@@ -211,7 +211,7 @@ struct irq *dal_gpio_service_create_irq(
 	return dal_gpio_create_irq(service, id, en);
 }
 
-struct irq *dal_gpio_service_create_irq_ex(
+struct gpio *dal_gpio_service_create_irq_ex(
 	struct gpio_service *service,
 	enum gpio_id id,
 	uint32_t en)
@@ -220,7 +220,7 @@ struct irq *dal_gpio_service_create_irq_ex(
 }
 
 void dal_gpio_service_destroy_irq(
-	struct irq **irq)
+	struct gpio **irq)
 {
 	dal_gpio_destroy_irq(irq);
 }
diff --git a/drivers/gpu/drm/amd/dal/dc/gpio/irq.c b/drivers/gpu/drm/amd/dal/dc/gpio/irq.c
index 4581ad4..708cfff 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpio/irq.c
+++ b/drivers/gpu/drm/amd/dal/dc/gpio/irq.c
@@ -52,51 +52,51 @@
  */
 
 enum gpio_result dal_irq_open(
-	struct irq *irq)
+	struct gpio *irq)
 {
-	return dal_gpio_open(irq->pin, GPIO_MODE_INTERRUPT);
+	return dal_gpio_open(irq, GPIO_MODE_INTERRUPT);
 }
 
 enum gpio_result dal_irq_get_value(
-	const struct irq *irq,
+	const struct gpio *irq,
 	uint32_t *value)
 {
-	return dal_gpio_get_value(irq->pin, value);
+	return dal_gpio_get_value(irq, value);
 }
 
 enum dc_irq_source dal_irq_get_source(
-	const struct irq *irq)
+	const struct gpio *irq)
 {
-	enum gpio_id id = dal_gpio_get_id(irq->pin);
+	enum gpio_id id = dal_gpio_get_id(irq);
 
 	switch (id) {
 	case GPIO_ID_HPD:
 		return (enum dc_irq_source)(DC_IRQ_SOURCE_HPD1 +
-			dal_gpio_get_enum(irq->pin));
+			dal_gpio_get_enum(irq));
 	case GPIO_ID_GPIO_PAD:
 		return (enum dc_irq_source)(DC_IRQ_SOURCE_GPIOPAD0 +
-			dal_gpio_get_enum(irq->pin));
+			dal_gpio_get_enum(irq));
 	default:
 		return DC_IRQ_SOURCE_INVALID;
 	}
 }
 
 enum dc_irq_source dal_irq_get_rx_source(
-	const struct irq *irq)
+	const struct gpio *irq)
 {
-	enum gpio_id id = dal_gpio_get_id(irq->pin);
+	enum gpio_id id = dal_gpio_get_id(irq);
 
 	switch (id) {
 	case GPIO_ID_HPD:
 		return (enum dc_irq_source)(DC_IRQ_SOURCE_HPD1RX +
-			dal_gpio_get_enum(irq->pin));
+			dal_gpio_get_enum(irq));
 	default:
 		return DC_IRQ_SOURCE_INVALID;
 	}
 }
 
 enum gpio_result dal_irq_setup_hpd_filter(
-	struct irq *irq,
+	struct gpio *irq,
 	struct gpio_hpd_config *config)
 {
 	struct gpio_config_data config_data;
@@ -107,13 +107,13 @@ enum gpio_result dal_irq_setup_hpd_filter(
 	config_data.type = GPIO_CONFIG_TYPE_HPD;
 	config_data.config.hpd = *config;
 
-	return dal_gpio_set_config(irq->pin, &config_data);
+	return dal_gpio_set_config(irq, &config_data);
 }
 
 void dal_irq_close(
-	struct irq *irq)
+	struct gpio *irq)
 {
-	dal_gpio_close(irq->pin);
+	dal_gpio_close(irq);
 }
 
 /*
@@ -121,12 +121,12 @@ void dal_irq_close(
  * Creation and destruction
  */
 
-struct irq *dal_gpio_create_irq(
+struct gpio *dal_gpio_create_irq(
 	struct gpio_service *service,
 	enum gpio_id id,
 	uint32_t en)
 {
-	struct irq *irq;
+	struct gpio *irq;
 
 	switch (id) {
 	case GPIO_ID_HPD:
@@ -137,35 +137,25 @@ struct irq *dal_gpio_create_irq(
 		return NULL;
 	}
 
-	irq = dm_alloc(sizeof(struct irq));
-
-	if (!irq) {
-		ASSERT_CRITICAL(false);
-		return NULL;
-	}
-
-	irq->pin = dal_gpio_service_create_gpio_ex(
+	irq = dal_gpio_service_create_gpio_ex(
 		service, id, en, GPIO_PIN_OUTPUT_STATE_DEFAULT);
 
-	if (irq->pin)
+	if (irq)
 		return irq;
 
 	ASSERT_CRITICAL(false);
-
-	dm_free(irq);
-
 	return NULL;
 }
 
-static void destruct(struct irq *irq)
+static void destruct(struct gpio *irq)
 {
-	dal_irq_close(irq);
-	dal_gpio_service_destroy_gpio(&irq->pin);
+	dal_gpio_close(irq);
+	dal_gpio_service_destroy_gpio(&irq);
 
 }
 
 void dal_gpio_destroy_irq(
-	struct irq **irq)
+	struct gpio **irq)
 {
 	if (!irq || !*irq) {
 		ASSERT_CRITICAL(false);
diff --git a/drivers/gpu/drm/amd/dal/dc/gpio/irq.h b/drivers/gpu/drm/amd/dal/dc/gpio/irq.h
index 2fb1cce..8a016a1 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpio/irq.h
+++ b/drivers/gpu/drm/amd/dal/dc/gpio/irq.h
@@ -26,16 +26,9 @@
 #ifndef __DAL_IRQ_H__
 #define __DAL_IRQ_H__
 
-struct irq {
-	struct gpio *pin;
-};
-
-struct irq *dal_gpio_create_irq(
+struct gpio *dal_gpio_create_irq(
 	struct gpio_service *service,
 	enum gpio_id id,
 	uint32_t en);
 
-void dal_gpio_destroy_irq(
-	struct irq **ptr);
-
 #endif
diff --git a/drivers/gpu/drm/amd/dal/include/gpio_service_interface.h b/drivers/gpu/drm/amd/dal/include/gpio_service_interface.h
index 3f1b923..06e2294 100644
--- a/drivers/gpu/drm/amd/dal/include/gpio_service_interface.h
+++ b/drivers/gpu/drm/amd/dal/include/gpio_service_interface.h
@@ -62,20 +62,23 @@ struct ddc *dal_gpio_service_create_ddc(
 void dal_gpio_service_destroy_ddc(
 	struct ddc **ddc);
 
-struct irq *dal_gpio_service_create_irq(
+struct gpio *dal_gpio_service_create_irq(
 	struct gpio_service *service,
 	uint32_t offset,
 	uint32_t mask);
 
-struct irq *dal_gpio_service_create_irq_ex(
+struct gpio *dal_gpio_service_create_irq_ex(
 	struct gpio_service *service,
 	enum gpio_id id,
 	uint32_t en);
 
 void dal_gpio_service_destroy_irq(
-	struct irq **ptr);
+	struct gpio **ptr);
 
 void dal_gpio_service_destroy(
 	struct gpio_service **ptr);
 
+void dal_gpio_destroy_irq(
+	struct gpio **ptr);
+
 #endif
diff --git a/drivers/gpu/drm/amd/dal/include/irq_interface.h b/drivers/gpu/drm/amd/dal/include/irq_interface.h
index 0faa48f..94909d1 100644
--- a/drivers/gpu/drm/amd/dal/include/irq_interface.h
+++ b/drivers/gpu/drm/amd/dal/include/irq_interface.h
@@ -28,26 +28,24 @@
 
 #include "gpio_types.h"
 
-struct irq;
-
 enum gpio_result dal_irq_open(
-	struct irq *irq);
+	struct gpio *irq);
 
 enum gpio_result dal_irq_get_value(
-	const struct irq *irq,
+	const struct gpio *irq,
 	uint32_t *value);
 
 enum dc_irq_source dal_irq_get_source(
-	const struct irq *irq);
+	const struct gpio *irq);
 
 enum dc_irq_source dal_irq_get_rx_source(
-	const struct irq *irq);
+	const struct gpio *irq);
 
 enum gpio_result dal_irq_setup_hpd_filter(
-	struct irq *irq,
+	struct gpio *irq,
 	struct gpio_hpd_config *config);
 
 void dal_irq_close(
-	struct irq *irq);
+	struct gpio *irq);
 
 #endif
-- 
2.7.4

