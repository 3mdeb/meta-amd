From f3680b4b19cc694e65043becfa2e0a0a3b39486f Mon Sep 17 00:00:00 2001
From: Harry Wentland <harry.wentland@amd.com>
Date: Thu, 16 Mar 2017 11:34:57 -0400
Subject: [PATCH 2467/3082] Revert "drm/amd/display: decouple per-crtc-plane
 model"

This reverts commit 15eb6041a2fc6e92939393aa8b8a6231fe4b4238.
---
 drivers/gpu/drm/amd/amdgpu/amdgpu_mode.h           |  8 --
 drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c  | 67 ++++-------------
 .../drm/amd/display/amdgpu_dm/amdgpu_dm_types.c    | 85 +++++++++++-----------
 .../drm/amd/display/amdgpu_dm/amdgpu_dm_types.h    |  5 +-
 drivers/gpu/drm/amd/display/dc/dc.h                |  1 -
 5 files changed, 58 insertions(+), 108 deletions(-)

diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_mode.h b/drivers/gpu/drm/amd/amdgpu/amdgpu_mode.h
index da3b125..3148412 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_mode.h
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_mode.h
@@ -59,7 +59,6 @@ struct amdgpu_hpd;
 
 #define AMDGPU_MAX_HPD_PINS 6
 #define AMDGPU_MAX_CRTCS 6
-#define AMDGPU_MAX_PLANES 6
 #define AMDGPU_MAX_AFMT_BLOCKS 9
 
 enum amdgpu_rmx_type {
@@ -339,7 +338,6 @@ struct amdgpu_mode_info {
 	struct card_info *atom_card_info;
 	bool mode_config_initialized;
 	struct amdgpu_crtc *crtcs[AMDGPU_MAX_CRTCS];
-	struct amdgpu_plane *planes[AMDGPU_MAX_PLANES];
 	struct amdgpu_afmt *afmt[AMDGPU_MAX_AFMT_BLOCKS];
 	/* DVI-I properties */
 	struct drm_property *coherent_mode_property;
@@ -373,7 +371,6 @@ struct amdgpu_mode_info {
 	int			num_dig; /* number of dig blocks */
 	int			disp_priority;
 	const struct amdgpu_display_funcs *funcs;
-	enum drm_plane_type *plane_type;
 };
 
 #define AMDGPU_MAX_BL_LEVEL 0xFF
@@ -455,11 +452,6 @@ struct amdgpu_crtc {
 	struct drm_pending_vblank_event *event;
 };
 
-struct amdgpu_plane {
-	struct drm_plane base;
-	enum drm_plane_type plane_type;
-};
-
 struct amdgpu_encoder_atom_dig {
 	bool linkb;
 	/* atom dig */
diff --git a/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c b/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c
index be9581d..59aafba 100644
--- a/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c
+++ b/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm.c
@@ -55,28 +55,6 @@
 
 #include "modules/inc/mod_freesync.h"
 
-static enum drm_plane_type dm_surfaces_type_default[AMDGPU_MAX_PLANES] = {
-	DRM_PLANE_TYPE_PRIMARY,
-	DRM_PLANE_TYPE_PRIMARY,
-	DRM_PLANE_TYPE_PRIMARY,
-	DRM_PLANE_TYPE_PRIMARY,
-	DRM_PLANE_TYPE_PRIMARY,
-	DRM_PLANE_TYPE_PRIMARY,
-};
-
-static enum drm_plane_type dm_surfaces_type_carizzo[AMDGPU_MAX_PLANES] = {
-	DRM_PLANE_TYPE_PRIMARY,
-	DRM_PLANE_TYPE_PRIMARY,
-	DRM_PLANE_TYPE_PRIMARY,
-	DRM_PLANE_TYPE_OVERLAY,/* YUV Capable Underlay */
-};
-
-static enum drm_plane_type dm_surfaces_type_stoney[AMDGPU_MAX_PLANES] = {
-	DRM_PLANE_TYPE_PRIMARY,
-	DRM_PLANE_TYPE_PRIMARY,
-	DRM_PLANE_TYPE_OVERLAY, /* YUV Capable Underlay */
-};
-
 /*
  * dm_vblank_get_counter
  *
@@ -1080,34 +1058,30 @@ int amdgpu_dm_initialize_drm_device(struct amdgpu_device *adev)
 	uint32_t i;
 	struct amdgpu_connector *aconnector;
 	struct amdgpu_encoder *aencoder;
-	struct amdgpu_mode_info *mode_info = &adev->mode_info;
+	struct amdgpu_crtc *acrtc;
 	uint32_t link_cnt;
 
 	link_cnt = dm->dc->caps.max_links;
+
 	if (amdgpu_dm_mode_config_init(dm->adev)) {
 		DRM_ERROR("DM: Failed to initialize mode config\n");
-		goto fail;
+		return -1;
 	}
 
-	for (i = 0; i < dm->dc->caps.max_surfaces; i++) {
-		mode_info->planes[i] = kzalloc(sizeof(struct amdgpu_plane),
-								 GFP_KERNEL);
-		if (!mode_info->planes[i]) {
-			DRM_ERROR("KMS: Failed to allocate surface\n");
-			goto fail_free_planes;
-		}
-		mode_info->planes[i]->plane_type = mode_info->plane_type[i];
-		if (amdgpu_dm_plane_init(dm, mode_info->planes[i], 1)) {
-			DRM_ERROR("KMS: Failed to initialize plane\n");
-			goto fail_free_planes;
-		}
-	}
+	for (i = 0; i < dm->dc->caps.max_streams; i++) {
+		acrtc = kzalloc(sizeof(struct amdgpu_crtc), GFP_KERNEL);
+		if (!acrtc)
+			goto fail;
 
-	for (i = 0; i < dm->dc->caps.max_streams; i++)
-		if (amdgpu_dm_crtc_init(dm, &mode_info->planes[i]->base, i)) {
+		if (amdgpu_dm_crtc_init(
+			dm,
+			acrtc,
+			i)) {
 			DRM_ERROR("KMS: Failed to initialize crtc\n");
-			goto fail_free_planes;
+			kfree(acrtc);
+			goto fail;
 		}
+	}
 
 	dm->display_indexes_num = dm->dc->caps.max_streams;
 
@@ -1158,12 +1132,12 @@ int amdgpu_dm_initialize_drm_device(struct amdgpu_device *adev)
 	case CHIP_VEGA10:
 		if (dce110_register_irq_handlers(dm->adev)) {
 			DRM_ERROR("DM: Failed to initialize IRQ\n");
-			goto fail_free_encoder;
+			return -1;
 		}
 		break;
 	default:
 		DRM_ERROR("Usupported ASIC type: 0x%X\n", adev->asic_type);
-		goto fail_free_encoder;
+		return -1;
 	}
 
 	drm_mode_config_reset(dm->ddev);
@@ -1173,9 +1147,6 @@ fail_free_encoder:
 	kfree(aencoder);
 fail_free_connector:
 	kfree(aconnector);
-fail_free_planes:
-	for (i = 0; i < dm->dc->caps.max_surfaces; i++)
-		kfree(mode_info->planes[i]);
 fail:
 	return -1;
 }
@@ -1567,7 +1538,6 @@ static int dm_early_init(void *handle)
 		adev->mode_info.num_crtc = 6;
 		adev->mode_info.num_hpd = 6;
 		adev->mode_info.num_dig = 6;
-		adev->mode_info.plane_type = dm_surfaces_type_default;
 #ifdef CONFIG_DRM_AMDGPU_CIK
 		if (adev->mode_info.funcs == NULL)
 			adev->mode_info.funcs = &dm_dce_v8_0_display_funcs;
@@ -1578,7 +1548,6 @@ static int dm_early_init(void *handle)
 		adev->mode_info.num_crtc = 6;
 		adev->mode_info.num_hpd = 6;
 		adev->mode_info.num_dig = 7;
-		adev->mode_info.plane_type = dm_surfaces_type_default;
 		if (adev->mode_info.funcs == NULL)
 			adev->mode_info.funcs = &dm_dce_v10_0_display_funcs;
 		break;
@@ -1586,7 +1555,6 @@ static int dm_early_init(void *handle)
 		adev->mode_info.num_crtc = 3;
 		adev->mode_info.num_hpd = 6;
 		adev->mode_info.num_dig = 9;
-		adev->mode_info.plane_type = dm_surfaces_type_carizzo;
 		if (adev->mode_info.funcs == NULL)
 			adev->mode_info.funcs = &dm_dce_v11_0_display_funcs;
 		break;
@@ -1594,7 +1562,6 @@ static int dm_early_init(void *handle)
 		adev->mode_info.num_crtc = 2;
 		adev->mode_info.num_hpd = 6;
 		adev->mode_info.num_dig = 9;
-		adev->mode_info.plane_type = dm_surfaces_type_stoney;
 		if (adev->mode_info.funcs == NULL)
 			adev->mode_info.funcs = &dm_dce_v11_0_display_funcs;
 		break;
@@ -1603,7 +1570,6 @@ static int dm_early_init(void *handle)
 		adev->mode_info.num_crtc = 5;
 		adev->mode_info.num_hpd = 5;
 		adev->mode_info.num_dig = 5;
-		adev->mode_info.plane_type = dm_surfaces_type_default;
 		if (adev->mode_info.funcs == NULL)
 			adev->mode_info.funcs = &dm_dce_v11_0_display_funcs;
 		break;
@@ -1611,7 +1577,6 @@ static int dm_early_init(void *handle)
 		adev->mode_info.num_crtc = 6;
 		adev->mode_info.num_hpd = 6;
 		adev->mode_info.num_dig = 6;
-		adev->mode_info.plane_type = dm_surfaces_type_default;
 		if (adev->mode_info.funcs == NULL)
 			adev->mode_info.funcs = &dm_dce_v11_0_display_funcs;
 		break;
diff --git a/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_types.c b/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_types.c
index 8985d2c..b427131 100644
--- a/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_types.c
+++ b/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_types.c
@@ -1813,50 +1813,46 @@ static uint32_t rgb_formats[] = {
 	DRM_FORMAT_ABGR2101010,
 };
 
-static uint32_t yuv_formats[] = {
-        DRM_FORMAT_YUYV,
-        DRM_FORMAT_YVYU,
-        DRM_FORMAT_UYVY,
-        DRM_FORMAT_VYUY,
-};
-
-int amdgpu_dm_plane_init(struct amdgpu_display_manager *dm,
-                        struct amdgpu_plane *aplane,
-                        unsigned long possible_crtcs)
+int amdgpu_dm_crtc_init(struct amdgpu_display_manager *dm,
+                         struct amdgpu_crtc *acrtc,
+                         uint32_t crtc_index)
 {
         int res = -ENOMEM;
 
-        switch (aplane->plane_type) {
-        case DRM_PLANE_TYPE_PRIMARY:
-                aplane->base.format_default = true;
-
-                res = drm_universal_plane_init(
-                                dm->adev->ddev,
-                                &aplane->base,
-                                possible_crtcs,
-                                &dm_plane_funcs,
-                                rgb_formats,
-                                ARRAY_SIZE(rgb_formats),
-                                aplane->plane_type, NULL);
-                break;
-        case DRM_PLANE_TYPE_OVERLAY:
-                res = drm_universal_plane_init(
-                                dm->adev->ddev,
-                                &aplane->base,
-                                possible_crtcs,
-                                &dm_plane_funcs,
-                                yuv_formats,
-                                ARRAY_SIZE(yuv_formats),
-                                aplane->plane_type, NULL);
-                break;
-        case DRM_PLANE_TYPE_CURSOR:
-                break;
-        }
-
-        drm_plane_helper_add(&aplane->base, &dm_plane_helper_funcs);
-
-        return 0;
-
+        struct drm_plane *primary_plane =
+                kzalloc(sizeof(*primary_plane), GFP_KERNEL);
+
+        if (!primary_plane)
+                 goto fail_plane;
+        primary_plane->format_default = true;
+
+        res = drm_universal_plane_init(
+                 dm->adev->ddev,
+                 primary_plane,
+                 0,
+                 &dm_plane_funcs,
+                 rgb_formats,
+                 ARRAY_SIZE(rgb_formats),
+                 DRM_PLANE_TYPE_PRIMARY, NULL);
+ 
+        primary_plane->crtc = &acrtc->base;
+ 
+        drm_plane_helper_add(primary_plane, &dm_plane_helper_funcs);
+ 
+        res = drm_crtc_init_with_planes(
+                         dm->ddev,
+                         &acrtc->base,
+                        primary_plane,
+                          NULL,
+                         &amdgpu_dm_crtc_funcs, NULL);
+ 
+ 
+        res = drm_crtc_init_with_planes(
+                         dm->ddev,
+                         &acrtc->base,
+                         primary_plane,
+                         NULL,
+                         &amdgpu_dm_crtc_funcs, NULL);
 }
 
 int amdgpu_dm_crtc_init(struct amdgpu_display_manager *dm,
@@ -1901,15 +1897,16 @@ int amdgpu_dm_crtc_init(struct amdgpu_display_manager *dm,
 	acrtc->max_cursor_width = 128;
 	acrtc->max_cursor_height = 128;
 
-	acrtc->crtc_id = crtc_index;
+        acrtc->crtc_id = crtc_index;
 	acrtc->base.enabled = false;
 
-	dm->adev->mode_info.crtcs[crtc_index] = acrtc;
+        dm->adev->mode_info.crtcs[crtc_index] = acrtc;
 	drm_mode_crtc_set_gamma_size(&acrtc->base, 256);
 
 	return 0;
 fail:
-	kfree(acrtc);
+        kfree(primary_plane);
+fail_plane:
 	acrtc->crtc_id = -1;
 	return res;
 }
diff --git a/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_types.h b/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_types.h
index ab6d51d..1bbeb87 100644
--- a/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_types.h
+++ b/drivers/gpu/drm/amd/display/amdgpu_dm/amdgpu_dm_types.h
@@ -34,11 +34,8 @@ struct dc_validation_set;
 struct dc_surface;
 
 /*TODO Jodan Hersen use the one in amdgpu_dm*/
-int amdgpu_dm_plane_init(struct amdgpu_display_manager *dm,
-			struct amdgpu_plane *aplane,
-			unsigned long possible_crtcs);
 int amdgpu_dm_crtc_init(struct amdgpu_display_manager *dm,
-			struct drm_plane *plane,
+			struct amdgpu_crtc *amdgpu_crtc,
 			uint32_t link_index);
 int amdgpu_dm_connector_init(struct amdgpu_display_manager *dm,
 			struct amdgpu_connector *amdgpu_connector,
diff --git a/drivers/gpu/drm/amd/display/dc/dc.h b/drivers/gpu/drm/amd/display/dc/dc.h
index fa8a43c..106addc 100644
--- a/drivers/gpu/drm/amd/display/dc/dc.h
+++ b/drivers/gpu/drm/amd/display/dc/dc.h
@@ -45,7 +45,6 @@ struct dc_caps {
 	uint32_t max_links;
 	uint32_t max_audios;
 	uint32_t max_slave_planes;
-	uint32_t max_surfaces;
 	uint32_t max_downscale_ratio;
 	uint32_t i2c_speed_in_khz;
 
-- 
2.7.4

