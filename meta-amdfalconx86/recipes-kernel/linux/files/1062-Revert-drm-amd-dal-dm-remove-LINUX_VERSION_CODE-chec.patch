From af51b260432f89486b5e5a1179122ae74c08b55f Mon Sep 17 00:00:00 2001
From: Alex Deucher <alexander.deucher@amd.com>
Date: Thu, 28 Apr 2016 15:37:12 -0400
Subject: [PATCH 1062/1110] Revert "drm/amd/dal/dm: remove LINUX_VERSION_CODE
 checks"

This reverts commit ed7a3875d5c335511580da9e4be9896f9210d244.
---
 .../gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_helpers.c  | 26 ++++++++++++++++++++++
 .../drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c    |  4 ++++
 .../gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c    |  3 +++
 3 files changed, 33 insertions(+)

diff --git a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_helpers.c b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_helpers.c
index 434fc5c..f85f55f 100644
--- a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_helpers.c
+++ b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_helpers.c
@@ -136,6 +136,7 @@ enum dc_edid_status dm_helpers_parse_edid_caps(
 	return result;
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 3, 0)
 static struct amdgpu_connector *get_connector_for_sink(
 	struct drm_device *dev,
 	const struct dc_sink *sink)
@@ -151,6 +152,7 @@ static struct amdgpu_connector *get_connector_for_sink(
 
 	return aconnector;
 }
+#endif
 
 static struct amdgpu_connector *get_connector_for_link(
 	struct drm_device *dev,
@@ -168,6 +170,7 @@ static struct amdgpu_connector *get_connector_for_link(
 	return aconnector;
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 3, 0)
 static void get_payload_table(
 		struct amdgpu_connector *aconnector,
 		struct dp_mst_stream_allocation_table *proposed_table)
@@ -204,6 +207,7 @@ static void get_payload_table(
 
 	mutex_unlock(&mst_mgr->payload_lock);
 }
+#endif
 
 /*
  * Writes payload allocation table in immediate downstream device.
@@ -214,6 +218,7 @@ bool dm_helpers_dp_mst_write_payload_allocation_table(
 		struct dp_mst_stream_allocation_table *proposed_table,
 		bool enable)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 3, 0)
 	struct amdgpu_device *adev = ctx->driver_context;
 	struct drm_device *dev = adev->ddev;
 	struct amdgpu_connector *aconnector;
@@ -293,6 +298,9 @@ bool dm_helpers_dp_mst_write_payload_allocation_table(
 		return false;
 
 	return true;
+#else
+	return false;
+#endif
 }
 
 /*
@@ -303,6 +311,7 @@ bool dm_helpers_dp_mst_poll_for_allocation_change_trigger(
 		struct dc_context *ctx,
 		const struct dc_stream *stream)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 3, 0)
 	struct amdgpu_device *adev = ctx->driver_context;
 	struct drm_device *dev = adev->ddev;
 	struct amdgpu_connector *aconnector;
@@ -325,6 +334,9 @@ bool dm_helpers_dp_mst_poll_for_allocation_change_trigger(
 		return false;
 
 	return true;
+#else
+	return false;
+#endif
 }
 
 bool dm_helpers_dp_mst_send_payload_allocation(
@@ -332,6 +344,7 @@ bool dm_helpers_dp_mst_send_payload_allocation(
 		const struct dc_stream *stream,
 		bool enable)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 3, 0)
 	struct amdgpu_device *adev = ctx->driver_context;
 	struct drm_device *dev = adev->ddev;
 	struct amdgpu_connector *aconnector;
@@ -360,10 +373,14 @@ bool dm_helpers_dp_mst_send_payload_allocation(
 		drm_dp_mst_deallocate_vcpi(mst_mgr, mst_port);
 
 	return true;
+#else
+	return false;
+#endif
 }
 
 void dm_helpers_dp_mst_handle_mst_hpd_rx_irq(void *param)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 3, 0)
 	uint8_t esi[8] = { 0 };
 	uint8_t dret;
 	bool new_irq_handled = true;
@@ -402,6 +419,9 @@ void dm_helpers_dp_mst_handle_mst_hpd_rx_irq(void *param)
 				DP_SINK_COUNT_ESI, esi, 8);
 		}
 	}
+#else
+	return false;
+#endif
 }
 
 bool dm_helpers_dp_mst_start_top_mgr(
@@ -409,6 +429,7 @@ bool dm_helpers_dp_mst_start_top_mgr(
 		const struct dc_link *link,
 		bool boot)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 3, 0)
 	struct amdgpu_device *adev = ctx->driver_context;
 	struct drm_device *dev = adev->ddev;
 	struct amdgpu_connector *aconnector = get_connector_for_link(dev, link);
@@ -423,12 +444,16 @@ bool dm_helpers_dp_mst_start_top_mgr(
 			aconnector, aconnector->base.base.id);
 
 	return (drm_dp_mst_topology_mgr_set_mst(&aconnector->mst_mgr, true) == 0);
+#else
+	return false;
+#endif
 }
 
 void dm_helpers_dp_mst_stop_top_mgr(
 		struct dc_context *ctx,
 		const struct dc_link *link)
 {
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 3, 0)
 	struct amdgpu_device *adev = ctx->driver_context;
 	struct drm_device *dev = adev->ddev;
 	struct amdgpu_connector *aconnector = get_connector_for_link(dev, link);
@@ -438,6 +463,7 @@ void dm_helpers_dp_mst_stop_top_mgr(
 
 	if (aconnector->mst_mgr.mst_state == true)
 		drm_dp_mst_topology_mgr_set_mst(&aconnector->mst_mgr, false);
+#endif
 }
 
 bool dm_helpers_dp_read_dpcd(
diff --git a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c
index d73b246..9468c52 100644
--- a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c
+++ b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c
@@ -115,6 +115,7 @@ static ssize_t dm_dp_aux_transfer(struct drm_dp_aux *aux, struct drm_dp_aux_msg
 	return msg->size;
 }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 3, 0)
 static enum drm_connector_status
 dm_dp_mst_detect(struct drm_connector *connector, bool force)
 {
@@ -466,6 +467,7 @@ struct drm_dp_mst_topology_cbs dm_mst_cbs = {
 	.hotplug = dm_dp_mst_hotplug,
 	.register_connector = dm_dp_mst_register_connector
 };
+#endif
 
 void amdgpu_dm_initialize_mst_connector(
 	struct amdgpu_display_manager *dm,
@@ -477,6 +479,7 @@ void amdgpu_dm_initialize_mst_connector(
 	aconnector->dm_dp_aux.link_index = aconnector->connector_id;
 
 	drm_dp_aux_register(&aconnector->dm_dp_aux.aux);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 3, 0)
 	aconnector->mst_mgr.cbs = &dm_mst_cbs;
 	drm_dp_mst_topology_mgr_init(
 		&aconnector->mst_mgr,
@@ -485,5 +488,6 @@ void amdgpu_dm_initialize_mst_connector(
 		16,
 		4,
 		aconnector->connector_id);
+#endif
 }
 
diff --git a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c
index 205d4a4..669b1ff 100644
--- a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c
+++ b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c
@@ -1514,7 +1514,10 @@ int amdgpu_dm_crtc_init(struct amdgpu_display_manager *dm,
 	if (!primary_plane)
 		goto fail_plane;
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 3, 0)
+	/* this flag doesn't exist in older kernels */
 	primary_plane->format_default = true;
+#endif
 
 	res = drm_universal_plane_init(
 		dm->adev->ddev,
-- 
2.7.4

