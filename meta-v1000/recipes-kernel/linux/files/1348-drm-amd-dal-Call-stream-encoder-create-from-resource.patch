From 4cf266e7c1abf432144f8068657ab00f77a50ccf Mon Sep 17 00:00:00 2001
From: Zeyu Fan <Zeyu.Fan@amd.com>
Date: Tue, 18 Oct 2016 19:06:13 -0400
Subject: [PATCH 1348/1722] drm/amd/dal: Call stream encoder create from
 resource_construct.

Change-Id: I983c70e3065073c8a162bdffe60b61bf06d72e80
Signed-off-by: Zeyu Fan <Zeyu.Fan@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/core/dc_resource.c      | 11 +++++++
 .../gpu/drm/amd/dal/dc/dce100/dce100_resource.c    | 33 ++++++---------------
 .../gpu/drm/amd/dal/dc/dce110/dce110_resource.c    | 34 +++++++---------------
 .../gpu/drm/amd/dal/dc/dce112/dce112_resource.c    | 33 ++++++---------------
 drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c  | 33 ++++++---------------
 drivers/gpu/drm/amd/dal/dc/inc/resource.h          |  5 ++++
 6 files changed, 53 insertions(+), 96 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c b/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
index bcb8e6e..4493971 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
@@ -170,6 +170,17 @@ bool resource_construct(
 		pool->audio_count++;
 	}
 
+
+	for (i = 0; i < pool->stream_enc_count; i++) {
+		/* TODO: rework fragile code*/
+		if (pool->stream_engines.u_all & 1 << i) {
+			pool->stream_enc[i] = create_funcs->create_stream_encoder(
+				i, ctx);
+			if (pool->stream_enc[i] == NULL)
+				DC_ERR("DC: failed to create stream_encoder!\n");
+		}
+	}
+
 	for (i = 0; i < num_virtual_links; i++) {
 		pool->stream_enc[pool->stream_enc_count] =
 			virtual_stream_encoder_create(
diff --git a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
index d677955..a776026 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
@@ -392,11 +392,6 @@ static struct audio *create_audio(
 			&audio_regs[inst], &audio_shift, &audio_mask);
 }
 
-static const struct resource_create_funcs res_create_funcs = {
-	.read_dce_straps = read_dce_straps,
-	.create_audio = create_audio,
-};
-
 static struct timing_generator *dce100_timing_generator_create(
 		struct adapter_service *as,
 		struct dc_context *ctx,
@@ -420,9 +415,7 @@ static struct timing_generator *dce100_timing_generator_create(
 
 static struct stream_encoder *dce100_stream_encoder_create(
 	enum engine_id eng_id,
-	struct dc_context *ctx,
-	struct dc_bios *bp,
-	const struct dce110_stream_enc_registers *regs)
+	struct dc_context *ctx)
 {
 	struct dce110_stream_encoder *enc110 =
 		dm_alloc(sizeof(struct dce110_stream_encoder));
@@ -430,7 +423,8 @@ static struct stream_encoder *dce100_stream_encoder_create(
 	if (!enc110)
 		return NULL;
 
-	if (dce110_stream_encoder_construct(enc110, ctx, bp, eng_id, regs))
+	if (dce110_stream_encoder_construct(
+			enc110, ctx, ctx->dc_bios, eng_id, &stream_enc_regs[eng_id]))
 		return &enc110->base;
 
 	BREAK_TO_DEBUGGER();
@@ -438,6 +432,12 @@ static struct stream_encoder *dce100_stream_encoder_create(
 	return NULL;
 }
 
+static const struct resource_create_funcs res_create_funcs = {
+	.read_dce_straps = read_dce_straps,
+	.create_audio = create_audio,
+	.create_stream_encoder = dce100_stream_encoder_create
+};
+
 static struct mem_input *dce100_mem_input_create(
 	struct dc_context *ctx,
 	struct adapter_service *as,
@@ -999,21 +999,6 @@ static bool construct(
 		}
 	}
 
-	for (i = 0; i < pool->base.stream_enc_count; i++) {
-		/* TODO: rework fragile code*/
-		if (pool->base.stream_engines.u_all & 1 << i) {
-			pool->base.stream_enc[i] = dce100_stream_encoder_create(
-				i, ctx,
-				ctx->dc_bios,
-				&stream_enc_regs[i]);
-			if (pool->base.stream_enc[i] == NULL) {
-				BREAK_TO_DEBUGGER();
-				dm_error("DC: failed to create stream_encoder!\n");
-				goto res_create_fail;
-			}
-		}
-	}
-
 	if (!resource_construct(num_virtual_links, dc, &pool->base,
 			&res_cap, &res_create_funcs))
 		goto res_create_fail;
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
index ff0b535..18ee44e 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
@@ -362,11 +362,6 @@ static struct audio *create_audio(
 			&audio_regs[inst], &audio_shift, &audio_mask);
 }
 
-static const struct resource_create_funcs res_create_funcs = {
-	.read_dce_straps = read_dce_straps,
-	.create_audio = create_audio,
-};
-
 static struct timing_generator *dce110_timing_generator_create(
 		struct adapter_service *as,
 		struct dc_context *ctx,
@@ -389,9 +384,7 @@ static struct timing_generator *dce110_timing_generator_create(
 
 static struct stream_encoder *dce110_stream_encoder_create(
 	enum engine_id eng_id,
-	struct dc_context *ctx,
-	struct dc_bios *bp,
-	const struct dce110_stream_enc_registers *regs)
+	struct dc_context *ctx)
 {
 	struct dce110_stream_encoder *enc110 =
 		dm_alloc(sizeof(struct dce110_stream_encoder));
@@ -399,7 +392,8 @@ static struct stream_encoder *dce110_stream_encoder_create(
 	if (!enc110)
 		return NULL;
 
-	if (dce110_stream_encoder_construct(enc110, ctx, bp, eng_id, regs))
+	if (dce110_stream_encoder_construct(
+			enc110, ctx, ctx->dc_bios, eng_id, &stream_enc_regs[eng_id]))
 		return &enc110->base;
 
 	BREAK_TO_DEBUGGER();
@@ -407,6 +401,13 @@ static struct stream_encoder *dce110_stream_encoder_create(
 	return NULL;
 }
 
+static const struct resource_create_funcs res_create_funcs = {
+	.read_dce_straps = read_dce_straps,
+	.create_audio = create_audio,
+	.create_stream_encoder = dce110_stream_encoder_create
+};
+
+
 static struct mem_input *dce110_mem_input_create(
 	struct dc_context *ctx,
 	struct adapter_service *as,
@@ -1306,21 +1307,6 @@ static bool construct(
 
 	underlay_create(ctx, &pool->base);
 
-	for (i = 0; i < pool->base.stream_enc_count; i++) {
-		/* TODO: rework fragile code*/
-		if (pool->base.stream_engines.u_all & 1 << i) {
-			pool->base.stream_enc[i] = dce110_stream_encoder_create(
-				i, ctx,
-				ctx->dc_bios,
-				&stream_enc_regs[i]);
-			if (pool->base.stream_enc[i] == NULL) {
-				BREAK_TO_DEBUGGER();
-				dm_error("DC: failed to create stream_encoder!\n");
-				goto res_create_fail;
-			}
-		}
-	}
-
 	if (!resource_construct(num_virtual_links, dc, &pool->base,
 			&res_cap, &res_create_funcs))
 		goto res_create_fail;
diff --git a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
index 063eca7..f4f7645 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
@@ -409,10 +409,6 @@ static struct audio *create_audio(
 			&audio_regs[inst], &audio_shift, &audio_mask);
 }
 
-static const struct resource_create_funcs res_create_funcs = {
-	.read_dce_straps = read_dce_straps,
-	.create_audio = create_audio,
-};
 
 static struct timing_generator *dce112_timing_generator_create(
 		struct adapter_service *as,
@@ -436,9 +432,7 @@ static struct timing_generator *dce112_timing_generator_create(
 
 static struct stream_encoder *dce112_stream_encoder_create(
 	enum engine_id eng_id,
-	struct dc_context *ctx,
-	struct dc_bios *bp,
-	const struct dce110_stream_enc_registers *regs)
+	struct dc_context *ctx)
 {
 	struct dce110_stream_encoder *enc110 =
 		dm_alloc(sizeof(struct dce110_stream_encoder));
@@ -446,7 +440,8 @@ static struct stream_encoder *dce112_stream_encoder_create(
 	if (!enc110)
 		return NULL;
 
-	if (dce110_stream_encoder_construct(enc110, ctx, bp, eng_id, regs))
+	if (dce110_stream_encoder_construct(
+			enc110, ctx, ctx->dc_bios, eng_id, &stream_enc_regs[eng_id]))
 		return &enc110->base;
 
 	BREAK_TO_DEBUGGER();
@@ -454,6 +449,12 @@ static struct stream_encoder *dce112_stream_encoder_create(
 	return NULL;
 }
 
+static const struct resource_create_funcs res_create_funcs = {
+	.read_dce_straps = read_dce_straps,
+	.create_audio = create_audio,
+	.create_stream_encoder = dce112_stream_encoder_create
+};
+
 static struct mem_input *dce112_mem_input_create(
 	struct dc_context *ctx,
 	struct adapter_service *as,
@@ -1338,22 +1339,6 @@ static bool construct(
 		}
 	}
 
-	for (i = 0; i < pool->base.stream_enc_count; i++) {
-		/* TODO: rework fragile code*/
-		if (pool->base.stream_engines.u_all & 1 << i) {
-			pool->base.stream_enc[i] =
-				dce112_stream_encoder_create(
-					i, ctx,
-					ctx->dc_bios,
-					&stream_enc_regs[i]);
-			if (pool->base.stream_enc[i] == NULL) {
-				BREAK_TO_DEBUGGER();
-				dm_error("DC: failed to create stream_encoder!\n");
-				goto res_create_fail;
-			}
-		}
-	}
-
 	if (!resource_construct(num_virtual_links, dc,
 			&pool->base, &res_cap, &res_create_funcs))
 		goto res_create_fail;
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
index af3a56b..753522d 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
@@ -382,11 +382,6 @@ static struct audio *create_audio(
 			&audio_regs[inst], &audio_shift, &audio_mask);
 }
 
-static const struct resource_create_funcs res_create_funcs = {
-	.read_dce_straps = read_dce_straps,
-	.create_audio = create_audio,
-};
-
 static struct timing_generator *dce80_timing_generator_create(
 		struct adapter_service *as,
 		struct dc_context *ctx,
@@ -409,9 +404,7 @@ static struct timing_generator *dce80_timing_generator_create(
 
 static struct stream_encoder *dce80_stream_encoder_create(
 	enum engine_id eng_id,
-	struct dc_context *ctx,
-	struct dc_bios *dcb,
-	const struct dce110_stream_enc_registers *regs)
+	struct dc_context *ctx)
 {
 	struct dce110_stream_encoder *enc110 =
 		dm_alloc(sizeof(struct dce110_stream_encoder));
@@ -419,7 +412,8 @@ static struct stream_encoder *dce80_stream_encoder_create(
 	if (!enc110)
 		return NULL;
 
-	if (dce110_stream_encoder_construct(enc110, ctx, dcb, eng_id, regs))
+	if (dce110_stream_encoder_construct(
+			enc110, ctx, ctx->dc_bios, eng_id, &stream_enc_regs[eng_id]))
 		return &enc110->base;
 
 	BREAK_TO_DEBUGGER();
@@ -427,6 +421,12 @@ static struct stream_encoder *dce80_stream_encoder_create(
 	return NULL;
 }
 
+static const struct resource_create_funcs res_create_funcs = {
+	.read_dce_straps = read_dce_straps,
+	.create_audio = create_audio,
+	.create_stream_encoder = dce80_stream_encoder_create
+};
+
 static struct mem_input *dce80_mem_input_create(
 	struct dc_context *ctx,
 	struct adapter_service *as,
@@ -985,21 +985,6 @@ static bool construct(
 		}
 	}
 
-	for (i = 0; i < pool->base.stream_enc_count; i++) {
-		if (pool->base.stream_engines.u_all & 1 << i) {
-			pool->base.stream_enc[i] = dce80_stream_encoder_create(
-					i, ctx,
-					ctx->dc_bios,
-					&stream_enc_regs[i]);
-
-			if (pool->base.stream_enc[i] == NULL) {
-				BREAK_TO_DEBUGGER();
-				dm_error("DC: failed to create stream_encoder!\n");
-				goto res_create_fail;
-			}
-		}
-	}
-
 	if (!resource_construct(num_virtual_links, dc, &pool->base,
 			&res_cap, &res_create_funcs))
 		goto res_create_fail;
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/resource.h b/drivers/gpu/drm/amd/dal/dc/inc/resource.h
index 6d58699..5eb7399 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/resource.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/resource.h
@@ -52,6 +52,11 @@ struct resource_create_funcs {
 
 	struct audio *(*create_audio)(
 			struct dc_context *ctx, unsigned int inst);
+
+	struct stream_encoder *(*create_stream_encoder)(
+			enum engine_id eng_id,
+			struct dc_context *ctx);
+
 };
 
 bool resource_construct(
-- 
2.7.4

