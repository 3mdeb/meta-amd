From b19b7e195074fe389613dee0858d6ff71da5f93f Mon Sep 17 00:00:00 2001
From: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date: Fri, 10 Jun 2016 11:39:14 -0400
Subject: [PATCH 0575/1722] drm/amd/dal: clean up tg

Change-Id: If45b043b3ad0533efc8557de49707ef80ec42003
Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/basics/logger.c         | 11 +++++----
 drivers/gpu/drm/amd/dal/dc/core/dc.c               | 19 ++++++++-------
 .../drm/amd/dal/dc/dce110/dce110_hw_sequencer.c    | 27 +++++++++++-----------
 .../amd/dal/dc/dce110/dce110_timing_generator.c    |  2 +-
 .../amd/dal/dc/dce110/dce110_timing_generator.h    |  3 ---
 .../drm/amd/dal/dc/dce80/dce80_timing_generator.c  |  2 +-
 .../gpu/drm/amd/dal/dc/inc/hw/timing_generator.h   |  7 +++---
 drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h      |  8 +++----
 8 files changed, 39 insertions(+), 40 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/basics/logger.c b/drivers/gpu/drm/amd/dal/dc/basics/logger.c
index 4c4d342..b49d9a6 100644
--- a/drivers/gpu/drm/amd/dal/dc/basics/logger.c
+++ b/drivers/gpu/drm/amd/dal/dc/basics/logger.c
@@ -249,15 +249,16 @@ struct log_major_mask_info {
 
 #define LG_WARN_MSK ~(1 << LOG_MINOR_COMPONENT_TOPOLOGY_MANAGER)
 
+#define LG_HW_TRACE_MSK (LG_ALL_MSK & \
+		~((1 << LOG_MINOR_HW_TRACE_LINK_TRAINING) \
+				| (1 << LOG_MINOR_HW_TRACE_AUDIO)))
+
 static const struct log_major_mask_info log_major_mask_info_tbl[] = {
 	/* LogMajor                  major name       default     MinorTble                    tblElementCnt */
 	{{LOG_MAJOR_ERROR,           "Error"       }, LG_ALL_MSK, component_minor_info_tbl,    NUM_ELEMENTS(component_minor_info_tbl)},
-	{{LOG_MAJOR_WARNING,         "Warning"     }, LG_WARN_MSK, component_minor_info_tbl,    NUM_ELEMENTS(component_minor_info_tbl)},
+	{{LOG_MAJOR_WARNING,         "Warning"     }, LG_WARN_MSK, component_minor_info_tbl,   NUM_ELEMENTS(component_minor_info_tbl)},
 	{{LOG_MAJOR_INTERFACE_TRACE, "IfTrace"     }, LG_ALL_MSK, component_minor_info_tbl,    NUM_ELEMENTS(component_minor_info_tbl)},
-	{{LOG_MAJOR_HW_TRACE,        "HwTrace"     }, (LG_ALL_MSK &
-			~((1 << LOG_MINOR_HW_TRACE_LINK_TRAINING) |
-			(1 << LOG_MINOR_HW_TRACE_AUDIO))),
-								hw_trace_minor_info_tbl,     NUM_ELEMENTS(hw_trace_minor_info_tbl)},
+	{{LOG_MAJOR_HW_TRACE,        "HwTrace"     }, LG_HW_TRACE_MSK, hw_trace_minor_info_tbl, NUM_ELEMENTS(hw_trace_minor_info_tbl)},
 	{{LOG_MAJOR_MST,             "MST"         }, LG_ALL_MSK, mst_minor_info_tbl,          NUM_ELEMENTS(mst_minor_info_tbl)},
 	{{LOG_MAJOR_DCS,             "DCS"         }, LG_ALL_MSK, dcs_minor_info_tbl,          NUM_ELEMENTS(dcs_minor_info_tbl)},
 	{{LOG_MAJOR_DCP,             "DCP"         }, LG_DCP_MSK, dcp_minor_info_tbl,          NUM_ELEMENTS(dcp_minor_info_tbl)},
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc.c b/drivers/gpu/drm/amd/dal/dc/core/dc.c
index 11b749e..be58178 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc.c
@@ -484,28 +484,27 @@ static void program_timing_sync(
 	uint8_t i;
 	uint8_t j;
 	uint8_t group_size = 0;
-	uint8_t tg_count = ctx->res_ctx.pool.pipe_count;
-	struct timing_generator *tg_set[MAX_PIPES];
+        uint8_t pipe_count = ctx->res_ctx.pool->pipe_count;
+        struct pipe_ctx *pipe_set[MAX_PIPES];
 
-	for (i = 0; i < tg_count; i++) {
+        for (i = 0; i < pipe_count; i++) {
 		if (!ctx->res_ctx.pipe_ctx[i].stream)
 			continue;
 
-		tg_set[0] = ctx->res_ctx.pool.timing_generators[i];
+                pipe_set[0] = &ctx->res_ctx.pipe_ctx[i];
 		group_size = 1;
 
 		/* Add tg to the set, search rest of the tg's for ones with
 		 * same timing, add all tgs with same timing to the group
 		 */
-		for (j = i + 1; j < tg_count; j++) {
+                for (j = i + 1; j < pipe_count; j++) {
 			if (!ctx->res_ctx.pipe_ctx[j].stream)
 				continue;
 
 			if (resource_are_streams_timing_synchronizable(
 					ctx->res_ctx.pipe_ctx[j].stream,
 					ctx->res_ctx.pipe_ctx[i].stream)) {
-				tg_set[group_size] =
-					ctx->res_ctx.pool.timing_generators[j];
+                                pipe_set[group_size] = &ctx->res_ctx.pipe_ctx[j];
 				group_size++;
 			}
 		}
@@ -516,9 +515,9 @@ static void program_timing_sync(
 			break;
 	}
 
-	if(group_size > 1) {
-		core_dc->hwss.enable_timing_synchronization(core_dc->ctx, group_size, tg_set);
-	}
+	if (group_size > 1)
+		core_dc->hwss.enable_timing_synchronization(
+				core_dc, group_size, pipe_set);
 }
 
 static bool targets_changed(
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
index 9dd2e2e..6c9da64 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
@@ -1421,7 +1421,7 @@ static void set_plane_config(
 			surface->public.rotation);
 }
 
-static void update_plane_addr(struct core_dc *dc, struct pipe_ctx *pipe_ctx)
+static void update_plane_addr(const struct core_dc *dc, struct pipe_ctx *pipe_ctx)
 {
 	struct core_surface *surface = pipe_ctx->surface;
 
@@ -1489,26 +1489,27 @@ static bool wait_for_reset_trigger_to_occur(
 
 /* Enable timing synchronization for a group of Timing Generators. */
 static void enable_timing_synchronization(
-	struct dc_context *dc_ctx,
-	uint32_t timing_generator_num,
-	struct timing_generator *tgs[])
+		struct core_dc *dc,
+		uint32_t group_size,
+		struct pipe_ctx *pipe_ctxs[])
 {
+	struct dc_context *dc_ctx = dc->ctx;
 	struct dcp_gsl_params gsl_params = { 0 };
 	struct trigger_params trigger_params;
 	uint32_t i;
 
 	DC_SYNC_INFO("GSL: Setting-up...\n");
 
-	gsl_params.gsl_group = SYNC_SOURCE_GSL_GROUP0;
+	gsl_params.gsl_group = 0;
 	gsl_params.gsl_purpose = DCP_GSL_PURPOSE_SURFACE_FLIP;
 
-	for (i = 0; i < timing_generator_num; i++) {
+	for (i = 0; i < group_size; i++) {
 		/* Designate a single TG in the group as a master.
 		 * Since HW doesn't care which one, we always assign
 		 * the 1st one in the group. */
 		gsl_params.timing_server = (0 == i ? true : false);
 
-		tgs[i]->funcs->setup_global_swap_lock(tgs[i], &gsl_params);
+		pipe_ctxs[i]->tg->funcs->setup_global_swap_lock(pipe_ctxs[i]->tg, &gsl_params);
 	}
 
 	/* Reset slave controllers on master VSync */
@@ -1518,23 +1519,23 @@ static void enable_timing_synchronization(
 	trigger_params.edge = TRIGGER_EDGE_DEFAULT;
 	trigger_params.source = SYNC_SOURCE_GSL_GROUP0;
 
-	for (i = 1 /* skip the master */; i < timing_generator_num; i++) {
-		tgs[i]->funcs->enable_reset_trigger(tgs[i], &trigger_params);
+	for (i = 1 /* skip the master */; i < group_size; i++) {
+		pipe_ctxs[i]->tg->funcs->enable_reset_trigger(pipe_ctxs[i]->tg, &trigger_params);
 
 		DC_SYNC_INFO("GSL: waiting for reset to occur.\n");
-		wait_for_reset_trigger_to_occur(dc_ctx, tgs[i]);
+		wait_for_reset_trigger_to_occur(dc_ctx, pipe_ctxs[i]->tg);
 
 		/* Regardless of success of the wait above, remove the reset or
 		 * the driver will start timing out on Display requests. */
 		DC_SYNC_INFO("GSL: disabling trigger-reset.\n");
-		tgs[i]->funcs->disable_reset_trigger(tgs[i]);
+		pipe_ctxs[i]->tg->funcs->disable_reset_trigger(pipe_ctxs[i]->tg);
 	}
 
 	/* GSL Vblank synchronization is a one time sync mechanism, assumption
 	 * is that the sync'ed displays will not drift out of sync over time*/
 	DC_SYNC_INFO("GSL: Restoring register states.\n");
-	for (i = 0; i < timing_generator_num; i++)
-		tgs[i]->funcs->tear_down_global_swap_lock(tgs[i]);
+	for (i = 0; i < group_size; i++)
+		pipe_ctxs[i]->tg->funcs->tear_down_global_swap_lock(pipe_ctxs[i]->tg);
 
 	DC_SYNC_INFO("GSL: Set-up complete.\n");
 }
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator.c
index 2fb96ac3..d8891a6 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator.c
@@ -1277,7 +1277,7 @@ void dce110_timing_generator_enable_advanced_request(
 	uint32_t addr = CRTC_REG(mmCRTC_START_LINE_CONTROL);
 	uint32_t value = dm_read_reg(tg->ctx, addr);
 
-	if (enable && !DCE110TG_FROM_TG(tg)->disable_advanced_request) {
+	if (enable) {
 		set_reg_field_value(
 			value,
 			0,
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator.h b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator.h
index fadff7f..1d0749c 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator.h
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator.h
@@ -71,9 +71,6 @@ struct dce110_timing_generator {
 	uint32_t min_h_blank;
 	uint32_t min_h_front_porch;
 	uint32_t min_h_back_porch;
-
-	enum sync_source cached_gsl_group;
-	bool disable_advanced_request;
 };
 
 #define DCE110TG_FROM_TG(tg)\
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_timing_generator.c b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_timing_generator.c
index 8c20e6c..f33385c 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_timing_generator.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_timing_generator.c
@@ -188,7 +188,7 @@ void dce80_timing_generator_enable_advanced_request(
 	uint32_t addr = CRTC_REG(mmCRTC_START_LINE_CONTROL);
 	uint32_t value = dm_read_reg(tg->ctx, addr);
 
-	if (enable && !DCE110TG_FROM_TG(tg)->disable_advanced_request) {
+	if (enable) {
 		set_reg_field_value(
 			value,
 			0,
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/hw/timing_generator.h b/drivers/gpu/drm/amd/dal/dc/inc/hw/timing_generator.h
index 492804e..f8c8e3c 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/hw/timing_generator.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/hw/timing_generator.h
@@ -51,11 +51,9 @@ enum dcp_gsl_purpose {
 };
 
 struct dcp_gsl_params {
-	enum sync_source gsl_group;
 	enum dcp_gsl_purpose gsl_purpose;
+	int gsl_group;
 	bool timing_server;
-	bool overlay_present;
-	bool gsl_paused;
 };
 
 #define LEFT_EYE_3D_PRIMARY_SURFACE 1
@@ -107,6 +105,7 @@ struct timing_generator {
 	const struct timing_generator_funcs *funcs;
 	struct dc_bios *bp;
 	struct dc_context *ctx;
+	int inst;
 };
 
 struct dc_crtc_timing;
@@ -146,6 +145,8 @@ struct timing_generator_funcs {
 	bool (*did_triggered_reset_occur)(struct timing_generator *tg);
 	void (*setup_global_swap_lock)(struct timing_generator *tg,
 							const struct dcp_gsl_params *gsl_params);
+	void (*unlock)(struct timing_generator *tg);
+	void (*lock)(struct timing_generator *tg);
 	void (*enable_reset_trigger)(struct timing_generator *tg,
 						const struct trigger_params *trigger_params);
 	void (*disable_reset_trigger)(struct timing_generator *tg);
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h b/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h
index 254ce1c..60163a5 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h
@@ -61,7 +61,7 @@ struct hw_sequencer_funcs {
 			struct resource_context *res_ctx);
 
 	void (*update_plane_addr)(
-		struct core_dc *dc,
+		const struct core_dc *dc,
 		struct pipe_ctx *pipe_ctx);
 
 	void (*update_plane_surface)(
@@ -81,9 +81,9 @@ struct hw_sequencer_funcs {
 	void (*enable_accelerated_mode)(struct core_dc *dc);
 
 	void (*enable_timing_synchronization)(
-					struct dc_context *dc_ctx,
-					uint32_t timing_generator_num,
-					struct timing_generator *tgs[]);
+			struct core_dc *dc,
+			uint32_t group_size,
+			struct pipe_ctx *pipe_ctxs[]);
 
 	/* backlight control */
 	void (*encoder_set_lcd_backlight_level)(
-- 
2.7.4

