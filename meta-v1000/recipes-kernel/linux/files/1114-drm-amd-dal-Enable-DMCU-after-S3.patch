From c6d1c4bc6c26003a4b68ecb7d58fc526463163b8 Mon Sep 17 00:00:00 2001
From: Amy Zhang <Amy.Zhang@amd.com>
Date: Wed, 21 Sep 2016 11:01:41 -0400
Subject: [PATCH 1114/1722] drm/amd/dal: Enable DMCU after S3

- Reloaded DMCU firmware after wakeup
- Reinitialized backlight registers after wakeup
- Make sure backlight and PSR functions work after S3

Change-Id: I3021c46832a036aa9c5627710e50b6de8404895c
Signed-off-by: Amy Zhang <Amy.Zhang@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/core/dc.c               | 16 ++++
 drivers/gpu/drm/amd/dal/dc/core/dc_link.c          | 12 +++
 drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c       |  8 +-
 drivers/gpu/drm/amd/dal/dc/dc.h                    |  3 +
 .../drm/amd/dal/dc/dce110/dce110_link_encoder.c    | 85 ++++++++++++++++++++++
 .../drm/amd/dal/dc/dce110/dce110_link_encoder.h    | 12 +++
 .../gpu/drm/amd/dal/dc/dce110/dce110_resource.c    |  4 +-
 drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h   |  1 +
 8 files changed, 137 insertions(+), 4 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc.c b/drivers/gpu/drm/amd/dal/dc/core/dc.c
index 511027f..3936d8b 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc.c
@@ -304,6 +304,19 @@ static bool set_backlight(struct dc *dc, unsigned int backlight_level,
 
 }
 
+static bool init_dmcu_backlight_settings(struct dc *dc)
+{
+	struct core_dc *core_dc = DC_TO_CORE(dc);
+	int i;
+
+	for (i = 0; i < core_dc->link_count; i++)
+		dc_link_init_dmcu_backlight_settings
+			(&core_dc->links[i]->public);
+
+	return true;
+}
+
+
 static bool set_abm_level(struct dc *dc, unsigned int abm_level)
 {
 	struct core_dc *core_dc = DC_TO_CORE(dc);
@@ -367,6 +380,9 @@ static void allocate_dc_stream_funcs(struct core_dc *core_dc)
 	core_dc->public.stream_funcs.set_backlight =
 			set_backlight;
 
+	core_dc->public.stream_funcs.init_dmcu_backlight_settings =
+			init_dmcu_backlight_settings;
+
 	core_dc->public.stream_funcs.set_abm_level =
 			set_abm_level;
 
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_link.c b/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
index cd62d12..6b8d3c1 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
@@ -1406,6 +1406,18 @@ bool dc_link_set_backlight_level(const struct dc_link *dc_link, uint32_t level,
 	return true;
 }
 
+
+bool dc_link_init_dmcu_backlight_settings(const struct dc_link *dc_link)
+{
+	struct core_link *link = DC_LINK_TO_CORE(dc_link);
+
+	if (link->link_enc->funcs->init_dmcu_backlight_settings != NULL)
+		link->link_enc->funcs->
+			init_dmcu_backlight_settings(link->link_enc);
+
+	return true;
+}
+
 bool dc_link_set_abm_level(const struct dc_link *dc_link, uint32_t level)
 {
 	struct core_link *link = DC_LINK_TO_CORE(dc_link);
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c b/drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c
index 43d6bfa..acf4981 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_link_dp.c
@@ -1491,16 +1491,18 @@ static bool handle_hpd_irq_psr_sink(const struct core_link *link)
 	if (link->public.psr_caps.psr_version == 0)
 		return false;
 
-	union dpcd_psr_configuration psr_configuration = {0};
+	union dpcd_psr_configuration psr_configuration;
+
 	dal_ddc_service_read_dpcd_data(
 					link->ddc,
 					368 /*DpcdAddress_PSR_Enable_Cfg*/,
 					&psr_configuration.raw,
 					sizeof(psr_configuration.raw));
+
 	if (psr_configuration.bits.ENABLE) {
 		unsigned char dpcdbuf[3] = {0};
-		union psr_error_status psr_error_status = {0};
-		union psr_sink_psr_status psr_sink_psr_status = {0};
+		union psr_error_status psr_error_status;
+		union psr_sink_psr_status psr_sink_psr_status;
 
 		dal_ddc_service_read_dpcd_data(
 					link->ddc,
diff --git a/drivers/gpu/drm/amd/dal/dc/dc.h b/drivers/gpu/drm/amd/dal/dc/dc.h
index c28ba93..d75154d 100644
--- a/drivers/gpu/drm/amd/dal/dc/dc.h
+++ b/drivers/gpu/drm/amd/dal/dc/dc.h
@@ -71,6 +71,7 @@ struct dc_stream_funcs {
 			const struct dc_stream **stream, int num_streams);
 	bool (*set_backlight)(struct dc *dc, unsigned int backlight_level,
 		unsigned int frame_ramp, const struct dc_stream *stream);
+	bool (*init_dmcu_backlight_settings)(struct dc *dc);
 	bool (*set_abm_level)(struct dc *dc, unsigned int abm_level);
 	bool (*set_psr_enable)(struct dc *dc, bool enable);
 	bool (*setup_psr)(struct dc *dc, const struct dc_stream *stream);
@@ -504,6 +505,8 @@ const struct graphics_object_id dc_get_link_id_at_index(
 bool dc_link_set_backlight_level(const struct dc_link *dc_link, uint32_t level,
 		uint32_t frame_ramp, const struct dc_stream *stream);
 
+bool dc_link_init_dmcu_backlight_settings(const struct dc_link *dc_link);
+
 bool dc_link_set_abm_level(const struct dc_link *dc_link, uint32_t level);
 
 bool dc_link_set_psr_enable(const struct dc_link *dc_link, bool enable);
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
index 58c91af..a8de7aa 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
@@ -38,6 +38,7 @@
 
 #ifndef ATOM_S2_CURRENT_BL_LEVEL_MASK
 #define ATOM_S2_CURRENT_BL_LEVEL_MASK   0x0000FF00L
+#define ATOM_S2_VRI_BRIGHT_ENABLE       0x20000000L
 #endif
 
 #ifndef ATOM_S2_CURRENT_BL_LEVEL_SHIFT
@@ -105,6 +106,9 @@
 /*TODO: Used for psr wakeup for set backlight level*/
 static unsigned int psr_crtc_offset;
 
+/* registers setting needs to be save and restored used at InitBacklight */
+static struct dce110_abm_backlight_registers stored_backlight_registers;
+
 enum {
 	DP_MST_UPDATE_MAX_RETRY = 50
 };
@@ -130,6 +134,8 @@ static const struct link_encoder_funcs dce110_lnk_enc_funcs = {
 		dce110_link_encoder_update_mst_stream_allocation_table,
 	.set_dmcu_backlight_level =
 			dce110_link_encoder_set_dmcu_backlight_level,
+	.init_dmcu_backlight_settings =
+			dce110_link_encoder_init_dmcu_backlight_settings,
 	.set_dmcu_abm_level = dce110_link_encoder_set_dmcu_abm_level,
 	.set_dmcu_psr_enable = dce110_link_encoder_set_dmcu_psr_enable,
 	.setup_dmcu_psr = dce110_link_encoder_setup_dmcu_psr,
@@ -1875,6 +1881,85 @@ void dce110_link_encoder_set_dmcu_backlight_level(
 	dm_write_reg(ctx, DMCU_REG(BIOS_SCRATCH_2), s2);
 }
 
+void dce110_link_encoder_init_dmcu_backlight_settings(
+	struct link_encoder *enc)
+{
+	struct dce110_link_encoder *enc110 = TO_DCE110_LINK_ENC(enc);
+	struct dc_context *ctx = enc110->base.ctx;
+	uint32_t bl_pwm_cntl;
+	uint32_t pwmCntl;
+	uint32_t pwmCntl2;
+	uint32_t periodCntl;
+	uint32_t pwmSeqRefDiv;
+	uint32_t s2;
+
+	bl_pwm_cntl = dm_read_reg(ctx, BL_REG(BL_PWM_CNTL));
+
+	/* It must not be 0, so we have to restore them
+	 * Bios bug w/a - period resets to zero,
+	 * restoring to cache values which is always correct
+	 */
+	if (get_reg_field_value(bl_pwm_cntl, BL_PWM_CNTL,
+			BL_ACTIVE_INT_FRAC_CNT) == 0 || bl_pwm_cntl == 1) {
+		if (stored_backlight_registers.vBL_PWM_CNTL != 0) {
+			pwmCntl = stored_backlight_registers.vBL_PWM_CNTL;
+			dm_write_reg(ctx, BL_REG(BL_PWM_CNTL), pwmCntl);
+
+			pwmCntl2 = stored_backlight_registers.vBL_PWM_CNTL2;
+			dm_write_reg(ctx, BL_REG(BL_PWM_CNTL2), pwmCntl2);
+
+			periodCntl =
+				stored_backlight_registers.vBL_PWM_PERIOD_CNTL;
+			dm_write_reg(ctx, BL_REG(BL_PWM_PERIOD_CNTL),
+					periodCntl);
+
+
+			pwmSeqRefDiv =
+					dm_read_reg(ctx,
+						BL_REG(LVTMA_PWRSEQ_REF_DIV));
+			set_reg_field_value(
+					pwmSeqRefDiv,
+					stored_backlight_registers.
+					vLVTMA_PWRSEQ_REF_DIV_BL_PWM_REF_DIV,
+					LVTMA_PWRSEQ_REF_DIV,
+					BL_PWM_REF_DIV);
+			dm_write_reg(ctx, BL_REG(LVTMA_PWRSEQ_REF_DIV),
+					pwmSeqRefDiv);
+		}
+	} else {
+		stored_backlight_registers.vBL_PWM_CNTL =
+				dm_read_reg(ctx, BL_REG(BL_PWM_CNTL));
+		stored_backlight_registers.vBL_PWM_CNTL2 =
+				dm_read_reg(ctx, BL_REG(BL_PWM_CNTL2));
+		stored_backlight_registers.vBL_PWM_PERIOD_CNTL =
+				dm_read_reg(ctx, BL_REG(BL_PWM_PERIOD_CNTL));
+
+		uint32_t pwmSeqRefDiv;
+
+		pwmSeqRefDiv = dm_read_reg(ctx, BL_REG(LVTMA_PWRSEQ_REF_DIV));
+		stored_backlight_registers.
+				vLVTMA_PWRSEQ_REF_DIV_BL_PWM_REF_DIV =
+				get_reg_field_value(pwmSeqRefDiv,
+				LVTMA_PWRSEQ_REF_DIV, BL_PWM_REF_DIV);
+	}
+
+	/* Have driver take backlight control
+	 * TakeBacklightControl(true)
+	 */
+	s2 = dm_read_reg(ctx, DMCU_REG(BIOS_SCRATCH_2));
+	s2 |= ATOM_S2_VRI_BRIGHT_ENABLE;
+	dm_write_reg(ctx, DMCU_REG(BIOS_SCRATCH_2), s2);
+
+	/* Enable the backlight output */
+	pwmCntl = dm_read_reg(ctx, BL_REG(BL_PWM_CNTL));
+	set_reg_field_value(
+			pwmCntl,
+			1,
+			BL_PWM_CNTL,
+			BL_PWM_EN);
+	dm_write_reg(ctx, BL_REG(BL_PWM_CNTL), pwmCntl);
+}
+
 void dce110_link_encoder_set_dmcu_abm_level(
 	struct link_encoder *enc,
 	uint32_t level)
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h
index 709d3c6..ac2ac13 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h
@@ -37,6 +37,8 @@ struct dce110_link_enc_bl_registers {
 	uint32_t BL_PWM_PERIOD_CNTL;
 	uint32_t LVTMA_PWRSEQ_CNTL;
 	uint32_t LVTMA_PWRSEQ_STATE;
+	uint32_t BL_PWM_CNTL2;
+	uint32_t LVTMA_PWRSEQ_REF_DIV;
 };
 
 struct dce110_link_enc_dmcu_registers {
@@ -152,6 +154,13 @@ union dce110_dmcu_psr_config_data_reg3 {
 	unsigned int u32All;
 };
 
+struct dce110_abm_backlight_registers {
+	unsigned int vBL_PWM_CNTL;
+	unsigned int vBL_PWM_CNTL2;
+	unsigned int vBL_PWM_PERIOD_CNTL;
+	unsigned int vLVTMA_PWRSEQ_REF_DIV_BL_PWM_REF_DIV;
+};
+
 bool dce110_link_encoder_construct(
 	struct dce110_link_encoder *enc110,
 	const struct encoder_init_data *init_data,
@@ -242,6 +251,9 @@ void dce110_link_encoder_set_dmcu_backlight_level(
 	uint32_t frame_ramp,
 	uint32_t controller_id);
 
+void dce110_link_encoder_init_dmcu_backlight_settings(
+	struct link_encoder *enc);
+
 void dce110_link_encoder_set_dmcu_abm_level(
 	struct link_encoder *enc,
 	uint32_t level);
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
index 7eeb700..b87f20cd 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
@@ -173,7 +173,9 @@ static const struct dce110_link_enc_bl_registers link_enc_bl_regs = {
 		.BL_PWM_GRP1_REG_LOCK = mmBL_PWM_GRP1_REG_LOCK,
 		.BL_PWM_PERIOD_CNTL = mmBL_PWM_PERIOD_CNTL,
 		.LVTMA_PWRSEQ_CNTL = mmLVTMA_PWRSEQ_CNTL,
-		.LVTMA_PWRSEQ_STATE = mmLVTMA_PWRSEQ_STATE
+		.LVTMA_PWRSEQ_STATE = mmLVTMA_PWRSEQ_STATE,
+		.BL_PWM_CNTL2 = mmBL_PWM_CNTL2,
+		.LVTMA_PWRSEQ_REF_DIV = mmLVTMA_PWRSEQ_REF_DIV
 };
 
 static const struct dce110_link_enc_dmcu_registers link_enc_dmcu_regs = {
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h b/drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h
index 26391a0..c2887b1 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h
@@ -243,6 +243,7 @@ struct link_encoder_funcs {
 		const struct link_mst_stream_allocation_table *table);
 	void (*set_dmcu_backlight_level)(struct link_encoder *enc,
 		uint32_t level, uint32_t frame_ramp, uint32_t controller_id);
+	void (*init_dmcu_backlight_settings)(struct link_encoder *enc);
 	void (*set_dmcu_abm_level)(struct link_encoder *enc, uint32_t level);
 	void (*set_dmcu_psr_enable)(struct link_encoder *enc, bool enable);
 	void (*setup_dmcu_psr)(struct link_encoder *enc,
-- 
2.7.4

