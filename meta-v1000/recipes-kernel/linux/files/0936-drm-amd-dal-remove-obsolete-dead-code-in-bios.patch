From 7e5616094e055a01e346c9a0e150744ee5a2d42e Mon Sep 17 00:00:00 2001
From: Tony Cheng <tony.cheng@amd.com>
Date: Thu, 25 Aug 2016 19:23:11 -0400
Subject: [PATCH 0936/1722] drm/amd/dal: remove obsolete dead code in bios

- remove lcd_scale related logic, as OS controls

Change-Id: I8034d88e4fae610430f504620685df23abd9ccc4
Signed-off-by: Jordan Lazare <Jordan.Lazare@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/bios/bios_parser.c      |   1 -
 .../gpu/drm/amd/dal/dc/bios/bios_parser_helper.h   |   2 -
 .../amd/dal/dc/bios/bios_parser_types_internal.h   |   1 -
 .../dal/dc/bios/dce110/bios_parser_helper_dce110.c |  20 --
 .../dal/dc/bios/dce112/bios_parser_helper_dce112.c |  20 --
 .../dal/dc/bios/dce80/bios_parser_helper_dce80.c   |  17 -
 drivers/gpu/drm/amd/dal/dc/dc_bios_types.h         | 373 +++++++++++----------
 .../drm/amd/dal/include/grph_object_ctrl_defs.h    |  10 -
 8 files changed, 205 insertions(+), 239 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/bios/bios_parser.c b/drivers/gpu/drm/amd/dal/dc/bios/bios_parser.c
index 54e7880..d4ba3f0 100644
--- a/drivers/gpu/drm/amd/dal/dc/bios/bios_parser.c
+++ b/drivers/gpu/drm/amd/dal/dc/bios/bios_parser.c
@@ -4355,7 +4355,6 @@ static bool bios_parser_construct(
 
 	bp->ctx = init->ctx;
 	bp->bios_local_image = NULL;
-	bp->lcd_scale = LCD_SCALE_UNKNOWN;
 
 	rom_header_offset =
 	GET_IMAGE(uint16_t, OFFSET_TO_POINTER_TO_ATOM_ROM_HEADER);
diff --git a/drivers/gpu/drm/amd/dal/dc/bios/bios_parser_helper.h b/drivers/gpu/drm/amd/dal/dc/bios/bios_parser_helper.h
index 4c14fd3..2f8c540 100644
--- a/drivers/gpu/drm/amd/dal/dc/bios/bios_parser_helper.h
+++ b/drivers/gpu/drm/amd/dal/dc/bios/bios_parser_helper.h
@@ -50,8 +50,6 @@ struct bios_parser_helper {
 		struct dc_context *ctx);
 	bool (*is_accelerated_mode)(
 		struct dc_context *ctx);
-	enum lcd_scale (*get_scratch_lcd_scale)(
-		struct dc_context *ctx);
 };
 
 bool dal_bios_parser_init_bios_helper(
diff --git a/drivers/gpu/drm/amd/dal/dc/bios/bios_parser_types_internal.h b/drivers/gpu/drm/amd/dal/dc/bios/bios_parser_types_internal.h
index b555a96..4153c9f 100644
--- a/drivers/gpu/drm/amd/dal/dc/bios/bios_parser_types_internal.h
+++ b/drivers/gpu/drm/amd/dal/dc/bios/bios_parser_types_internal.h
@@ -66,7 +66,6 @@ struct bios_parser {
 	struct cmd_tbl cmd_tbl;
 
 	uint8_t *bios_local_image;
-	enum lcd_scale lcd_scale;
 
 	bool remap_device_tags;
 	bool headless_no_opm;
diff --git a/drivers/gpu/drm/amd/dal/dc/bios/dce110/bios_parser_helper_dce110.c b/drivers/gpu/drm/amd/dal/dc/bios/dce110/bios_parser_helper_dce110.c
index c1f364a..d398291 100644
--- a/drivers/gpu/drm/amd/dal/dc/bios/dce110/bios_parser_helper_dce110.c
+++ b/drivers/gpu/drm/amd/dal/dc/bios/dce110/bios_parser_helper_dce110.c
@@ -60,25 +60,6 @@ void dce110_set_scratch_acc_mode_change(struct dc_context *ctx)
 #endif
 }
 
-/**
- * get LCD Scale Mode from VBIOS scratch register
- */
-static enum lcd_scale get_scratch_lcd_scale(
-	struct dc_context *ctx)
-{
-	uint32_t addr = mmBIOS_SCRATCH_6;
-	uint32_t value = 0;
-
-	value = dm_read_reg(ctx, addr);
-
-	if (value & ATOM_S6_REQ_LCD_EXPANSION_FULL)
-		return LCD_SCALE_FULLPANEL;
-	else if (value & ATOM_S6_REQ_LCD_EXPANSION_ASPEC_RATIO)
-		return LCD_SCALE_ASPECTRATIO;
-	else
-		return LCD_SCALE_NONE;
-}
-
 /*
  * is_accelerated_mode
  *
@@ -190,7 +171,6 @@ void dce110_set_scratch_critical_state(struct dc_context *ctx,
 /* function table */
 static const struct bios_parser_helper bios_parser_helper_funcs = {
 	.detect_sink = detect_sink,
-	.get_scratch_lcd_scale = get_scratch_lcd_scale,
 	.is_accelerated_mode = is_accelerated_mode,
 };
 
diff --git a/drivers/gpu/drm/amd/dal/dc/bios/dce112/bios_parser_helper_dce112.c b/drivers/gpu/drm/amd/dal/dc/bios/dce112/bios_parser_helper_dce112.c
index fbe3b67..a00c905 100644
--- a/drivers/gpu/drm/amd/dal/dc/bios/dce112/bios_parser_helper_dce112.c
+++ b/drivers/gpu/drm/amd/dal/dc/bios/dce112/bios_parser_helper_dce112.c
@@ -59,25 +59,6 @@ static void set_scratch_acc_mode_change(
 	dm_write_reg(ctx, addr, value);
 }
 
-/**
- * get LCD Scale Mode from VBIOS scratch register
- */
-static enum lcd_scale get_scratch_lcd_scale(
-	struct dc_context *ctx)
-{
-	uint32_t addr = mmBIOS_SCRATCH_6;
-	uint32_t value = 0;
-
-	value = dm_read_reg(ctx, addr);
-
-	if (value & ATOM_S6_REQ_LCD_EXPANSION_FULL)
-		return LCD_SCALE_FULLPANEL;
-	else if (value & ATOM_S6_REQ_LCD_EXPANSION_ASPEC_RATIO)
-		return LCD_SCALE_ASPECTRATIO;
-	else
-		return LCD_SCALE_NONE;
-}
-
 /*
  * is_accelerated_mode
  *
@@ -174,7 +155,6 @@ static enum signal_type detect_sink(
 /* function table */
 static const struct bios_parser_helper bios_parser_helper_funcs = {
 	.detect_sink = detect_sink,
-	.get_scratch_lcd_scale = get_scratch_lcd_scale,
 	.is_accelerated_mode = is_accelerated_mode,
 	.set_scratch_acc_mode_change = set_scratch_acc_mode_change
 };
diff --git a/drivers/gpu/drm/amd/dal/dc/bios/dce80/bios_parser_helper_dce80.c b/drivers/gpu/drm/amd/dal/dc/bios/dce80/bios_parser_helper_dce80.c
index 0ee5854..8f55d67 100644
--- a/drivers/gpu/drm/amd/dal/dc/bios/dce80/bios_parser_helper_dce80.c
+++ b/drivers/gpu/drm/amd/dal/dc/bios/dce80/bios_parser_helper_dce80.c
@@ -129,25 +129,8 @@ static bool is_accelerated_mode(
 	return (value & ATOM_S6_ACC_MODE) ? true : false;
 }
 
-static enum lcd_scale get_scratch_lcd_scale(
-	struct dc_context *ctx)
-{
-	uint32_t addr = mmBIOS_SCRATCH_6;
-	uint32_t value = 0;
-
-	value = dm_read_reg(ctx, addr);
-
-	if (value & ATOM_S6_REQ_LCD_EXPANSION_FULL)
-		return LCD_SCALE_FULLPANEL;
-	else if (value & ATOM_S6_REQ_LCD_EXPANSION_ASPEC_RATIO)
-		return LCD_SCALE_ASPECTRATIO;
-	else
-		return LCD_SCALE_NONE;
-}
-
 static const struct bios_parser_helper bios_parser_helper_funcs = {
 	.detect_sink = detect_sink,
-	.get_scratch_lcd_scale = get_scratch_lcd_scale,
 	.is_accelerated_mode = is_accelerated_mode,
 };
 
diff --git a/drivers/gpu/drm/amd/dal/dc/dc_bios_types.h b/drivers/gpu/drm/amd/dal/dc/dc_bios_types.h
index bd94ecd..5df1a37 100644
--- a/drivers/gpu/drm/amd/dal/dc/dc_bios_types.h
+++ b/drivers/gpu/drm/amd/dal/dc/dc_bios_types.h
@@ -38,173 +38,210 @@
 
 #include "include/bios_parser_types.h"
 
-uint8_t dc_bios_get_connectors_number(struct dc_bios *bios);
-
-void dc_bios_power_up(struct dc_bios *bios);
-
-uint8_t dc_bios_get_encoders_number(struct dc_bios *bios);
-uint32_t dc_bios_get_oem_ddc_lines_number(struct dc_bios *bios);
-
-struct graphics_object_id dc_bios_get_encoder_id(struct dc_bios *bios,
-						 uint32_t i);
-struct graphics_object_id dc_bios_get_connector_id(struct dc_bios *bios,
-						   uint8_t connector_index);
-uint32_t dc_bios_get_src_number(struct dc_bios *bios,
-				struct graphics_object_id id);
-uint32_t dc_bios_get_dst_number(struct dc_bios *bios,
-				struct graphics_object_id id);
-
-uint32_t dc_bios_get_gpio_record(struct dc_bios *dcb,
-				 struct graphics_object_id id,
-				 struct bp_gpio_cntl_info *gpio_record,
-				 uint32_t record_size);
-enum bp_result dc_bios_get_src_obj(struct dc_bios *bios,
-				    struct graphics_object_id object_id,
-				    uint32_t index,
-				    struct graphics_object_id *src_object_id);
-enum bp_result dc_bios_get_dst_obj(struct dc_bios *bios,
-				   struct graphics_object_id object_id,
-				   uint32_t index,
-				   struct graphics_object_id *dest_object_id);
-enum bp_result dc_bios_get_oem_ddc_info(struct dc_bios *bios,
-					uint32_t index,
-					struct graphics_object_i2c_info *info);
-enum bp_result dc_bios_get_i2c_info(struct dc_bios *dcb,
-				    struct graphics_object_id id,
-				    struct graphics_object_i2c_info *info);
-
-enum bp_result dc_bios_get_voltage_ddc_info(struct dc_bios *bios,
-					    uint32_t index,
-					    struct graphics_object_i2c_info *info);
-
-enum bp_result dc_bios_get_thermal_ddc_info(struct dc_bios *bios,
-					    uint32_t i2c_channel_id,
-					    struct graphics_object_i2c_info *info);
-enum bp_result dc_bios_get_hpd_info(struct dc_bios *bios,
-				    struct graphics_object_id id,
-				    struct graphics_object_hpd_info *info);
-enum bp_result dc_bios_get_device_tag(struct dc_bios *bios,
-				      struct graphics_object_id connector_object_id,
-				      uint32_t device_tag_index,
-				      struct connector_device_tag_info *info);
-
-enum bp_result dc_bios_get_firmware_info(struct dc_bios *bios,
-					 struct firmware_info *info);
-
-enum bp_result dc_bios_get_spread_spectrum_info(struct dc_bios *bios,
-						enum as_signal_type signal,
-						uint32_t index,
-						struct spread_spectrum_info *ss_info);
-uint32_t dc_bios_get_ss_entry_number(struct dc_bios *bios,
-				     enum as_signal_type signal);
-enum bp_result dc_bios_get_embedded_panel_info(struct dc_bios *bios,
-					       struct embedded_panel_info *info);
-enum bp_result dc_bios_enum_embedded_panel_patch_mode(struct dc_bios *bios,
-						      uint32_t index,
-						      struct embedded_panel_patch_mode *mode);
-
-enum bp_result dc_bios_get_gpio_pin_info(struct dc_bios *bios,
-					 uint32_t gpio_id,
-					 struct gpio_pin_info *info);
-
-enum bp_result dc_bios_get_faked_edid_len(struct dc_bios *bios,
-					  uint32_t *len);
-
-enum bp_result dc_bios_get_faked_edid_buf(struct dc_bios *bios,
-					  uint8_t *buff,
-					  uint32_t len);
-
-enum bp_result dc_bios_get_encoder_cap_info(struct dc_bios *bios,
-					    struct graphics_object_id object_id,
-					    struct bp_encoder_cap_info *info);
-enum bp_result dc_bios_get_din_connector_info(struct dc_bios *bios,
-					      struct graphics_object_id id,
-					      struct din_connector_info *info);
-bool dc_bios_is_device_id_supported(struct dc_bios *bios,
-				    struct device_id id);
-bool dc_bios_is_accelerated_mode(struct dc_bios *bios);
-bool dc_bios_is_lid_open(struct dc_bios *bios);
-#if 0 /* unused trap to debugger functions */
-
-bool dc_bios_is_lid_status_changed(struct dc_bios *bios);
-
-enum lcd_scale  dc_bios_get_scratch_lcd_scale(struct dc_bios *bios);
-void dc_bios_get_bios_event_info(struct dc_bios *bios,
-				 struct bios_event_info *info);
-void dc_bios_update_requested_backlight_level(struct dc_bios *bios,
-					      uint32_t backlight_8bit);
-uint32_t dc_bios_get_requested_backlight_level(struct dc_bios *bios);
-void dc_bios_take_backlight_control(struct dc_bios *bios,
-				    bool cntl);
-bool dc_bios_is_active_display(struct dc_bios *bios,
-			       enum signal_type signal,
-			       const struct connector_device_tag_info *device_tag);
-enum controller_id dc_bios_get_embedded_display_controller_id(struct dc_bios *bios);
-uint32_t dc_bios_get_embedded_display_refresh_rate(struct dc_bios *bios);
-#endif
-
-void dc_bios_prepare_scratch_active_and_requested(struct dc_bios *bios,
-						  enum controller_id controller_id,
-						  enum signal_type signal,
-						  const struct connector_device_tag_info *device_tag);
-void dc_bios_set_scratch_acc_mode_change(struct dc_bios *bios);
-
-/* COMMANDS */
-enum bp_result dc_bios_encoder_control(struct dc_bios *bios,
-				       struct bp_encoder_control *cntl);
-enum bp_result dc_bios_transmitter_control(struct dc_bios *bios,
-					   struct bp_transmitter_control *cntl);
-enum bp_result dc_bios_crt_control(struct dc_bios *bios,
-				   enum engine_id engine_id,
-				   bool enable,
-				   uint32_t pixel_clock);
-enum bp_result dc_bios_enable_crtc(struct dc_bios *bios,
-				   enum controller_id id,
-				   bool enable);
-enum bp_result dc_bios_adjust_pixel_clock(struct dc_bios *bios,
-					  struct bp_adjust_pixel_clock_parameters *bp_params);
-enum bp_result dc_bios_set_pixel_clock(struct dc_bios *bios,
-				       struct bp_pixel_clock_parameters *bp_params);
-enum bp_result dc_bios_set_dce_clock(struct dc_bios *bios,
-				     struct bp_set_dce_clock_parameters *bp_params);
-enum bp_result dc_bios_enable_spread_spectrum_on_ppll(struct dc_bios *bios,
-						      struct bp_spread_spectrum_parameters *bp_params,
-						      bool enable);
-enum bp_result dc_bios_program_crtc_timing(struct dc_bios *bios,
-					   struct bp_hw_crtc_timing_parameters *bp_params);
-enum bp_result dc_bios_blank_crtc(struct dc_bios *bios,
-				  struct bp_blank_crtc_parameters *bp_params,
-				  bool blank);
-enum bp_result dc_bios_set_overscan(struct dc_bios *bios,
-				    struct bp_hw_crtc_overscan_parameters *bp_params);
-enum bp_result dc_bios_crtc_source_select(struct dc_bios *bios,
-					  struct bp_crtc_source_select *bp_params);
-enum bp_result dc_bios_program_display_engine_pll(struct dc_bios *bios,
-						  struct bp_pixel_clock_parameters *bp_params);
-enum bp_result dc_bios_get_divider_for_target_display_clock(struct dc_bios *bios,
-							    struct bp_display_clock_parameters *bp_params);
-enum signal_type dc_bios_dac_load_detect(struct dc_bios *bios,
-					 struct graphics_object_id encoder,
-					 struct graphics_object_id connector,
-					 enum signal_type display_signal);
-enum bp_result dc_bios_enable_memory_requests(struct dc_bios *bios,
-					      enum controller_id controller_id,
-					      bool enable);
-enum bp_result dc_bios_external_encoder_control(struct dc_bios *bios,
-						struct bp_external_encoder_control *cntl);
-enum bp_result dc_bios_enable_disp_power_gating(struct dc_bios *bios,
-						enum controller_id controller_id,
-						enum bp_pipe_control_action action);
-
-
-void dc_bios_post_init(struct dc_bios *bios,
-		       struct adapter_service *as);
-
-struct integrated_info *dc_bios_create_integrated_info(struct dc_bios *bios);
-
-void dc_bios_destroy_integrated_info(struct dc_bios *dcb,
-				     struct integrated_info **info);
-
-struct dc_bios;
+struct dc_vbios_funcs {
+	uint8_t (*get_connectors_number)(struct dc_bios *bios);
+
+	void (*power_up)(struct dc_bios *bios);
+
+	uint8_t (*get_encoders_number)(struct dc_bios *bios);
+	uint32_t (*get_oem_ddc_lines_number)(struct dc_bios *bios);
+
+	struct graphics_object_id (*get_encoder_id)(
+		struct dc_bios *bios,
+		uint32_t i);
+	struct graphics_object_id (*get_connector_id)(
+		struct dc_bios *bios,
+		uint8_t connector_index);
+	uint32_t (*get_dst_number)(
+		struct dc_bios *bios,
+		struct graphics_object_id id);
+
+	uint32_t (*get_gpio_record)(
+		struct dc_bios *dcb,
+		struct graphics_object_id id,
+		struct bp_gpio_cntl_info *gpio_record,
+		uint32_t record_size);
+
+	enum bp_result (*get_src_obj)(
+		struct dc_bios *bios,
+		struct graphics_object_id object_id, uint32_t index,
+		struct graphics_object_id *src_object_id);
+	enum bp_result (*get_dst_obj)(
+		struct dc_bios *bios,
+		struct graphics_object_id object_id, uint32_t index,
+		struct graphics_object_id *dest_object_id);
+	enum bp_result (*get_oem_ddc_info)(
+		struct dc_bios *bios,
+		uint32_t index,
+		struct graphics_object_i2c_info *info);
+
+	enum bp_result (*get_i2c_info)(
+		struct dc_bios *dcb,
+		struct graphics_object_id id,
+		struct graphics_object_i2c_info *info);
+
+	enum bp_result (*get_voltage_ddc_info)(
+		struct dc_bios *bios,
+		uint32_t index,
+		struct graphics_object_i2c_info *info);
+	enum bp_result (*get_thermal_ddc_info)(
+		struct dc_bios *bios,
+		uint32_t i2c_channel_id,
+		struct graphics_object_i2c_info *info);
+	enum bp_result (*get_hpd_info)(
+		struct dc_bios *bios,
+		struct graphics_object_id id,
+		struct graphics_object_hpd_info *info);
+	enum bp_result (*get_device_tag)(
+		struct dc_bios *bios,
+		struct graphics_object_id connector_object_id,
+		uint32_t device_tag_index,
+		struct connector_device_tag_info *info);
+	enum bp_result (*get_firmware_info)(
+		struct dc_bios *bios,
+		struct firmware_info *info);
+	enum bp_result (*get_spread_spectrum_info)(
+		struct dc_bios *bios,
+		enum as_signal_type signal,
+		uint32_t index,
+		struct spread_spectrum_info *ss_info);
+	uint32_t (*get_ss_entry_number)(
+		struct dc_bios *bios,
+		enum as_signal_type signal);
+	enum bp_result (*get_embedded_panel_info)(
+		struct dc_bios *bios,
+		struct embedded_panel_info *info);
+	enum bp_result (*get_gpio_pin_info)(
+		struct dc_bios *bios,
+		uint32_t gpio_id,
+		struct gpio_pin_info *info);
+	enum bp_result (*get_encoder_cap_info)(
+		struct dc_bios *bios,
+		struct graphics_object_id object_id,
+		struct bp_encoder_cap_info *info);
+	enum bp_result (*get_din_connector_info)(
+		struct dc_bios *bios,
+		struct graphics_object_id id,
+		struct din_connector_info *info);
+
+	bool (*is_lid_status_changed)(
+		struct dc_bios *bios);
+	bool (*is_display_config_changed)(
+		struct dc_bios *bios);
+	bool (*is_accelerated_mode)(
+		struct dc_bios *bios);
+	void (*get_bios_event_info)(
+		struct dc_bios *bios,
+		struct bios_event_info *info);
+	void (*update_requested_backlight_level)(
+		struct dc_bios *bios,
+		uint32_t backlight_8bit);
+	uint32_t (*get_requested_backlight_level)(
+		struct dc_bios *bios);
+	void (*take_backlight_control)(
+		struct dc_bios *bios,
+		bool cntl);
+
+	bool (*is_active_display)(
+		struct dc_bios *bios,
+		enum signal_type signal,
+		const struct connector_device_tag_info *device_tag);
+	enum controller_id (*get_embedded_display_controller_id)(
+		struct dc_bios *bios);
+	uint32_t (*get_embedded_display_refresh_rate)(
+		struct dc_bios *bios);
+
+	void (*set_scratch_critical_state)(
+		struct dc_bios *bios,
+		bool state);
+	bool (*is_device_id_supported)(
+		struct dc_bios *bios,
+		struct device_id id);
+
+	/* COMMANDS */
+
+	enum bp_result (*encoder_control)(
+		struct dc_bios *bios,
+		struct bp_encoder_control *cntl);
+	enum bp_result (*transmitter_control)(
+		struct dc_bios *bios,
+		struct bp_transmitter_control *cntl);
+	enum bp_result (*crt_control)(
+		struct dc_bios *bios,
+		enum engine_id engine_id,
+		bool enable,
+		uint32_t pixel_clock);
+	enum bp_result (*enable_crtc)(
+		struct dc_bios *bios,
+		enum controller_id id,
+		bool enable);
+	enum bp_result (*adjust_pixel_clock)(
+		struct dc_bios *bios,
+		struct bp_adjust_pixel_clock_parameters *bp_params);
+	enum bp_result (*set_pixel_clock)(
+		struct dc_bios *bios,
+		struct bp_pixel_clock_parameters *bp_params);
+	enum bp_result (*set_dce_clock)(
+		struct dc_bios *bios,
+		struct bp_set_dce_clock_parameters *bp_params);
+	enum bp_result (*enable_spread_spectrum_on_ppll)(
+		struct dc_bios *bios,
+		struct bp_spread_spectrum_parameters *bp_params,
+		bool enable);
+	enum bp_result (*program_crtc_timing)(
+		struct dc_bios *bios,
+		struct bp_hw_crtc_timing_parameters *bp_params);
+	enum bp_result (*blank_crtc)(
+		struct dc_bios *bios,
+		struct bp_blank_crtc_parameters *bp_params,
+		bool blank);
+	enum bp_result (*set_overscan)(
+		struct dc_bios *bios,
+		struct bp_hw_crtc_overscan_parameters *bp_params);
+	enum bp_result (*crtc_source_select)(
+		struct dc_bios *bios,
+		struct bp_crtc_source_select *bp_params);
+	enum bp_result (*program_display_engine_pll)(
+		struct dc_bios *bios,
+		struct bp_pixel_clock_parameters *bp_params);
+	enum bp_result (*get_divider_for_target_display_clock)(
+		struct dc_bios *bios,
+		struct bp_display_clock_parameters *bp_params);
+	enum signal_type (*dac_load_detect)(
+		struct dc_bios *bios,
+		struct graphics_object_id encoder,
+		struct graphics_object_id connector,
+		enum signal_type display_signal);
+	enum bp_result (*enable_memory_requests)(
+		struct dc_bios *bios,
+		enum controller_id controller_id,
+		bool enable);
+	enum bp_result (*external_encoder_control)(
+		struct dc_bios *bios,
+		struct bp_external_encoder_control *cntl);
+	enum bp_result (*enable_disp_power_gating)(
+		struct dc_bios *bios,
+		enum controller_id controller_id,
+		enum bp_pipe_control_action action);
+
+	void (*post_init)(struct dc_bios *bios,
+			  struct adapter_service *as);
+
+	struct integrated_info *(*create_integrated_info)(
+		struct dc_bios *bios);
+
+	void (*destroy_integrated_info)(
+		struct dc_bios *dcb,
+		struct integrated_info **info);
+
+	void (*bios_parser_destroy)(struct dc_bios **dcb);
+};
+
+struct dc_bios {
+	const struct dc_vbios_funcs *funcs;
+
+	uint8_t *bios;
+	uint32_t bios_size;
+};
 
 #endif /* DC_BIOS_TYPES_H */
diff --git a/drivers/gpu/drm/amd/dal/include/grph_object_ctrl_defs.h b/drivers/gpu/drm/amd/dal/include/grph_object_ctrl_defs.h
index ab0a972..10909c3 100644
--- a/drivers/gpu/drm/amd/dal/include/grph_object_ctrl_defs.h
+++ b/drivers/gpu/drm/amd/dal/include/grph_object_ctrl_defs.h
@@ -48,16 +48,6 @@ enum display_output_bit_depth {
 	PANEL_16BIT_COLOR = 5,
 };
 
-enum lcd_scale {
-	/* No request to turn on LCD SCALER (Centering or Replication) */
-	LCD_SCALE_NONE = 0,
-	/* Request LCD SCALER in full panel mode */
-	LCD_SCALE_FULLPANEL,
-	/* Request LCD SCALER in aspect-ratio mode */
-	LCD_SCALE_ASPECTRATIO,
-
-	LCD_SCALE_UNKNOWN = (-1L),
-};
 
 /* Device type as abstracted by ATOM BIOS */
 enum dal_device_type {
-- 
2.7.4

