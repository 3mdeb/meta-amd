From 9fea3207e2960718e5ce93188cee0406519c1d5e Mon Sep 17 00:00:00 2001
From: Andrey Grodzovsky <Andrey.Grodzovsky@amd.com>
Date: Fri, 15 Jul 2016 11:29:45 -0400
Subject: [PATCH 0652/1722] drm/amd/dal: Switch in order setting scaler enable
 and number of taps.

Number of taps is not cleared when switching from scaled to non scaled mode.
THis could potentially lead to teprorary corruption when enbaling scaler next
time and still not setting the proper number of taps. Until scaler lock is used
as a work around reverse order of setting taps and enable scaler.

Signed-off-by: Andrey Grodzovsky <Andrey.Grodzovsky@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 .../drm/amd/dal/dc/dce110/dce110_transform_scl.c   | 16 +++++++--------
 .../gpu/drm/amd/dal/dc/dce110/dce110_transform_v.c | 22 ++++++++++-----------
 .../gpu/drm/amd/dal/dc/dce80/dce80_transform_scl.c | 23 +++++++++++-----------
 3 files changed, 30 insertions(+), 31 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_scl.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_scl.c
index 889ab2f..58da5a8 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_scl.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_scl.c
@@ -95,6 +95,14 @@ static bool setup_scaling_configuration(
 		return false;
 	}
 
+	addr = SCL_REG(mmSCL_TAP_CONTROL);
+	value = dm_read_reg(ctx, addr);
+	set_reg_field_value(value, data->taps.h_taps - 1,
+			SCL_TAP_CONTROL, SCL_H_NUM_OF_TAPS);
+	set_reg_field_value(value, data->taps.v_taps - 1,
+			SCL_TAP_CONTROL, SCL_V_NUM_OF_TAPS);
+	dm_write_reg(ctx, addr, value);
+
 	addr = SCL_REG(mmSCL_MODE);
 	value = dm_read_reg(ctx, addr);
 	if (data->format <= PIXEL_FORMAT_GRPH_END)
@@ -104,14 +112,6 @@ static bool setup_scaling_configuration(
 	set_reg_field_value(value, 1, SCL_MODE, SCL_PSCL_EN);
 	dm_write_reg(ctx, addr, value);
 
-	addr = SCL_REG(mmSCL_TAP_CONTROL);
-	value = dm_read_reg(ctx, addr);
-	set_reg_field_value(value, data->taps.h_taps - 1,
-			SCL_TAP_CONTROL, SCL_H_NUM_OF_TAPS);
-	set_reg_field_value(value, data->taps.v_taps - 1,
-			SCL_TAP_CONTROL, SCL_V_NUM_OF_TAPS);
-	dm_write_reg(ctx, addr, value);
-
 	addr = SCL_REG(mmSCL_CONTROL);
 	value = dm_read_reg(ctx, addr);
 	 /* 1 - Replaced out of bound pixels with edge */
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_v.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_v.c
index dd57a81..deaca06 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_v.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_v.c
@@ -179,6 +179,17 @@ static bool setup_scaling_configuration(
 	struct dc_context *ctx = xfm110->base.ctx;
 	uint32_t value = 0;
 
+	set_reg_field_value(value, data->taps.h_taps - 1,
+			SCLV_TAP_CONTROL, SCL_H_NUM_OF_TAPS);
+	set_reg_field_value(value, data->taps.v_taps - 1,
+			SCLV_TAP_CONTROL, SCL_V_NUM_OF_TAPS);
+	set_reg_field_value(value, data->taps.h_taps_c - 1,
+			SCLV_TAP_CONTROL, SCL_H_NUM_OF_TAPS_C);
+	set_reg_field_value(value, data->taps.v_taps_c - 1,
+			SCLV_TAP_CONTROL, SCL_V_NUM_OF_TAPS_C);
+	dm_write_reg(ctx, mmSCLV_TAP_CONTROL, value);
+
+	value = 0;
 	if (data->taps.h_taps + data->taps.v_taps > 2) {
 		set_reg_field_value(value, 1, SCLV_MODE, SCL_MODE);
 		set_reg_field_value(value, 1, SCLV_MODE, SCL_PSCL_EN);
@@ -210,17 +221,6 @@ static bool setup_scaling_configuration(
 	dm_write_reg(ctx, mmSCLV_MODE, value);
 
 	value = 0;
-	set_reg_field_value(value, data->taps.h_taps - 1,
-			SCLV_TAP_CONTROL, SCL_H_NUM_OF_TAPS);
-	set_reg_field_value(value, data->taps.v_taps - 1,
-			SCLV_TAP_CONTROL, SCL_V_NUM_OF_TAPS);
-	set_reg_field_value(value, data->taps.h_taps_c - 1,
-			SCLV_TAP_CONTROL, SCL_H_NUM_OF_TAPS_C);
-	set_reg_field_value(value, data->taps.v_taps_c - 1,
-			SCLV_TAP_CONTROL, SCL_V_NUM_OF_TAPS_C);
-	dm_write_reg(ctx, mmSCLV_TAP_CONTROL, value);
-
-	value = 0;
 	/*
 	 * 0 - Replaced out of bound pixels with black pixel
 	 * (or any other required color)
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_transform_scl.c b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_transform_scl.c
index 53930b9..1e30bbb 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_transform_scl.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_transform_scl.c
@@ -86,18 +86,6 @@ static bool setup_scaling_configuration(
 		dce80_transform_set_scaler_bypass(&xfm80->base, NULL);
 		return false;
 	}
-
-	{
-		addr = SCL_REG(mmSCL_MODE);
-		value = dm_read_reg(ctx, addr);
-
-		if (data->format <= PIXEL_FORMAT_GRPH_END)
-			set_reg_field_value(value, 1, SCL_MODE, SCL_MODE);
-		else
-			set_reg_field_value(value, 2, SCL_MODE, SCL_MODE);
-
-		dm_write_reg(ctx, addr, value);
-	}
 	{
 		addr = SCL_REG(mmSCL_TAP_CONTROL);
 		value = dm_read_reg(ctx, addr);
@@ -111,6 +99,17 @@ static bool setup_scaling_configuration(
 		dm_write_reg(ctx, addr, value);
 	}
 	{
+		addr = SCL_REG(mmSCL_MODE);
+		value = dm_read_reg(ctx, addr);
+
+		if (data->format <= PIXEL_FORMAT_GRPH_END)
+			set_reg_field_value(value, 1, SCL_MODE, SCL_MODE);
+		else
+			set_reg_field_value(value, 2, SCL_MODE, SCL_MODE);
+
+		dm_write_reg(ctx, addr, value);
+	}
+	{
 		addr = SCL_REG(mmSCL_CONTROL);
 		value = dm_read_reg(ctx, addr);
 		 /* 1 - Replaced out of bound pixels with edge */
-- 
2.7.4

