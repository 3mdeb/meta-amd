From 5d5b52c7cb29e2029831b3af34a7fc4668e21334 Mon Sep 17 00:00:00 2001
From: Mykola Lysenko <Mykola.Lysenko@amd.com>
Date: Thu, 19 May 2016 18:31:54 +0800
Subject: [PATCH 0500/1722] drm/amd/dal: unify add remote sink interface

Signed-off-by: Mykola Lysenko <Mykola.Lysenko@amd.com>
Acked-by: Jordan Lazare <Jordan.Lazare@amd.com>
Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 .../drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c    |   4 +-
 drivers/gpu/drm/amd/dal/dc/core/dc.c               | 113 ++++++++++-----------
 drivers/gpu/drm/amd/dal/dc/dc.h                    |  16 ++-
 3 files changed, 65 insertions(+), 68 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c
index f4b2812..0ab90e4 100644
--- a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c
+++ b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c
@@ -358,8 +358,8 @@ static void dm_dp_mst_hotplug(struct drm_dp_mst_topology_mgr *mgr)
 
 				aconnector->edid = edid;
 
-				aconnector->dc_sink = dc_add_remote_sink(
-					adev->dm.dc,
+				aconnector->dc_sink = dc_link_add_remote_sink(
+					aconnector->dc_link,
 					(uint8_t *)edid,
 					(edid->extensions + 1) * EDID_LENGTH,
 					&init_params);
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc.c b/drivers/gpu/drm/amd/dal/dc/core/dc.c
index b5ac4c9..00432aa 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc.c
@@ -1377,9 +1377,8 @@ bool dc_submit_i2c(
 		cmd);
 }
 
-bool dc_link_add_remote_sink(const struct dc_link *link, struct dc_sink *sink)
+static bool link_add_remote_sink_helper(struct core_link *core_link, struct dc_sink *sink)
 {
-	struct core_link *core_link = DC_LINK_TO_LINK(link);
 	struct dc_link *dc_link = &core_link->public;
 
 	if (dc_link->sink_count >= MAX_SINKS_PER_LINK) {
@@ -1389,12 +1388,66 @@ bool dc_link_add_remote_sink(const struct dc_link *link, struct dc_sink *sink)
 
 	dc_sink_retain(sink);
 
-	dc_link->remote_sinks[link->sink_count] = sink;
+	dc_link->remote_sinks[dc_link->sink_count] = sink;
 	dc_link->sink_count++;
 
 	return true;
 }
 
+struct dc_sink *dc_link_add_remote_sink(
+		const struct dc_link *link,
+		const uint8_t *edid,
+		int len,
+		struct dc_sink_init_data *init_data)
+{
+	struct dc_sink *dc_sink;
+	enum dc_edid_status edid_status;
+	struct core_link *core_link = DC_LINK_TO_LINK(link);
+
+	if (len > MAX_EDID_BUFFER_SIZE) {
+		dm_error("Max EDID buffer size breached!\n");
+		return NULL;
+	}
+
+	if (!init_data) {
+		BREAK_TO_DEBUGGER();
+		return NULL;
+	}
+
+	if (!init_data->link) {
+		BREAK_TO_DEBUGGER();
+		return NULL;
+	}
+
+	dc_sink = dc_sink_create(init_data);
+
+	if (!dc_sink)
+		return NULL;
+
+	memmove(dc_sink->dc_edid.raw_edid, edid, len);
+	dc_sink->dc_edid.length = len;
+
+	if (!link_add_remote_sink_helper(
+			core_link,
+			dc_sink))
+		goto fail_add_sink;
+
+	edid_status = dm_helpers_parse_edid_caps(
+			core_link->ctx,
+			&dc_sink->dc_edid,
+			&dc_sink->edid_caps);
+
+	if (edid_status != EDID_OK)
+		goto fail;
+
+	return dc_sink;
+fail:
+	dc_link_remove_remote_sink(link, dc_sink);
+fail_add_sink:
+	dc_sink_release(dc_sink);
+	return NULL;
+}
+
 void dc_link_set_sink(const struct dc_link *link, struct dc_sink *sink)
 {
 	struct core_link *core_link = DC_LINK_TO_LINK(link);
@@ -1444,57 +1497,3 @@ const struct dc_stream_status *dc_stream_get_status(
 
 	return &stream->status;
 }
-
-struct dc_sink *dc_add_remote_sink(
-		struct dc *dc,
-		const uint8_t *edid,
-		int len,
-		struct dc_sink_init_data *init_data)
-{
-	struct dc_sink *dc_sink;
-	enum dc_edid_status edid_status;
-	struct core_dc *core_dc = DC_TO_CORE(dc);
-
-	if (len > MAX_EDID_BUFFER_SIZE) {
-		dm_error("Max EDID buffer size breached!\n");
-		return NULL;
-	}
-
-	if (!init_data) {
-		BREAK_TO_DEBUGGER();
-		return NULL;
-	}
-
-	if (!init_data->link) {
-		BREAK_TO_DEBUGGER();
-		return NULL;
-	}
-
-	dc_sink = dc_sink_create(init_data);
-
-	if (!dc_sink)
-		return NULL;
-
-	memmove(dc_sink->dc_edid.raw_edid, edid, len);
-	dc_sink->dc_edid.length = len;
-
-	if (!dc_link_add_remote_sink(
-			init_data->link,
-			dc_sink))
-		goto fail_add_sink;
-
-	edid_status = dm_helpers_parse_edid_caps(
-			core_dc->ctx,
-			&dc_sink->dc_edid,
-			&dc_sink->edid_caps);
-
-	if (edid_status != EDID_OK)
-		goto fail;
-
-	return dc_sink;
-fail:
-	dc_link_remove_remote_sink(init_data->link, dc_sink);
-fail_add_sink:
-	dc_sink_release(dc_sink);
-	return NULL;
-}
diff --git a/drivers/gpu/drm/amd/dal/dc/dc.h b/drivers/gpu/drm/amd/dal/dc/dc.h
index 8e5c8e4..804a5a9 100644
--- a/drivers/gpu/drm/amd/dal/dc/dc.h
+++ b/drivers/gpu/drm/amd/dal/dc/dc.h
@@ -318,14 +318,6 @@ bool dc_commit_targets(
 		struct dc_target *targets[],
 		uint8_t target_count);
 
-struct dc_sink_init_data;
-
-struct dc_sink *dc_add_remote_sink(
-		struct dc *dc,
-		const uint8_t *edid,
-		int len,
-		struct dc_sink_init_data *init_data);
-
 /*******************************************************************************
  * Stream Interfaces
  ******************************************************************************/
@@ -431,7 +423,13 @@ bool dc_link_detect(const struct dc_link *dc_link, bool boot);
  * from DM. */
 bool dc_link_handle_hpd_rx_irq(const struct dc_link *dc_link);
 
-bool dc_link_add_remote_sink(const struct dc_link *link, struct dc_sink *sink);
+struct dc_sink_init_data;
+
+struct dc_sink *dc_link_add_remote_sink(
+		const struct dc_link *dc_link,
+		const uint8_t *edid,
+		int len,
+		struct dc_sink_init_data *init_data);
 
 void dc_link_remove_remote_sink(
 	const struct dc_link *link,
-- 
2.7.4

