From 0f47df1ad6bc46414eb3f4e1eeaee8daec04ac7c Mon Sep 17 00:00:00 2001
From: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date: Mon, 27 Jun 2016 18:21:12 -0400
Subject: [PATCH 0833/1722] drm/amd/dal: update stream now does front end
 programming

Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 .../gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c    | 13 +++--
 drivers/gpu/drm/amd/dal/dc/core/dc.c               | 63 +++++++++++++++++++---
 drivers/gpu/drm/amd/dal/dc/core/dc_resource.c      | 16 +++---
 drivers/gpu/drm/amd/dal/dc/core/dc_stream.c        | 11 ----
 drivers/gpu/drm/amd/dal/dc/core/dc_surface.c       |  2 +-
 drivers/gpu/drm/amd/dal/dc/dc.h                    | 29 ++++++----
 .../drm/amd/dal/dc/dce110/dce110_hw_sequencer.c    |  2 +-
 drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h      |  2 +-
 drivers/gpu/drm/amd/dal/dc/inc/resource.h          |  2 +-
 9 files changed, 97 insertions(+), 43 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c
index cd6f1e0..68b433f 100644
--- a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c
+++ b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c
@@ -591,6 +591,7 @@ static void update_stream_scaling_settings(
 		const struct dm_connector_state *dm_state,
 		const struct dc_stream *stream)
 {
+	struct amdgpu_device *adev = dm_state->base.crtc->dev->dev_private;
 	enum amdgpu_rmx_type rmx_type;
 
 	struct rect src = { 0 }; /* viewport in target space*/
@@ -628,7 +629,7 @@ static void update_stream_scaling_settings(
 		dst.height -= dm_state->underscan_vborder;
 	}
 
-	dc_update_stream(stream, &src, &dst);
+	adev->dm.dc->stream_funcs.stream_update_scaling(adev->dm.dc, stream, &src, &dst);
 
 	DRM_DEBUG_KMS("Destination Rectangle x:%d  y:%d  width:%d  height:%d\n",
 			dst.x, dst.y, dst.width, dst.height);
@@ -640,6 +641,7 @@ static void dm_dc_surface_commit(
 		struct drm_crtc *crtc)
 {
 	struct dc_surface *dc_surface;
+	const struct dc_surface *dc_surfaces[1];
 	const struct amdgpu_crtc *acrtc = to_amdgpu_crtc(crtc);
 	struct dc_target *dc_target = acrtc->target;
 
@@ -669,9 +671,11 @@ static void dm_dc_surface_commit(
 			~AMDGPU_CRTC_MODE_PRIVATE_FLAGS_GAMMASET;
 	}
 
+	dc_surfaces[0] = dc_surface;
+
 	if (false == dc_commit_surfaces_to_target(
 			dc,
-			&dc_surface,
+			dc_surfaces,
 			1,
 			dc_target)) {
 		dm_error(
@@ -2505,7 +2509,10 @@ int amdgpu_dm_atomic_commit(
 			dm_state = to_dm_connector_state(aconnector->base.state);
 
 			/* Scaling update */
-			update_stream_scaling_settings(&crtc->state->mode, dm_state, acrtc->target->streams[0]);
+			update_stream_scaling_settings(
+					&crtc->state->mode,
+					dm_state,
+					acrtc->target->streams[0]);
 
 			break;
 		}
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc.c b/drivers/gpu/drm/amd/dal/dc/core/dc.c
index d24ab30..9a4c7b6 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc.c
@@ -229,6 +229,7 @@ static bool stream_adjust_vmin_vmax(struct dc *dc,
 	return ret;
 }
 
+
 static bool set_gamut_remap(struct dc *dc,
 			const struct dc_stream **stream, int num_streams)
 {
@@ -252,8 +253,53 @@ static bool set_gamut_remap(struct dc *dc,
 	return ret;
 }
 
+
+/* This function is not expected to fail, proper implementation of
+ * validation will prevent this from ever being called for unsupported
+ * configurations.
+ */
+static void stream_update_scaling(
+		const struct dc *dc,
+		const struct dc_stream *dc_stream,
+		const struct rect *src,
+		const struct rect *dst)
+{
+	struct core_stream *stream = DC_STREAM_TO_CORE(dc_stream);
+	struct core_dc *core_dc = DC_TO_CORE(dc);
+	struct validate_context *cur_ctx = core_dc->current_context;
+	int i, j;
+
+	if (src)
+		stream->public.src = *src;
+
+	if (dst)
+		stream->public.dst = *dst;
+
+	for (i = 0; i < cur_ctx->target_count; i++) {
+		struct core_target *target = cur_ctx->targets[i];
+		struct dc_target_status *status = &cur_ctx->target_status[i];
+
+		for (j = 0; j < target->public.stream_count; j++) {
+			if (target->public.streams[j] != dc_stream)
+				continue;
+
+			if (status->surface_count)
+				if (!dc_commit_surfaces_to_target(
+						&core_dc->public,
+						status->surfaces,
+						status->surface_count,
+						&target->public))
+					/* Need to debug validation */
+					BREAK_TO_DEBUGGER();
+
+			return;
+		}
+	}
+}
+
 static void allocate_dc_stream_funcs(struct core_dc *core_dc)
 {
+	core_dc->public.stream_funcs.stream_update_scaling = stream_update_scaling;
 	if (core_dc->hwss.set_drr != NULL) {
 		core_dc->public.stream_funcs.adjust_vmin_vmax =
 				stream_adjust_vmin_vmax;
@@ -902,7 +948,7 @@ context_alloc_fail:
 
 bool dc_pre_commit_surfaces_to_target(
 		struct dc *dc,
-		struct dc_surface *new_surfaces[],
+		const struct dc_surface **new_surfaces,
 		uint8_t new_surface_count,
 		struct dc_target *dc_target)
 {
@@ -1031,7 +1077,7 @@ val_ctx_fail:
 
  bool dc_isr_commit_surfaces_to_target(
                 struct dc *dc,
-                struct dc_surface *new_surfaces[],
+                const struct dc_surface **new_surfaces,
                 int new_surface_count,
                 struct dc_target *dc_target)
 {
@@ -1134,8 +1180,8 @@ bool dc_post_commit_surfaces_to_target(struct dc *dc)
 }
 
 bool dc_commit_surfaces_to_target(
-               struct dc *dc,
-                struct dc_surface *new_surfaces[],
+                struct dc *dc,
+                const struct dc_surface **new_surfaces,
                 uint8_t new_surface_count,
                 struct dc_target *dc_target)
 {
@@ -1157,7 +1203,7 @@ bool dc_commit_surfaces_to_target(
 
 bool dc_update_surfaces_for_target(
 		struct dc *dc,
-		struct dc_surface *new_surfaces[],
+		const struct dc_surface **new_surfaces,
 		uint8_t new_surface_count,
 		struct dc_target *dc_target)
 
@@ -1189,7 +1235,10 @@ bool dc_update_surfaces_for_target(
 	}
 
 	if (!resource_attach_surfaces_to_context(
-			new_surfaces, new_surface_count, dc_target, context)) {
+			new_surfaces,
+			new_surface_count,
+			dc_target,
+			context)) {
 		BREAK_TO_DEBUGGER();
 		return false;
 	}
@@ -1259,7 +1308,7 @@ const struct audio **dc_get_audios(struct dc *dc)
 void dc_flip_surface_addrs_on_context(
                 struct dc *dc,
                 struct validate_context *context,
-                const struct dc_surface *const surfaces[],
+                const struct dc_surface *const *surfaces,
                 struct dc_flip_addrs flip_addrs[],
                 uint32_t count)
 {
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c b/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
index b0ef24d..e18fced 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
@@ -631,7 +631,7 @@ static void release_free_pipes_for_target(
 }
 
 bool resource_attach_surfaces_to_context(
-		struct dc_surface *surfaces[],
+		const struct dc_surface * const *surfaces,
 		int surface_count,
 		const struct dc_target *dc_target,
 		struct validate_context *context)
@@ -664,10 +664,11 @@ bool resource_attach_surfaces_to_context(
 	detach_surfaces_for_target(context, dc_target);
 
 	/* release existing surfaces*/
-	for (i = 0; i < target_status->surface_count; i++) {
+	for (i = 0; i < target_status->surface_count; i++)
 		dc_surface_release(target_status->surfaces[i]);
+
+	for (i = surface_count; i < target_status->surface_count; i++)
 		target_status->surfaces[i] = NULL;
-	}
 
 	target_status->surface_count = 0;
 
@@ -680,8 +681,10 @@ bool resource_attach_surfaces_to_context(
 		struct pipe_ctx *free_pipe = acquire_free_pipe_for_target(
 				&context->res_ctx, dc_target);
 
-		if (!free_pipe)
+		if (!free_pipe) {
+			target_status->surfaces[i] = NULL;
 			return false;
+		}
 
 		free_pipe->surface = surface;
 
@@ -775,8 +778,7 @@ bool resource_validate_attach_surfaces(
 					old_context->targets[j],
 					context->targets[i])) {
 				if (!resource_attach_surfaces_to_context(
-						(struct dc_surface **) old_context->
-							target_status[j].surfaces,
+						old_context->target_status[j].surfaces,
 						old_context->target_status[j].surface_count,
 						&context->targets[i]->public,
 						context))
@@ -785,7 +787,7 @@ bool resource_validate_attach_surfaces(
 			}
 		if (set[i].surface_count != 0)
 			if (!resource_attach_surfaces_to_context(
-					(struct dc_surface **) set[i].surfaces,
+					set[i].surfaces,
 					set[i].surface_count,
 					&context->targets[i]->public,
 					context))
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_stream.c b/drivers/gpu/drm/amd/dal/dc/core/dc_stream.c
index 8a3d19b..01fa198 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_stream.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_stream.c
@@ -136,14 +136,3 @@ construct_fail:
 alloc_fail:
 	return NULL;
 }
-
-void dc_update_stream(const struct dc_stream *dc_stream,
-		struct rect *src,
-		struct rect *dst)
-{
-	struct core_stream *stream = DC_STREAM_TO_CORE(dc_stream);
-
-	stream->public.src = *src;
-	stream->public.dst = *dst;
-}
-
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_surface.c b/drivers/gpu/drm/amd/dal/dc/core/dc_surface.c
index c43150f..30ed228 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_surface.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_surface.c
@@ -103,7 +103,7 @@ alloc_fail:
 }
 
 const struct dc_surface_status *dc_surface_get_status(
-		struct dc_surface *dc_surface)
+		const struct dc_surface *dc_surface)
 {
 	struct dc_surface_status *surface_status;
 	struct core_surface *core_surface;
diff --git a/drivers/gpu/drm/amd/dal/dc/dc.h b/drivers/gpu/drm/amd/dal/dc/dc.h
index 1a0e913..aa920b0 100644
--- a/drivers/gpu/drm/amd/dal/dc/dc.h
+++ b/drivers/gpu/drm/amd/dal/dc/dc.h
@@ -55,8 +55,18 @@ struct dc_surface;
 struct validate_context;
 
 struct dc_stream_funcs {
-	bool (*adjust_vmin_vmax)(struct dc *dc,
-			const struct dc_stream **stream, int num_streams, int vmin, int vmax);
+	bool (*adjust_vmin_vmax)(
+			struct dc *dc,
+			const struct dc_stream **stream,
+			int num_streams,
+			int vmin,
+			int vmax);
+
+	void (*stream_update_scaling)(
+			const struct dc *dc,
+			const struct dc_stream *dc_stream,
+			const struct rect *src,
+			const struct rect *dst);
 	bool (*set_gamut_remap)(struct dc *dc,
 			const struct dc_stream **stream, int num_streams);
 };
@@ -176,7 +186,7 @@ struct dc_surface_status {
  */
 struct dc_surface *dc_create_surface(const struct dc *dc);
 const struct dc_surface_status *dc_surface_get_status(
-		struct dc_surface *dc_surface);
+		const struct dc_surface *dc_surface);
 
 void dc_surface_retain(const struct dc_surface *dc_surface);
 void dc_surface_release(const struct dc_surface *dc_surface);
@@ -223,25 +233,25 @@ void dc_flip_surface_addrs(struct dc *dc,
 void dc_flip_surface_addrs_on_context(
 		struct dc *dc,
 		struct validate_context *context,
-		const struct dc_surface *const surfaces[],
+		const struct dc_surface *const *surfaces,
 		struct dc_flip_addrs flip_addrs[],
 		uint32_t count);
 
 bool dc_commit_surfaces_to_target(
 		struct dc *dc,
-		struct dc_surface *dc_surfaces[],
+		const struct dc_surface **dc_surfaces,
 		uint8_t surface_count,
 		struct dc_target *dc_target);
 
 bool dc_pre_commit_surfaces_to_target(
 		struct dc *dc,
-		struct dc_surface *new_surfaces[],
+		const struct dc_surface **new_surfaces,
 		uint8_t new_surface_count,
 		struct dc_target *dc_target);
 
 bool dc_isr_commit_surfaces_to_target(
 		struct dc *dc,
-		struct dc_surface *new_surfaces[],
+		const struct dc_surface **new_surfaces,
 		int new_surface_count,
 		struct dc_target *dc_target);
 
@@ -251,7 +261,7 @@ bool dc_post_commit_surfaces_to_target(
 
 bool dc_update_surfaces_for_target(
 		struct dc *dc,
-		struct dc_surface *dc_surfaces[],
+		const struct dc_surface **dc_surfaces,
 		uint8_t surface_count,
 		struct dc_target *dc_target);
 
@@ -393,9 +403,6 @@ struct dc_stream *dc_create_stream_for_sink(const struct dc_sink *dc_sink);
 void dc_stream_retain(const struct dc_stream *dc_stream);
 void dc_stream_release(const struct dc_stream *dc_stream);
 
-void dc_update_stream(const struct dc_stream *dc_stream,
-		struct rect *src, struct rect *dst);
-
 struct dc_stream_status {
 	/*
 	 * link this stream passes through
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
index 5a96d05..cca84dd 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
@@ -2100,7 +2100,7 @@ static void dce110_apply_ctx_to_surface(
 static void update_plane_surface(
 	struct core_dc *dc,
 	struct validate_context *context,
-	struct dc_surface *new_surfaces[],
+	const struct dc_surface **new_surfaces,
 	uint8_t new_surface_count)
 {
 	int i, j;
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h b/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h
index 2bd09dc..4868b3a 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h
@@ -74,7 +74,7 @@ struct hw_sequencer_funcs {
 	void (*update_plane_surface)(
 		struct core_dc *dc,
 		struct validate_context *context,
-		struct dc_surface *new_surfaces[],
+		const struct dc_surface **new_surfaces,
 		uint8_t new_surface_count);
 
 	bool (*set_gamma_correction)(
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/resource.h b/drivers/gpu/drm/amd/dal/dc/inc/resource.h
index 4014a74..23c3c6a 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/resource.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/resource.h
@@ -81,7 +81,7 @@ struct pipe_ctx *resource_get_head_pipe_for_stream(
 		const struct core_stream *stream);
 
 bool resource_attach_surfaces_to_context(
-		struct dc_surface *surfaces[],
+		const struct dc_surface *const *surfaces,
 		int surface_count,
 		const struct dc_target *dc_target,
 		struct validate_context *context);
-- 
2.7.4

