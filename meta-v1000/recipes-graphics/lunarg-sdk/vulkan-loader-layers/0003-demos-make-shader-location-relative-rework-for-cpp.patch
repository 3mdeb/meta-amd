From e060abaa2d01f065348fe0b34932719c96e8f7f2 Mon Sep 17 00:00:00 2001
From: Awais Belal <awais_belal@mentor.com>
Date: Wed, 31 May 2017 13:59:01 +0500
Subject: [PATCH 3/3] demos: make shader location relative/rework for cpp

Signed-off-by: Awais Belal <awais_belal@mentor.com>
---
 demos/cube.c | 66 +++++++++++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 61 insertions(+), 5 deletions(-)

diff --git a/demos/cube.c b/demos/cube.c
index 10ec60d4d..9ebe51f77 100644
--- a/demos/cube.c
+++ b/demos/cube.c
@@ -33,6 +33,7 @@
 #include <stdbool.h>
 #include <assert.h>
 #include <signal.h>
+#include <unistd.h>
 #if defined(VK_USE_PLATFORM_XLIB_KHR) || defined(VK_USE_PLATFORM_XCB_KHR)
 #include <X11/Xutil.h>
 #endif
@@ -449,6 +450,8 @@ struct demo {
 
     uint32_t current_buffer;
     uint32_t queue_family_count;
+
+    char bin_path[255];
 };
 
 VKAPI_ATTR VkBool32 VKAPI_CALL dbgFunc(VkFlags msgFlags, VkDebugReportObjectTypeEXT objType, uint64_t srcObject, size_t location,
@@ -1625,18 +1628,27 @@ static void demo_prepare_textures(struct demo *demo) {
     const VkFormat tex_format = VK_FORMAT_R8G8B8A8_UNORM;
     VkFormatProperties props;
     uint32_t i;
+    char tex_file[255];
 
     vkGetPhysicalDeviceFormatProperties(demo->gpu, tex_format, &props);
 
     for (i = 0; i < DEMO_TEXTURE_COUNT; i++) {
         VkResult U_ASSERT_ONLY err;
 
+        if (strlen(demo->bin_path) > 0) {
+            strcpy(tex_file, demo->bin_path);
+            strcat(tex_file, "/");
+            strcat(tex_file, tex_files[i]);
+        }
+        else
+            strcpy(tex_file, tex_files[i]);
+
         if ((props.linearTilingFeatures &
              VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT) &&
             !demo->use_staging_buffer) {
             /* Device can texture using linear textures */
             demo_prepare_texture_image(
-                demo, tex_files[i], &demo->textures[i], VK_IMAGE_TILING_LINEAR,
+                demo, tex_file, &demo->textures[i], VK_IMAGE_TILING_LINEAR,
                 VK_IMAGE_USAGE_SAMPLED_BIT,
                 VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT |
                     VK_MEMORY_PROPERTY_HOST_COHERENT_BIT);
@@ -1653,13 +1665,13 @@ static void demo_prepare_textures(struct demo *demo) {
 
             memset(&demo->staging_texture, 0, sizeof(demo->staging_texture));
             demo_prepare_texture_image(
-                demo, tex_files[i], &demo->staging_texture, VK_IMAGE_TILING_LINEAR,
+                demo, tex_file, &demo->staging_texture, VK_IMAGE_TILING_LINEAR,
                 VK_IMAGE_USAGE_TRANSFER_SRC_BIT,
                 VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT |
                     VK_MEMORY_PROPERTY_HOST_COHERENT_BIT);
 
             demo_prepare_texture_image(
-                demo, tex_files[i], &demo->textures[i], VK_IMAGE_TILING_OPTIMAL,
+                demo, tex_file, &demo->textures[i], VK_IMAGE_TILING_OPTIMAL,
                 (VK_IMAGE_USAGE_TRANSFER_DST_BIT | VK_IMAGE_USAGE_SAMPLED_BIT),
                 VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);
 
@@ -2000,8 +2012,17 @@ static VkShaderModule demo_prepare_vs(struct demo *demo) {
 #else
     void *vertShaderCode;
     size_t size;
+    char fname[255];
 
-    vertShaderCode = demo_read_spv("cube-vert.spv", &size);
+    if (strlen(demo->bin_path) > 0) {
+        strcpy(fname, demo->bin_path);
+        strcat(fname, "/");
+        strcat(fname, "cube-vert.spv");
+    }
+    else
+        strcpy(fname, "cube-vert.spv");
+
+    vertShaderCode = demo_read_spv(fname, &size);
     if (!vertShaderCode) {
         ERR_EXIT("Failed to load cube-vert.spv", "Load Shader Failure");
     }
@@ -2028,8 +2049,17 @@ static VkShaderModule demo_prepare_fs(struct demo *demo) {
 #else
     void *fragShaderCode;
     size_t size;
+    char fname[255];
+
+    if (strlen(demo->bin_path) > 0) {
+        strcpy(fname, demo->bin_path);
+        strcat(fname, "/");
+        strcat(fname, "cube-frag.spv");
+    }
+    else
+        strcpy(fname, "cube-frag.spv");
 
-    fragShaderCode = demo_read_spv("cube-frag.spv", &size);
+    fragShaderCode = demo_read_spv(fname, &size);
     if (!fragShaderCode) {
         ERR_EXIT("Failed to load cube-frag.spv", "Load Shader Failure");
     }
@@ -3795,6 +3825,30 @@ static void demo_init_connection(struct demo *demo) {
 #endif
 }
 
+static void find_bin_path(char *in_arg, char *ret_path) {
+    char *ptr = getenv("PATH");
+    char *pch_temp;
+    char pch[255];
+
+    if (access(in_arg, F_OK ) == 0) {
+        pch_temp = strrchr(in_arg, '/');
+        strncpy(ret_path, in_arg, strlen(in_arg) - strlen(pch_temp));
+    } else if (in_arg[0] != '/') {
+        pch_temp = strtok(ptr, ":");
+        while (pch_temp != NULL) {
+            strcpy(pch, pch_temp);
+            strcat(pch, "/");
+            strcat(pch, in_arg);
+            if ((access(pch, F_OK ) == 0)) {
+                strcpy(ret_path, pch_temp);
+                break;
+            }
+            else
+                pch_temp = strtok(NULL, ":");
+        }
+    }
+}
+
 static void demo_init(struct demo *demo, int argc, char **argv) {
     vec3 eye = {0.0f, 3.0f, 5.0f};
     vec3 origin = {0, 0, 0};
@@ -3884,6 +3938,8 @@ static void demo_init(struct demo *demo, int argc, char **argv) {
     mat4x4_identity(demo->model_matrix);
 
     demo->projection_matrix[1][1]*=-1;  //Flip projection matrix from GL to Vulkan orientation.
+
+    find_bin_path(argv[0], demo->bin_path);
 }
 
 #if defined(VK_USE_PLATFORM_WIN32_KHR)
-- 
2.11.1

