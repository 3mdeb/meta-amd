From 4bbad6a36ed6416d254a8c0e4bbab07fe29a7acf Mon Sep 17 00:00:00 2001
From: Junwei Zhang <Jerry.Zhang@amd.com>
Date: Wed, 21 Sep 2016 10:43:40 +0800
Subject: [PATCH 02/10] amdgpu: add vram memory info
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Change-Id: Ic73eb5ad601496530be5e8c84a6c2b18aa43f0f1
Signed-off-by: Junwei Zhang <Jerry.Zhang@amd.com>
Reviewed-by: Christian KÃ¶nig <christian.koenig@amd.com>
---
 amdgpu/amdgpu.h          | 50 ++++++++++++++++++++++++++++++++++++++++++
 amdgpu/amdgpu_gpu_info.c | 57 ++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 107 insertions(+)

diff --git a/amdgpu/amdgpu.h b/amdgpu/amdgpu.h
index 8b87990..7b466dd 100644
--- a/amdgpu/amdgpu.h
+++ b/amdgpu/amdgpu.h
@@ -415,6 +415,40 @@ struct amdgpu_heap_info {
 	uint64_t max_allocation;
 };
 
+struct amdgpu_heap_info2 {
+	/** max. physical memory */
+	uint64_t total_heap_size;
+
+	/** Theoretical max. available memory in the given heap */
+	uint64_t usable_heap_size;
+
+	/**
+	 * Number of bytes allocated in the heap. This includes all processes
+	 * and private allocations in the kernel. It changes when new buffers
+	 * are allocated, freed, and moved. It cannot be larger than
+	 * heap_size.
+	 */
+	uint64_t heap_usage;
+
+	/**
+	 * Theoretical possible max. size of buffer which
+	 * could be allocated in the given heap
+	 */
+	uint64_t max_allocation;
+};
+
+/**
+ * Structure which provide information about heap
+ *
+ * \sa amdgpu_query_memory_info()
+ *
+ */
+struct amdgpu_memory_info {
+	struct amdgpu_heap_info2 vram;
+	struct amdgpu_heap_info2 cpu_accessible_vram;
+	struct amdgpu_heap_info2 gtt;
+};
+
 /**
  * Describe GPU h/w info needed for UMD correct initialization
  *
@@ -1141,6 +1175,22 @@ int amdgpu_query_heap_info(amdgpu_device_handle dev, uint32_t heap,
 			   uint32_t flags, struct amdgpu_heap_info *info);
 
 /**
+ * Query memory information
+ *
+ * This query allows UMD to query potentially available memory resources
+ * and total memory size.
+ *
+ * \param   dev  - \c [in] Device handle. See #amdgpu_device_initialize()
+ * \param   mem  - \c [out] Pointer to structure to get memory information
+ *
+ * \return   0 on success\n
+ *          <0 - Negative POSIX Error code
+ *
+*/
+int amdgpu_query_memory_info(amdgpu_device_handle dev,
+			struct amdgpu_memory_info *mem);
+
+/**
  * Get the CRTC ID from the mode object ID
  *
  * \param   dev    - \c [in] Device handle. See #amdgpu_device_initialize()
diff --git a/amdgpu/amdgpu_gpu_info.c b/amdgpu/amdgpu_gpu_info.c
index d801b86..d3796ac 100644
--- a/amdgpu/amdgpu_gpu_info.c
+++ b/amdgpu/amdgpu_gpu_info.c
@@ -243,6 +243,63 @@ int amdgpu_query_gpu_info(amdgpu_device_handle dev,
 	return 0;
 }
 
+int amdgpu_query_memory_info(amdgpu_device_handle dev,
+			struct amdgpu_memory_info *mem)
+{
+	struct drm_amdgpu_info_vram_gtt vram_gtt_info = {};
+	struct drm_amdgpu_info_vram_gtt_total vram_gtt_total_info = {};
+	struct drm_amdgpu_info_vram_gtt_max vram_gtt_max_info = {};
+	int r;
+
+	r = amdgpu_query_info(dev, AMDGPU_INFO_VRAM_GTT,
+			      sizeof(vram_gtt_info), &vram_gtt_info);
+	if (r)
+		return r;
+
+	r = amdgpu_query_info(dev, AMDGPU_INFO_VRAM_GTT_TOTAL,
+			      sizeof(vram_gtt_total_info), &vram_gtt_total_info);
+	if (r)
+		return r;
+
+	r = amdgpu_query_info(dev, AMDGPU_INFO_VRAM_GTT_MAX,
+			      sizeof(vram_gtt_max_info), &vram_gtt_max_info);
+	if (r)
+		return r;
+
+	/* vram info */
+	mem->vram.total_heap_size = vram_gtt_total_info.vram_total_size;
+	mem->vram.usable_heap_size = vram_gtt_info.vram_size;
+	mem->vram.max_allocation = vram_gtt_max_info.vram_max_size;
+	r = amdgpu_query_info(dev, AMDGPU_INFO_VRAM_USAGE,
+			      sizeof(mem->vram.heap_usage),
+			      &mem->vram.heap_usage);
+	if (r)
+		return r;
+
+	/* visible vram info */
+	mem->cpu_accessible_vram.total_heap_size = vram_gtt_total_info.vram_cpu_accessible_total_size;
+	mem->cpu_accessible_vram.usable_heap_size = vram_gtt_info.vram_cpu_accessible_size;
+	mem->cpu_accessible_vram.max_allocation = vram_gtt_max_info.vram_cpu_accessible_max_size;
+	r = amdgpu_query_info(dev, AMDGPU_INFO_VIS_VRAM_USAGE,
+			      sizeof(mem->cpu_accessible_vram.heap_usage),
+			      &mem->cpu_accessible_vram.heap_usage);
+	if (r)
+		return r;
+
+	/* gtt info */
+	mem->gtt.total_heap_size = vram_gtt_total_info.gtt_total_size;
+	mem->gtt.usable_heap_size = vram_gtt_info.gtt_size;
+	mem->gtt.max_allocation = vram_gtt_max_info.gtt_max_size;
+
+	r = amdgpu_query_info(dev, AMDGPU_INFO_GTT_USAGE,
+			sizeof(mem->gtt.heap_usage),
+			&mem->gtt.heap_usage);
+	if (r)
+		return r;
+
+	return 0;
+}
+
 int amdgpu_query_heap_info(amdgpu_device_handle dev,
 			uint32_t heap,
 			uint32_t flags,
-- 
2.7.4

