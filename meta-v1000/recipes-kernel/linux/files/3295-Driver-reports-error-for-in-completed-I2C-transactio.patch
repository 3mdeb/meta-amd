From 7f630650e409c5af70661068d2393694986c5374 Mon Sep 17 00:00:00 2001
From: Sudheesh Mavila <sudheesh.mavila@amd.com>
Date: Wed, 17 Jan 2018 14:14:10 +0530
Subject: [PATCH 3295/5855] Driver reports error for in completed I2C
 transaction

Signed-off-by: Kripa Shree <Kripa.Shree@amd.com>
Signed-off-by: Sudheesh Mavila <sudheesh.mavila@amd.com>
---
 drivers/i2c/busses/i2c-designware-core.c | 22 ++++++++++++++++------
 1 file changed, 16 insertions(+), 6 deletions(-)

diff --git a/drivers/i2c/busses/i2c-designware-core.c b/drivers/i2c/busses/i2c-designware-core.c
index 809f4d4..574523f 100644
--- a/drivers/i2c/busses/i2c-designware-core.c
+++ b/drivers/i2c/busses/i2c-designware-core.c
@@ -263,14 +263,14 @@ static void __i2c_dw_enable(struct dw_i2c_dev *dev, bool enable)
 	dw_writel(dev, enable, DW_IC_ENABLE);
 }
 
-static void __i2c_dw_enable_and_wait(struct dw_i2c_dev *dev, bool enable)
+static int  __i2c_dw_enable_and_wait(struct dw_i2c_dev *dev, bool enable)
 {
 	int timeout = 100;
 
 	do {
 		__i2c_dw_enable(dev, enable);
 		if ((dw_readl(dev, DW_IC_ENABLE_STATUS) & 1) == enable)
-			return;
+			return 0;
 
 		/*
 		 * Wait 10 times the signaling period of the highest I2C
@@ -282,6 +282,7 @@ static void __i2c_dw_enable_and_wait(struct dw_i2c_dev *dev, bool enable)
 
 	dev_warn(dev->dev, "timeout in %sabling adapter\n",
 		 enable ? "en" : "dis");
+	return -ETIMEDOUT;
 }
 
 static unsigned long i2c_dw_clk_rate(struct dw_i2c_dev *dev)
@@ -353,7 +354,9 @@ int i2c_dw_init(struct dw_i2c_dev *dev)
 	comp_param1 = dw_readl(dev, DW_IC_COMP_PARAM_1);
 
 	/* Disable the adapter */
-	__i2c_dw_enable_and_wait(dev, false);
+	ret = __i2c_dw_enable_and_wait(dev, false);
+	if (ret<0)
+		return ret;
 
 	/* set standard and fast speed deviders for high/low periods */
 
@@ -472,13 +475,16 @@ static int i2c_dw_wait_bus_not_busy(struct dw_i2c_dev *dev)
 	return 0;
 }
 
-static void i2c_dw_xfer_init(struct dw_i2c_dev *dev)
+static int i2c_dw_xfer_init(struct dw_i2c_dev *dev)
 {
 	struct i2c_msg *msgs = dev->msgs;
 	u32 ic_con, ic_tar = 0;
+	int ret = 0;
 
 	/* Disable the adapter */
-	__i2c_dw_enable_and_wait(dev, false);
+	ret = __i2c_dw_enable_and_wait(dev, false);
+	if (ret<0)
+		return ret;
 
 	/* if the slave address is ten bit address, enable 10BITADDR */
 	ic_con = dw_readl(dev, DW_IC_CON);
@@ -512,6 +518,8 @@ static void i2c_dw_xfer_init(struct dw_i2c_dev *dev)
 	/* Clear and enable interrupts */
 	dw_readl(dev, DW_IC_CLR_INTR);
 	dw_writel(dev, DW_IC_INTR_DEFAULT_MASK, DW_IC_INTR_MASK);
+
+	return ret;
 }
 
 /*
@@ -720,7 +728,9 @@ i2c_dw_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[], int num)
 		goto done;
 
 	/* start the transfers */
-	i2c_dw_xfer_init(dev);
+	ret = i2c_dw_xfer_init(dev);
+	if (ret < 0)
+		goto done;
 
 	/* wait for tx to complete */
 	if (!wait_for_completion_timeout(&dev->cmd_complete, adap->timeout)) {
-- 
2.7.4

