From 92b258797024fd1fcf8eeae774098c5609c65a6c Mon Sep 17 00:00:00 2001
From: Harry Wentland <harry.wentland@amd.com>
Date: Thu, 20 Oct 2016 12:06:24 -0400
Subject: [PATCH 1382/1722] drm/amd/dal: Null check for dce_straps, audio and
 stream_encoder at create

These are not defined in diagnostic environment.

Change-Id: I64cf1d2504bfffa579cd05677c78c4a34ca82342
Signed-off-by: Harry Wentland <harry.wentland@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/core/dc_resource.c | 65 ++++++++++++++-------------
 1 file changed, 35 insertions(+), 30 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c b/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
index 28bbc71..1541913 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
@@ -141,44 +141,49 @@ bool resource_construct(
 	unsigned int num_audio = caps->num_audio;
 	struct resource_straps straps = {0};
 
-	create_funcs->read_dce_straps(dc->ctx, &straps);
-
-	/* find the total number of streams available via the
-	 * AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_CONFIGURATION_DEFAULT
-	 * registers (one for each pin) starting from pin 1
-	 * up to the max number of audio pins.
-	 * We stop on the first pin where
-	 * PORT_CONNECTIVITY == 1 (as instructed by HW team).
-	 */
+	if (create_funcs->read_dce_straps)
+		create_funcs->read_dce_straps(dc->ctx, &straps);
+
 	pool->audio_count = 0;
-	update_num_audio(&straps, &num_audio, &pool->audio_support);
-	for (i = 0; i < pool->pipe_count && i < num_audio; i++) {
-		struct audio *aud = create_funcs->create_audio(ctx, i);
+	if (create_funcs->create_audio) {
+		/* find the total number of streams available via the
+		 * AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_CONFIGURATION_DEFAULT
+		 * registers (one for each pin) starting from pin 1
+		 * up to the max number of audio pins.
+		 * We stop on the first pin where
+		 * PORT_CONNECTIVITY == 1 (as instructed by HW team).
+		 */
+		update_num_audio(&straps, &num_audio, &pool->audio_support);
+		for (i = 0; i < pool->pipe_count && i < num_audio; i++) {
+			struct audio *aud = create_funcs->create_audio(ctx, i);
 
-		if (aud == NULL) {
-			DC_ERR("DC: failed to create audio!\n");
-			return false;
-		}
+			if (aud == NULL) {
+				DC_ERR("DC: failed to create audio!\n");
+				return false;
+			}
 
-		if (!aud->funcs->endpoint_valid(aud)) {
-			aud->funcs->destroy(&aud);
-			break;
-		}
+			if (!aud->funcs->endpoint_valid(aud)) {
+				aud->funcs->destroy(&aud);
+				break;
+			}
 
-		pool->audios[i] = aud;
-		pool->audio_count++;
+			pool->audios[i] = aud;
+			pool->audio_count++;
+		}
 	}
 
 	pool->stream_enc_count = 0;
-	for (i = 0; i < caps->num_stream_encoder; i++) {
-		/* TODO: rework fragile code*/
-		if (pool->stream_engines.u_all & 1 << i) {
-			pool->stream_enc[i] = create_funcs->create_stream_encoder(
-				i, ctx);
-			if (pool->stream_enc[i] == NULL)
-				DC_ERR("DC: failed to create stream_encoder!\n");
+	if (create_funcs->create_stream_encoder) {
+		for (i = 0; i < caps->num_stream_encoder; i++) {
+			/* TODO: rework fragile code*/
+			if (pool->stream_engines.u_all & 1 << i) {
+				pool->stream_enc[i] = create_funcs->create_stream_encoder(
+					i, ctx);
+				if (pool->stream_enc[i] == NULL)
+					DC_ERR("DC: failed to create stream_encoder!\n");
+			}
+			pool->stream_enc_count++;
 		}
-		pool->stream_enc_count++;
 	}
 
 	for (i = 0; i < num_virtual_links; i++) {
-- 
2.7.4

