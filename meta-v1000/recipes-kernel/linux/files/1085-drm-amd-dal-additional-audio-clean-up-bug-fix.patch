From cf67455c4f75c819fef9dc3eee261ebb80ec0af5 Mon Sep 17 00:00:00 2001
From: Tony Cheng <tony.cheng@amd.com>
Date: Thu, 15 Sep 2016 18:35:56 -0400
Subject: [PATCH 1085/1722] drm/amd/dal: additional audio clean up + bug fix

- create audio properly
- underlay should be created after audio, because we don't want to create more audio than available output
- clean up register header initialization

Change-Id: Ibce11268947871119e6a11964488bc0a0afe726e
Signed-off-by: Tony Cheng <tony.cheng@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 .../gpu/drm/amd/dal/dc/dce100/dce100_resource.c    | 15 +++++---
 drivers/gpu/drm/amd/dal/dc/dce110/audio_dce110.h   | 32 ++++++++---------
 drivers/gpu/drm/amd/dal/dc/dce110/dce110_audio.c   | 41 +++++-----------------
 .../gpu/drm/amd/dal/dc/dce110/dce110_resource.c    | 24 +++++++------
 .../gpu/drm/amd/dal/dc/dce112/dce112_resource.c    | 18 ++++++----
 drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c  | 18 ++++++----
 drivers/gpu/drm/amd/dal/dc/inc/hw/audio.h          |  7 ----
 7 files changed, 70 insertions(+), 85 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
index bddeb66..083a0f0 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
@@ -286,6 +286,14 @@ static const struct dce110_stream_enc_registers stream_enc_regs[] = {
 	stream_enc_regs(6)
 };
 
+/* set register offset */
+#define SR(reg_name)\
+	.reg_name = mm ## reg_name
+
+/* set register offset with instance */
+#define SRI(reg_name, block, id)\
+	.reg_name = mm ## block ## id ## _ ## reg_name
+
 #define audio_regs(id)\
 [id] = {\
 	AUD_COMMON_REG_LIST(id)\
@@ -772,7 +780,6 @@ static bool construct(
         struct dce110_resource_pool *pool)
 {
         unsigned int i;
-        struct audio_init_data audio_init_data = { 0 };
         struct dc_context *ctx = dc->ctx;
         struct firmware_info info;
         struct dc_bios *bp;
@@ -912,7 +919,6 @@ static bool construct(
                 }
         }
 
-        audio_init_data.ctx = ctx;
         pool->base.audio_count = 0;
         for (i = 0; i < pool->base.pipe_count; i++) {
                 struct graphics_object_id obj_id;
@@ -923,10 +929,9 @@ static bool construct(
                         break;
                 }
 
-                audio_init_data.inst = i;
-                audio_init_data.reg = &audio_regs[i];
+                pool->base.audios[i] = dce110_audio_create(
+                                ctx, i, &audio_regs[i]);
 
-                pool->base.audios[i] = dal_audio_create_dce110(&audio_init_data);
                 if (pool->base.audios[i] == NULL) {
                         BREAK_TO_DEBUGGER();
                         dm_error("DC: failed to create DPPs!\n");
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/audio_dce110.h b/drivers/gpu/drm/amd/dal/dc/dce110/audio_dce110.h
index d0e257c..b950d43 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/audio_dce110.h
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/audio_dce110.h
@@ -27,23 +27,17 @@
 
 #include "audio.h"
 
-#define AUD_REG(reg_name, block_prefix, id)\
-	.reg_name = block_prefix ## id ## _ ## reg_name
-
-#define MM_REG(reg_name)\
-	.reg_name = mm ## reg_name
-
 #define AUD_COMMON_REG_LIST_BASE(id)\
-	SE_REG(AZALIA_F0_CODEC_ENDPOINT_INDEX, mmAZF0ENDPOINT, id),\
-	SE_REG(AZALIA_F0_CODEC_ENDPOINT_DATA, mmAZF0ENDPOINT, id),\
-	MM_REG(AZALIA_F0_CODEC_FUNCTION_PARAMETER_STREAM_FORMATS),\
-	MM_REG(AZALIA_F0_CODEC_FUNCTION_PARAMETER_SUPPORTED_SIZE_RATES),\
-	MM_REG(AZALIA_F0_CODEC_FUNCTION_PARAMETER_POWER_STATES),\
-	MM_REG(DCCG_AUDIO_DTO_SOURCE),\
-	MM_REG(DCCG_AUDIO_DTO0_MODULE),\
-	MM_REG(DCCG_AUDIO_DTO0_PHASE),\
-	MM_REG(DCCG_AUDIO_DTO1_MODULE),\
-	MM_REG(DCCG_AUDIO_DTO1_PHASE)
+	SRI(AZALIA_F0_CODEC_ENDPOINT_INDEX, AZF0ENDPOINT, id),\
+	SRI(AZALIA_F0_CODEC_ENDPOINT_DATA, AZF0ENDPOINT, id),\
+	SR(AZALIA_F0_CODEC_FUNCTION_PARAMETER_STREAM_FORMATS),\
+	SR(AZALIA_F0_CODEC_FUNCTION_PARAMETER_SUPPORTED_SIZE_RATES),\
+	SR(AZALIA_F0_CODEC_FUNCTION_PARAMETER_POWER_STATES),\
+	SR(DCCG_AUDIO_DTO_SOURCE),\
+	SR(DCCG_AUDIO_DTO0_MODULE),\
+	SR(DCCG_AUDIO_DTO0_PHASE),\
+	SR(DCCG_AUDIO_DTO1_MODULE),\
+	SR(DCCG_AUDIO_DTO1_PHASE)
 
 #define AUD_COMMON_REG_LIST(id)\
 	AUD_COMMON_REG_LIST_BASE(id)
@@ -71,7 +65,11 @@ struct audio_dce110 {
 	/* none */
 };
 
-struct audio *dal_audio_create_dce110(const struct audio_init_data *init_data);
+struct audio *dce110_audio_create(
+		struct dc_context *ctx,
+		unsigned int inst,
+		const struct dce110_audio_registers *reg);
+
 void dce110_aud_destroy(struct audio **audio);
 
 void dce110_aud_hw_init(struct audio *audio);
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_audio.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_audio.c
index be9b9af..db550ad 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_audio.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_audio.c
@@ -901,53 +901,30 @@ static const struct audio_funcs funcs = {
 	.az_configure = dce110_aud_az_configure,
 };
 
-static bool construct(
-	struct audio_dce110 *audio,
-	const struct audio_init_data *init_data)
-{
-	struct audio *base = &audio->base;
-
-	base->ctx = init_data->ctx;
-	base->inst = init_data->inst;
-	base->funcs = &funcs;
-
-	audio->regs = init_data->reg;
-
-	return true;
-}
-
 void dce110_aud_destroy(struct audio **audio)
 {
 	dm_free(audio);
 	*audio = NULL;
 }
 
-struct audio *dal_audio_create_dce110(
-	const struct audio_init_data *init_data)
+struct audio *dce110_audio_create(
+		struct dc_context *ctx,
+		unsigned int inst,
+		const struct dce110_audio_registers *reg)
 {
-	/*allocate memory for audio_dce110 */
 	struct audio_dce110 *audio = dm_alloc(sizeof(*audio));
-	struct audio *base = &audio->base;
 
 	if (audio == NULL) {
 		ASSERT_CRITICAL(audio);
 		return NULL;
 	}
 
-	base->ctx = init_data->ctx;
-	base->inst = init_data->inst;
-	base->funcs = &funcs;
+	audio->base.ctx = ctx;
+	audio->base.inst = inst;
+	audio->base.funcs = &funcs;
 
-	audio->regs = init_data->reg;
+	audio->regs = reg;
 
-	dal_logger_write(
-		init_data->ctx->logger,
-		LOG_MAJOR_ERROR,
-		LOG_MINOR_COMPONENT_AUDIO,
-		"Failed to create audio object for DCE11\n");
-
-	 /*release memory allocated if fail */
-	dm_free(audio);
-	return NULL;
+	return &audio->base;
 }
 
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
index 0616fef..ca12e53 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
@@ -235,6 +235,14 @@ static const struct dce110_stream_enc_registers stream_enc_regs[] = {
 		stream_enc_regs(6)
 };
 
+/* set register offset */
+#define SR(reg_name)\
+	.reg_name = mm ## reg_name
+
+/* set register offset with instance */
+#define SRI(reg_name, block, id)\
+	.reg_name = mm ## block ## id ## _ ## reg_name
+
 #define audio_regs(id)\
 [id] = {\
 	AUD_COMMON_REG_LIST(id)\
@@ -1125,7 +1133,6 @@ static bool construct(
         struct hw_asic_id asic_id)
 {
         unsigned int i;
-        struct audio_init_data audio_init_data = { 0 };
         struct dc_context *ctx = dc->ctx;
         struct firmware_info info;
         struct dc_bios *bp;
@@ -1263,10 +1270,6 @@ static bool construct(
                         goto controller_create_fail;
                 }
         }
-        /* TODO: failure? */
-        underlay_create(ctx, &pool->base);
-
-        audio_init_data.ctx = ctx;
         pool->base.audio_count = 0;
         for (i = 0; i < pool->base.pipe_count; i++) {
                 struct graphics_object_id obj_id;
@@ -1277,17 +1280,18 @@ static bool construct(
                         break;
                 }
 
-                audio_init_data.inst = i;
-                audio_init_data.reg = &audio_regs[i];
-
-                pool->base.audios[i] = dal_audio_create_dce110(&audio_init_data);
+                pool->base.audios[i] = dce110_audio_create(
+                                ctx, i, &audio_regs[i]);
                 if (pool->base.audios[i] == NULL) {
                         BREAK_TO_DEBUGGER();
-                        dm_error("DC: failed to create DPPs!\n");
+                        dm_error("DC: failed to create audio!\n");
                         goto audio_create_fail;
                 }
                 pool->base.audio_count++;
         }
+       
+	 /* TODO: failure? */
+        underlay_create(ctx, &pool->base);
 
         for (i = 0; i < pool->base.stream_enc_count; i++) {
                 /* TODO: rework fragile code*/
diff --git a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
index c38508f..c40bbce 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
@@ -280,6 +280,14 @@ static const struct dce110_stream_enc_registers stream_enc_regs[] = {
 	stream_enc_regs(5)
 };
 
+/* set register offset */
+#define SR(reg_name)\
+	.reg_name = mm ## reg_name
+
+/* set register offset with instance */
+#define SRI(reg_name, block, id)\
+	.reg_name = mm ## block ## id ## _ ## reg_name
+
 #define audio_regs(id)\
 [id] = {\
 	AUD_COMMON_REG_LIST(id)\
@@ -1082,7 +1090,6 @@ static bool construct(
         struct dce110_resource_pool *pool)
 {
         unsigned int i;
-        struct audio_init_data audio_init_data = { 0 };
         struct dc_context *ctx = dc->ctx;
 
         pool->base.adapter_srv = adapter_serv;
@@ -1227,7 +1234,6 @@ static bool construct(
                 }
         }
 
-        audio_init_data.ctx = ctx;
         pool->base.audio_count = 0;
         for (i = 0; i < pool->base.pipe_count; i++) {
                 struct graphics_object_id obj_id;
@@ -1238,13 +1244,11 @@ static bool construct(
                         break;
                 }
 
-                audio_init_data.inst = i;
-                audio_init_data.reg = &audio_regs[i];
-
-		pool->base.audios[i] = dal_audio_create_dce110(&audio_init_data);
+                pool->base.audios[i] = dce110_audio_create(
+                                ctx, i, &audio_regs[i]);
                 if (pool->base.audios[i] == NULL) {
                         BREAK_TO_DEBUGGER();
-                        dm_error("DC: failed to create DPPs!\n");
+                        dm_error("DC: failed to create audio!\n");
                         goto audio_create_fail;
                 }
                 pool->base.audio_count++;
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
index 8560476..09f6638 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
@@ -290,6 +290,14 @@ static const struct dce110_stream_enc_registers stream_enc_regs[] = {
 	AUD_COMMON_REG_LIST(id)\
 }
 
+/* set register offset */
+#define SR(reg_name)\
+	.reg_name = mm ## reg_name
+
+/* set register offset with instance */
+#define SRI(reg_name, block, id)\
+	.reg_name = mm ## block ## id ## _ ## reg_name
+
 static const struct dce110_audio_registers audio_regs[] = {
 	audio_regs(0),
 	audio_regs(1),
@@ -715,7 +723,6 @@ static bool construct(
         struct dce110_resource_pool *pool)
 {
         unsigned int i;
-        struct audio_init_data audio_init_data = { 0 };
         struct dc_context *ctx = dc->ctx;
         struct firmware_info info;
         struct dc_bios *bp;
@@ -851,7 +858,6 @@ static bool construct(
                 }
         }
 
-        audio_init_data.ctx = ctx;
         pool->base.audio_count = 0;
         for (i = 0; i < pool->base.pipe_count; i++) {
                 struct graphics_object_id obj_id;
@@ -862,13 +868,11 @@ static bool construct(
                         break;
                 }
 
-                audio_init_data.inst = i;
-                audio_init_data.reg = &audio_regs[i];
-
-                pool->base.audios[i] = dal_audio_create_dce110(&audio_init_data);
+                pool->base.audios[i] = dce110_audio_create(
+                                ctx, i, &audio_regs[i]);
                 if (pool->base.audios[i] == NULL) {
                         BREAK_TO_DEBUGGER();
-                        dm_error("DC: failed to create DPPs!\n");
+                        dm_error("DC: failed to create audio!\n");
                         goto audio_create_fail;
                 }
                 pool->base.audio_count++;
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/hw/audio.h b/drivers/gpu/drm/amd/dal/dc/inc/hw/audio.h
index e22b383..b28c103 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/hw/audio.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/hw/audio.h
@@ -49,13 +49,6 @@ struct audio_funcs {
 		const struct audio_pll_info *pll_info);
 };
 
-struct audio_init_data {
-	struct dc_context *ctx;
-
-	unsigned int inst;
-	const struct dce110_audio_registers *reg;
-};
-
 struct audio {
 	const struct audio_funcs *funcs;
 	struct dc_context *ctx;
-- 
2.7.4

