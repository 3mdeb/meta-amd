From 28a6f64bd3c3c7d44c75e5f706c3689cb69b38c0 Mon Sep 17 00:00:00 2001
From: Sanjay R Mehta <Sanju.Mehta@amd.com>
Date: Fri, 19 May 2017 02:56:25 +0530
Subject: [PATCH] drm/amd/dal: Add smooth brightness support to backlight
 module

- Passed in controller id to link encoder to set pipe
- Calculated ramping value for smooth brightness
- Set registers in backlight function from link encoder

Signed-off-by: Amy Zhang <Amy.Zhang@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c      |  2 +-
 drivers/gpu/drm/amd/dal/dc/core/dc.c               |  4 +-
 drivers/gpu/drm/amd/dal/dc/core/dc_link.c          | 18 ++++++++-
 drivers/gpu/drm/amd/dal/dc/dc.h                    |  4 +-
 .../drm/amd/dal/dc/dce110/dce110_link_encoder.c    | 38 +++++++++++++++++--
 .../drm/amd/dal/dc/dce110/dce110_link_encoder.h    |  3 +-
 drivers/gpu/drm/amd/dal/dc/dm_services.h           |  1 +
 drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h   |  2 +-
 .../drm/amd/dal/dc/virtual/virtual_link_encoder.c  |  3 +-
 .../gpu/drm/amd/dal/modules/backlight/backlight.c  | 44 ++++++++++++++++++++--
 .../gpu/drm/amd/dal/modules/inc/mod_backlight.h    |  5 +++
 11 files changed, 107 insertions(+), 17 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c
index 9508a7d..a93aa08 100644
--- a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c
+++ b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c
@@ -1116,7 +1116,7 @@ static int amdgpu_dm_backlight_update_status(struct backlight_device *bd)
 	struct amdgpu_display_manager *dm = bl_get_data(bd);
 
 	if (dc_link_set_backlight_level(dm->backlight_link,
-			bd->props.brightness, 0))
+			bd->props.brightness, 0, 0))
 		return 0;
 	else
 		return 1;
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc.c b/drivers/gpu/drm/amd/dal/dc/core/dc.c
index fd3df1f..d9d15ec 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc.c
@@ -295,14 +295,14 @@ static void stream_update_scaling(
 }
 
 static bool set_backlight(struct dc *dc, unsigned int backlight_level,
-						unsigned int frame_ramp)
+			unsigned int frame_ramp, const struct dc_stream *stream)
 {
 	struct core_dc *core_dc = DC_TO_CORE(dc);
 	int i;
 
 	for (i = 0; i < core_dc->link_count; i++)
 		dc_link_set_backlight_level(&core_dc->links[i]->public,
-				backlight_level, frame_ramp);
+				backlight_level, frame_ramp, stream);
 
 	return true;
 
diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_link.c b/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
index dabf8bf..adbd1ff 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_link.c
@@ -1372,10 +1372,24 @@ enum dc_status dc_link_validate_mode_timing(
 }
 
 bool dc_link_set_backlight_level(const struct dc_link *public, uint32_t level,
-		uint32_t frame_ramp)
+		uint32_t frame_ramp, const struct dc_stream *stream)
 {
 	struct core_link *link = DC_LINK_TO_CORE(public);
 	struct dc_context *ctx = link->ctx;
+	struct core_dc *core_dc = DC_TO_CORE(ctx->dc);
+	struct core_stream *core_stream = DC_STREAM_TO_CORE(stream);
+	unsigned int controller_id = 0;
+	int i;
+
+	for (i = 0; i < MAX_PIPES; i++) {
+		if (core_dc->current_context->res_ctx.pipe_ctx[i].stream
+				== core_stream)
+			/* dmcu -1 for all controller id values,
+			 * therefore +1 here
+			 */
+			controller_id = core_dc->current_context->res_ctx.
+					pipe_ctx[i].tg->inst + 1;
+	}
 
 	dal_logger_write(ctx->logger, LOG_MAJOR_BACKLIGHT,
 			LOG_MINOR_BACKLIGHT_INTERFACE,
@@ -1384,7 +1398,7 @@ bool dc_link_set_backlight_level(const struct dc_link *public, uint32_t level,
 	/* always assume dmcu is running */
 	link->link_enc->funcs->set_dmcu_backlight_level
 						(link->link_enc, level,
-						frame_ramp);
+						frame_ramp, controller_id);
 	return true;
 }
 
diff --git a/drivers/gpu/drm/amd/dal/dc/dc.h b/drivers/gpu/drm/amd/dal/dc/dc.h
index ce24705..3fb2150 100644
--- a/drivers/gpu/drm/amd/dal/dc/dc.h
+++ b/drivers/gpu/drm/amd/dal/dc/dc.h
@@ -70,7 +70,7 @@ struct dc_stream_funcs {
 	bool (*set_gamut_remap)(struct dc *dc,
 			const struct dc_stream **stream, int num_streams);
 	bool (*set_backlight)(struct dc *dc, unsigned int backlight_level,
-			unsigned int frame_ramp);
+			unsigned int frame_ramp, const struct dc_stream *stream);
 };
 
 /* Structure to hold configuration flags set by dm at dc creation. */
@@ -503,7 +503,7 @@ const struct graphics_object_id dc_get_link_id_at_index(
 
 /* Set backlight level of an embedded panel (eDP, LVDS). */
 bool dc_link_set_backlight_level(const struct dc_link *dc_link, uint32_t level,
-		uint32_t frame_ramp);
+		uint32_t frame_ramp, const struct dc_stream *stream);
 
 /* Request DC to detect if there is a Panel connected.
  * boot - If this call is during initial boot.
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
index 9c9c9fc..2dbf55c 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
@@ -90,6 +90,11 @@
 /* For current ASICs pixel clock - 600MHz */
 #define MAX_ENCODER_CLOCK 600000
 
+/* Set the ABM Pipe */
+#define MCP_ABM_PIPE_SET 0x66
+/* Set backlight level */
+#define MCP_BL_SET 0x67
+
 enum {
 	DP_MST_UPDATE_MAX_RETRY = 50
 };
@@ -1764,17 +1769,18 @@ void dce110_link_encoder_update_mst_stream_allocation_table(
 void dce110_link_encoder_set_dmcu_backlight_level(
 	struct link_encoder *enc,
 	uint32_t level,
-	uint32_t frame_ramp)
+	uint32_t frame_ramp,
+	uint32_t controller_id)
 {
 	struct dce110_link_encoder *enc110 = TO_DCE110_LINK_ENC(enc);
 	struct dc_context *ctx = enc110->base.ctx;
 	unsigned int dmcu_max_retry_on_wait_reg_ready = 801;
 	unsigned int dmcu_wait_reg_ready_interval = 100;
-
 	unsigned int backlight_17bit = level * 0x10101;
 	unsigned char temp_uchar =
 			(unsigned char)(((backlight_17bit & 0x80) >> 7) & 1);
 	unsigned int regValue;
+	uint32_t rampingBoundary = 0xFFFF;
 	uint32_t pwmUserLevel;
 	uint32_t masterCmd;
 	uint32_t masterComCntl;
@@ -1782,6 +1788,32 @@ void dce110_link_encoder_set_dmcu_backlight_level(
 
 	backlight_17bit = (backlight_17bit >> 8) + temp_uchar;
 
+	/* set ramping boundary */
+	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_DATA_REG1), rampingBoundary);
+
+	/* setDMCUParam_Pipe */
+	masterCmd = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG));
+	set_reg_field_value(
+			masterCmd,
+			MCP_ABM_PIPE_SET,
+			MASTER_COMM_CMD_REG,
+			MASTER_COMM_CMD_REG_BYTE0);
+	set_reg_field_value(
+			masterCmd,
+			controller_id,
+			MASTER_COMM_CMD_REG,
+			MASTER_COMM_CMD_REG_BYTE1);
+	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG), masterCmd);
+
+	/* notifyDMCUMsg */
+	masterComCntl = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG));
+	set_reg_field_value(
+			masterComCntl,
+			1,
+			MASTER_COMM_CNTL_REG,
+			MASTER_COMM_INTERRUPT);
+	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CNTL_REG), masterComCntl);
+
 	/* waitDMCUReadyForCmd */
 	do {
 		dm_delay_in_microseconds(ctx, dmcu_wait_reg_ready_interval);
@@ -1808,7 +1840,7 @@ void dce110_link_encoder_set_dmcu_backlight_level(
 	masterCmd = dm_read_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG));
 	set_reg_field_value(
 			masterCmd,
-			0x67,
+			MCP_BL_SET,
 			MASTER_COMM_CMD_REG,
 			MASTER_COMM_CMD_REG_BYTE0);
 	dm_write_reg(ctx, DMCU_REG(MASTER_COMM_CMD_REG), masterCmd);
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h
index 6f75335..80e9478 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.h
@@ -168,7 +168,8 @@ void dce110_link_encoder_update_mst_stream_allocation_table(
 void dce110_link_encoder_set_dmcu_backlight_level(
 	struct link_encoder *enc,
 	uint32_t level,
-	uint32_t frame_ramp);
+	uint32_t frame_ramp,
+	uint32_t controller_id);
 
 void dce110_link_encoder_edp_backlight_control(
 	struct link_encoder *enc,
diff --git a/drivers/gpu/drm/amd/dal/dc/dm_services.h b/drivers/gpu/drm/amd/dal/dc/dm_services.h
index e9a8d9e..81609a4 100644
--- a/drivers/gpu/drm/amd/dal/dc/dm_services.h
+++ b/drivers/gpu/drm/amd/dal/dc/dm_services.h
@@ -323,6 +323,7 @@ bool dm_query_extended_brightness_caps
 	(struct dc_context *ctx, enum dm_acpi_display_type display,
 			struct dm_acpi_atif_backlight_caps *pCaps);
 
+bool dm_dmcu_set_pipe(struct dc_context *ctx, unsigned int controller_id);
 /*
  *
  * print-out services
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h b/drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h
index 159f6b5..70adf25 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/hw/link_encoder.h
@@ -109,7 +109,7 @@ struct link_encoder_funcs {
 		struct link_encoder *enc,
 		const struct link_mst_stream_allocation_table *table);
 	void (*set_dmcu_backlight_level)(struct link_encoder *enc,
-		uint32_t level, uint32_t frame_ramp);
+		uint32_t level, uint32_t frame_ramp, uint32_t controller_id);
 	void (*backlight_control) (struct link_encoder *enc,
 		bool enable);
 	void (*power_control) (struct link_encoder *enc,
diff --git a/drivers/gpu/drm/amd/dal/dc/virtual/virtual_link_encoder.c b/drivers/gpu/drm/amd/dal/dc/virtual/virtual_link_encoder.c
index 55c4259..3ca32f0 100644
--- a/drivers/gpu/drm/amd/dal/dc/virtual/virtual_link_encoder.c
+++ b/drivers/gpu/drm/amd/dal/dc/virtual/virtual_link_encoder.c
@@ -77,7 +77,8 @@ static void virtual_link_encoder_update_mst_stream_allocation_table(
 static void virtual_link_encoder_set_dmcu_backlight_level(
 	struct link_encoder *enc,
 	uint32_t level,
-	uint32_t frame_ramp) {}
+	uint32_t frame_ramp,
+	uint32_t controller_id) {}
 
 static void virtual_link_encoder_edp_backlight_control(
 	struct link_encoder *enc,
diff --git a/drivers/gpu/drm/amd/dal/modules/backlight/backlight.c b/drivers/gpu/drm/amd/dal/modules/backlight/backlight.c
index e15b02d..41c4a72 100644
--- a/drivers/gpu/drm/amd/dal/modules/backlight/backlight.c
+++ b/drivers/gpu/drm/amd/dal/modules/backlight/backlight.c
@@ -38,7 +38,6 @@ struct sink_caps {
 
 struct backlight_state {
 	unsigned int backlight;
-	unsigned int abm_level;
 	unsigned int frame_ramp;
 	bool smooth_brightness_enabled;
 };
@@ -229,6 +228,8 @@ bool mod_backlight_add_sink(struct mod_backlight *mod_backlight,
 		core_backlight->caps[core_backlight->num_sinks].sink = sink;
 		core_backlight->state[core_backlight->num_sinks].
 					smooth_brightness_enabled = false;
+		core_backlight->state[core_backlight->num_sinks].
+					backlight = 100;
 		core_backlight->num_sinks++;
 		return true;
 	}
@@ -301,7 +302,7 @@ bool mod_backlight_set_backlight(struct mod_backlight *mod_backlight,
 	params.bits.frame_ramp = frame_ramp;
 
 	core_backlight->dc->stream_funcs.set_backlight
-		(core_backlight->dc, backlight_8bit, params.u32All);
+		(core_backlight->dc, backlight_8bit, params.u32All, streams[0]);
 
 	return true;
 }
@@ -497,6 +498,7 @@ unsigned int mod_backlight_backlight_level_signal_to_percentage(
 		struct mod_backlight *mod_backlight,
 		unsigned int signalLevel8bit)
 {
+	unsigned int invalid_backlight = (unsigned int)(-1);
 	/* Do lazy initialization of backlight capabilities */
 	if (!backlight_caps_initialized)
 		mod_backlight_initialize_backlight_caps(mod_backlight);
@@ -517,7 +519,7 @@ unsigned int mod_backlight_backlight_level_signal_to_percentage(
 					absolute_backlight_max) {
 		unsigned int min = 0;
 		unsigned int max = 100;
-		unsigned int mid = -1;
+		unsigned int mid = invalid_backlight;
 
 		while (max >= min) {
 			mid = (min + max) / 2; /* floor of half range */
@@ -533,7 +535,7 @@ unsigned int mod_backlight_backlight_level_signal_to_percentage(
 		return mid;
 	}
 
-	return -1;
+	return invalid_backlight;
 }
 
 
@@ -563,3 +565,37 @@ bool mod_backlight_get_panel_backlight_boundaries(
 
 	return false;
 }
+bool mod_backlight_set_smooth_brightness(struct mod_backlight *mod_backlight,
+		const struct dc_sink *sink, bool enable_brightness)
+{
+	struct core_backlight *core_backlight =
+			MOD_BACKLIGHT_TO_CORE(mod_backlight);
+	unsigned int sink_index = sink_index_from_sink(core_backlight, sink);
+
+	core_backlight->state[sink_index].smooth_brightness_enabled
+					= enable_brightness;
+	return true;
+}
+
+bool mod_backlight_notify_mode_change(struct mod_backlight *mod_backlight,
+		const struct dc_stream *stream)
+{
+	struct core_backlight *core_backlight =
+			MOD_BACKLIGHT_TO_CORE(mod_backlight);
+
+	unsigned int sink_index = sink_index_from_sink(core_backlight,
+					stream->sink);
+	unsigned int frame_ramp = core_backlight->state[sink_index].frame_ramp;
+	union dmcu_abm_set_bl_params params;
+
+	params.u32All = 0;
+	params.bits.gradual_change = (frame_ramp > 0);
+	params.bits.frame_ramp = frame_ramp;
+
+	return core_backlight->dc->stream_funcs.set_backlight
+			(core_backlight->dc,
+			core_backlight->state[sink_index].backlight,
+			params.u32All, stream);
+
+}
+
diff --git a/drivers/gpu/drm/amd/dal/modules/inc/mod_backlight.h b/drivers/gpu/drm/amd/dal/modules/inc/mod_backlight.h
index 6bad1d4..bee3665 100644
--- a/drivers/gpu/drm/amd/dal/modules/inc/mod_backlight.h
+++ b/drivers/gpu/drm/amd/dal/modules/inc/mod_backlight.h
@@ -66,4 +66,9 @@ bool mod_backlight_get_panel_backlight_boundaries
 				unsigned int *output_ac_level_percentage,
 				unsigned int *output_dc_level_percentage);
 
+bool mod_backlight_set_smooth_brightness(struct mod_backlight *mod_backlight,
+		const struct dc_sink *sink, bool enable_brightness);
+
+bool mod_backlight_notify_mode_change(struct mod_backlight *mod_backlight,
+		const struct dc_stream *stream);
 #endif /* MODULES_INC_MOD_BACKLIGHT_H_ */
-- 
2.7.4

