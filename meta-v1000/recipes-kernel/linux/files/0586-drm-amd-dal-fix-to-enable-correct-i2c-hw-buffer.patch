From d8269cfc6502441043290df3356bccfd1b6c605d Mon Sep 17 00:00:00 2001
From: Mykola Lysenko <Mykola.Lysenko@amd.com>
Date: Wed, 22 Jun 2016 15:22:46 +0800
Subject: [PATCH 0586/1722] drm/amd/dal: fix to enable correct i2c hw buffer

In this change I2C HW buffer size changes to 538 (for >= DCE11)

Also, changed usage of uint8_t length to uint32_t to
enable i2c reads of more then 256 bytes

Change-Id: Ifee199c6b203a6ff06f2a04ffdfcf16725b8e956
Signed-off-by: Mykola Lysenko <Mykola.Lysenko@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/dc_ddc_types.h                       | 2 +-
 drivers/gpu/drm/amd/dal/dc/i2caux/aux_engine.c                  | 4 ++--
 drivers/gpu/drm/amd/dal/dc/i2caux/aux_engine.h                  | 4 ++--
 drivers/gpu/drm/amd/dal/dc/i2caux/dce110/i2c_hw_engine_dce110.c | 8 ++++----
 drivers/gpu/drm/amd/dal/dc/i2caux/dce80/i2c_hw_engine_dce80.c   | 6 +++---
 drivers/gpu/drm/amd/dal/dc/i2caux/engine.h                      | 2 +-
 drivers/gpu/drm/amd/dal/dc/i2caux/i2c_engine.h                  | 4 ++--
 drivers/gpu/drm/amd/dal/dc/i2caux/i2c_generic_hw_engine.c       | 8 ++++----
 drivers/gpu/drm/amd/dal/dc/i2caux/i2c_generic_hw_engine.h       | 6 +++---
 drivers/gpu/drm/amd/dal/dc/i2caux/i2c_hw_engine.h               | 2 +-
 drivers/gpu/drm/amd/dal/dc/i2caux/i2c_sw_engine.c               | 4 ++--
 11 files changed, 25 insertions(+), 25 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/dc_ddc_types.h b/drivers/gpu/drm/amd/dal/dc/dc_ddc_types.h
index 5f2107f..0a9a210 100644
--- a/drivers/gpu/drm/amd/dal/dc/dc_ddc_types.h
+++ b/drivers/gpu/drm/amd/dal/dc/dc_ddc_types.h
@@ -28,7 +28,7 @@
 struct i2c_payload {
 	bool write;
 	uint8_t address;
-	uint8_t length;
+	uint32_t length;
 	uint8_t *data;
 };
 
diff --git a/drivers/gpu/drm/amd/dal/dc/i2caux/aux_engine.c b/drivers/gpu/drm/amd/dal/dc/i2caux/aux_engine.c
index c0715d8..667660f 100644
--- a/drivers/gpu/drm/amd/dal/dc/i2caux/aux_engine.c
+++ b/drivers/gpu/drm/amd/dal/dc/i2caux/aux_engine.c
@@ -88,7 +88,7 @@ bool dal_aux_engine_acquire(
 
 struct read_command_context {
 	uint8_t *buffer;
-	uint8_t current_read_length;
+	uint32_t current_read_length;
 	uint32_t offset;
 	enum i2caux_transaction_status status;
 
@@ -285,7 +285,7 @@ struct write_command_context {
 	bool mot;
 
 	uint8_t *buffer;
-	uint8_t current_write_length;
+	uint32_t current_write_length;
 	enum i2caux_transaction_status status;
 
 	struct aux_request_transaction_data request;
diff --git a/drivers/gpu/drm/amd/dal/dc/i2caux/aux_engine.h b/drivers/gpu/drm/amd/dal/dc/i2caux/aux_engine.h
index 474f5e9..f8ec4ba 100644
--- a/drivers/gpu/drm/amd/dal/dc/i2caux/aux_engine.h
+++ b/drivers/gpu/drm/amd/dal/dc/i2caux/aux_engine.h
@@ -38,7 +38,7 @@ struct aux_request_transaction_data {
 	uint32_t address;
 	/* delay, in 100-microsecond units */
 	uint8_t delay;
-	uint8_t length;
+	uint32_t length;
 	uint8_t *data;
 };
 
@@ -56,7 +56,7 @@ enum aux_transaction_reply {
 
 struct aux_reply_transaction_data {
 	enum aux_transaction_reply status;
-	uint8_t length;
+	uint32_t length;
 	uint8_t *data;
 };
 
diff --git a/drivers/gpu/drm/amd/dal/dc/i2caux/dce110/i2c_hw_engine_dce110.c b/drivers/gpu/drm/amd/dal/dc/i2caux/dce110/i2c_hw_engine_dce110.c
index a27dbe7..5e9cf5ea 100644
--- a/drivers/gpu/drm/amd/dal/dc/i2caux/dce110/i2c_hw_engine_dce110.c
+++ b/drivers/gpu/drm/amd/dal/dc/i2caux/dce110/i2c_hw_engine_dce110.c
@@ -65,7 +65,7 @@ enum {
 	/* No timeout in HW
 	 * (timeout implemented in SW by querying status) */
 	I2C_SETUP_TIME_LIMIT = 255,
-	I2C_HW_BUFFER_SIZE = 144
+	I2C_HW_BUFFER_SIZE = 538
 };
 
 /*
@@ -418,7 +418,7 @@ static bool process_transaction(
 	struct i2c_hw_engine_dce110 *engine,
 	struct i2c_request_transaction_data *request)
 {
-	uint8_t length = request->length;
+	uint32_t length = request->length;
 	uint8_t *buffer = request->data;
 
 	bool last_transaction = false;
@@ -679,7 +679,7 @@ static void process_channel_reply(
 	struct i2c_engine *engine,
 	struct i2c_reply_transaction_data *reply)
 {
-	uint8_t length = reply->length;
+	uint32_t length = reply->length;
 	uint8_t *buffer = reply->data;
 
 	struct i2c_hw_engine_dce110 *i2c_hw_engine_dce110 =
@@ -755,7 +755,7 @@ static enum i2c_channel_operation_result get_channel_status(
 	return I2C_CHANNEL_OPERATION_SUCCEEDED;
 }
 
-static uint8_t get_hw_buffer_available_size(
+static uint32_t get_hw_buffer_available_size(
 	const struct i2c_hw_engine *engine)
 {
 	return I2C_HW_BUFFER_SIZE -
diff --git a/drivers/gpu/drm/amd/dal/dc/i2caux/dce80/i2c_hw_engine_dce80.c b/drivers/gpu/drm/amd/dal/dc/i2caux/dce80/i2c_hw_engine_dce80.c
index bc94433..07f6899 100644
--- a/drivers/gpu/drm/amd/dal/dc/i2caux/dce80/i2c_hw_engine_dce80.c
+++ b/drivers/gpu/drm/amd/dal/dc/i2caux/dce80/i2c_hw_engine_dce80.c
@@ -421,7 +421,7 @@ static bool process_transaction(
 	struct i2c_hw_engine_dce80 *engine,
 	struct i2c_request_transaction_data *request)
 {
-	uint8_t length = request->length;
+	uint32_t length = request->length;
 	uint8_t *buffer = request->data;
 
 	bool last_transaction = false;
@@ -676,7 +676,7 @@ static void process_channel_reply(
 	struct i2c_engine *engine,
 	struct i2c_reply_transaction_data *reply)
 {
-	uint8_t length = reply->length;
+	uint32_t length = reply->length;
 	uint8_t *buffer = reply->data;
 
 	uint32_t value = 0;
@@ -749,7 +749,7 @@ static enum i2c_channel_operation_result get_channel_status(
 	return I2C_CHANNEL_OPERATION_SUCCEEDED;
 }
 
-static uint8_t get_hw_buffer_available_size(
+static uint32_t get_hw_buffer_available_size(
 	const struct i2c_hw_engine *engine)
 {
 	return I2C_HW_BUFFER_SIZE -
diff --git a/drivers/gpu/drm/amd/dal/dc/i2caux/engine.h b/drivers/gpu/drm/amd/dal/dc/i2caux/engine.h
index d3635f8..dec35f0 100644
--- a/drivers/gpu/drm/amd/dal/dc/i2caux/engine.h
+++ b/drivers/gpu/drm/amd/dal/dc/i2caux/engine.h
@@ -39,7 +39,7 @@ enum i2caux_transaction_address_space {
 struct i2caux_transaction_payload {
 	enum i2caux_transaction_address_space address_space;
 	uint32_t address;
-	uint8_t length;
+	uint32_t length;
 	uint8_t *data;
 };
 
diff --git a/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_engine.h b/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_engine.h
index 20299fd..ce2c51d 100644
--- a/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_engine.h
+++ b/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_engine.h
@@ -47,12 +47,12 @@ struct i2c_request_transaction_data {
 	enum i2caux_transaction_action action;
 	enum i2c_channel_operation_result status;
 	uint8_t address;
-	uint8_t length;
+	uint32_t length;
 	uint8_t *data;
 };
 
 struct i2c_reply_transaction_data {
-	uint8_t length;
+	uint32_t length;
 	uint8_t *data;
 };
 
diff --git a/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_generic_hw_engine.c b/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_generic_hw_engine.c
index 6429b55..521c4ec 100644
--- a/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_generic_hw_engine.c
+++ b/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_generic_hw_engine.c
@@ -93,7 +93,7 @@ bool dal_i2c_generic_hw_engine_submit_request(
 
 	struct i2c_hw_engine *base = &hw_engine->base;
 
-	uint8_t max_payload_size =
+	uint32_t max_payload_size =
 		base->funcs->get_hw_buffer_available_size(base);
 
 	bool initial_stop_bit = !middle_of_transaction;
@@ -109,7 +109,7 @@ bool dal_i2c_generic_hw_engine_submit_request(
 
 	uint8_t address = i2caux_request->payload.address;
 	uint8_t *current_payload = i2caux_request->payload.data;
-	uint8_t remaining_payload_size = i2caux_request->payload.length;
+	uint32_t remaining_payload_size = i2caux_request->payload.length;
 
 	bool first_iteration = true;
 
@@ -136,8 +136,8 @@ bool dal_i2c_generic_hw_engine_submit_request(
 	 * Session stop bit is set if 'middle_of_transaction' = 0. */
 
 	while (remaining_payload_size) {
-		uint8_t current_transaction_size;
-		uint8_t current_payload_size;
+		uint32_t current_transaction_size;
+		uint32_t current_payload_size;
 
 		bool last_iteration;
 		bool stop_bit;
diff --git a/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_generic_hw_engine.h b/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_generic_hw_engine.h
index 52f2aa2..083bb0d 100644
--- a/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_generic_hw_engine.h
+++ b/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_generic_hw_engine.h
@@ -28,7 +28,7 @@
 
 struct i2c_generic_transaction_attributes {
 	enum i2caux_transaction_action action;
-	uint8_t transaction_size;
+	uint32_t transaction_size;
 	bool start_bit;
 	bool stop_bit;
 	bool last_read;
@@ -43,11 +43,11 @@ struct i2c_generic_hw_engine_funcs {
 	void (*write_data)(
 		struct i2c_generic_hw_engine *engine,
 		const uint8_t *buffer,
-		uint8_t length);
+		uint32_t length);
 	void (*read_data)(
 		struct i2c_generic_hw_engine *engine,
 		uint8_t *buffer,
-		uint8_t length,
+		uint32_t length,
 		uint32_t offset);
 	void (*execute_transaction)(
 		struct i2c_generic_hw_engine *engine,
diff --git a/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_hw_engine.h b/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_hw_engine.h
index 5afbd70..f2df174 100644
--- a/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_hw_engine.h
+++ b/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_hw_engine.h
@@ -33,7 +33,7 @@ enum {
 struct i2c_hw_engine;
 
 struct i2c_hw_engine_funcs {
-	uint8_t (*get_hw_buffer_available_size)(
+	uint32_t (*get_hw_buffer_available_size)(
 		const struct i2c_hw_engine *engine);
 	enum i2c_channel_operation_result (*wait_on_operation_result)(
 		struct i2c_hw_engine *engine,
diff --git a/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_sw_engine.c b/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_sw_engine.c
index ee85f7e..a7d5a2a 100644
--- a/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_sw_engine.c
+++ b/drivers/gpu/drm/amd/dal/dc/i2caux/i2c_sw_engine.c
@@ -302,7 +302,7 @@ static bool i2c_write(
 	struct ddc *ddc_handle,
 	uint16_t clock_delay_div_4,
 	uint8_t address,
-	uint8_t length,
+	uint32_t length,
 	const uint8_t *data)
 {
 	uint32_t i = 0;
@@ -324,7 +324,7 @@ static bool i2c_read(
 	struct ddc *ddc_handle,
 	uint16_t clock_delay_div_4,
 	uint8_t address,
-	uint8_t length,
+	uint32_t length,
 	uint8_t *data)
 {
 	uint32_t i = 0;
-- 
2.7.4

