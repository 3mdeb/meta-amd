From 8be4260af9d176c95fd0ac0440bbef7668587ed5 Mon Sep 17 00:00:00 2001
From: Vitaly Prosyak <vitaly.prosyak@amd.com>
Date: Tue, 31 May 2016 17:11:27 -0400
Subject: [PATCH 0532/1722] drm/amd/dal: full screen enter/exit implementation

Handling enter/exit full screen mode for dm

Signed-off-by: Vitaly Prosyak <vitaly.prosyak@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/Makefile                   |  4 +-
 drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c      | 58 ++++++++++++++-
 drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.h      |  2 +
 .../drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c    |  5 ++
 .../gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c    | 87 ++++++++++++++++++++++
 .../gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.h    |  7 ++
 6 files changed, 161 insertions(+), 2 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/Makefile b/drivers/gpu/drm/amd/dal/Makefile
index a140e0b..b84a2db 100644
--- a/drivers/gpu/drm/amd/dal/Makefile
+++ b/drivers/gpu/drm/amd/dal/Makefile
@@ -11,11 +11,13 @@ subdir-ccflags-y += -I$(AMDDALPATH)/ -I$(AMDDALPATH)/include
 
 subdir-ccflags-y += -I$(FULL_AMD_DAL_PATH)/dc/inc/
 subdir-ccflags-y += -I$(FULL_AMD_DAL_PATH)/dc/inc/hw
+subdir-ccflags-y += -I$(FULL_AMD_DAL_PATH)/modules/inc
+subdir-ccflags-y += -I$(FULL_AMD_DAL_PATH)/modules/freesync
 
 #TODO: remove when Timing Sync feature is complete
 subdir-ccflags-y += -DBUILD_FEATURE_TIMING_SYNC=0
 
-DAL_LIBS = amdgpu_dm dc
+DAL_LIBS = amdgpu_dm dc	modules/freesync
 
 AMD_DAL = $(addsuffix /Makefile, $(addprefix $(FULL_AMD_DAL_PATH)/,$(DAL_LIBS)))
 
diff --git a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c
index 9a87f0f..1b3a35b 100644
--- a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c
+++ b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.c
@@ -51,6 +51,8 @@
 #include <drm/drm_atomic_helper.h>
 #include <drm/drm_dp_mst_helper.h>
 
+#include "modules/inc/mod_freesync.h"
+
 /* Define variables here
  * These values will be passed to DAL for feature enable purpose
  * Disable ALL for HDMI light up
@@ -321,6 +323,14 @@ int amdgpu_dm_init(struct amdgpu_device *adev)
 
 	INIT_WORK(&adev->dm.mst_hotplug_work, hotplug_notify_work_func);
 
+	adev->dm.freesync_module = mod_freesync_create(adev->dm.dc);
+	if (!adev->dm.freesync_module) {
+		DRM_ERROR(
+		"amdgpu: failed to initialize freesync_module.\n");
+	} else
+		DRM_INFO("amdgpu: freesync_module init done %p.\n",
+				adev->dm.freesync_module);
+
 	if (amdgpu_dm_initialize_drm_device(adev)) {
 		DRM_ERROR(
 		"amdgpu: failed to initialize sw for display support.\n");
@@ -364,7 +374,10 @@ void amdgpu_dm_fini(struct amdgpu_device *adev)
 		amdgpu_cgs_destroy_device(adev->dm.cgs_device);
 		adev->dm.cgs_device = NULL;
 	}
-
+	if (adev->dm.freesync_module) {
+		mod_freesync_destroy(adev->dm.freesync_module);
+		adev->dm.freesync_module = NULL;
+	}
 	/* DC Destroy TODO: Replace destroy DAL */
 	{
 		dc_destroy(&adev->dm.dc);
@@ -765,10 +778,15 @@ void amdgpu_dm_update_connector_after_detect(
 		else {
 			aconnector->edid =
 				(struct edid *) sink->dc_edid.raw_edid;
+
+			amdgpu_dm_add_sink_to_freesync_module(
+					connector, aconnector->edid);
+
 			drm_mode_connector_update_edid_property(connector,
 					aconnector->edid);
 		}
 	} else {
+		amdgpu_dm_remove_sink_from_freesync_module(connector);
 		drm_mode_connector_update_edid_property(connector, NULL);
 		aconnector->num_modes = 0;
 		aconnector->dc_sink = NULL;
@@ -1231,6 +1249,39 @@ static void dm_page_flip(struct amdgpu_device *adev,
 			&addr, 1);
 }
 
+static int amdgpu_notify_freesync(struct drm_device *dev, void *data,
+				struct drm_file *filp)
+{
+	struct mod_freesync_params freesync_params;
+	uint8_t num_targets;
+	uint8_t i;
+	struct dc_target *target;
+
+	struct amdgpu_device *adev = dev->dev_private;
+	struct drm_amdgpu_freesync *args = data;
+	int r = 0;
+
+	freesync_params.state  = FREESYNC_STATE_FULLSCREEN;
+	if (args->op == AMDGPU_FREESYNC_FULLSCREEN_ENTER)
+		freesync_params.enable = true;
+	else
+		freesync_params.enable = false;
+
+	num_targets = dc_get_current_target_count(adev->dm.dc);
+
+	for (i = 0; i < num_targets; i++) {
+
+		target = dc_get_target_at_index(adev->dm.dc, i);
+
+		mod_freesync_update_state(adev->dm.freesync_module,
+						target->streams,
+						target->stream_count,
+						&freesync_params);
+	}
+
+	return r;
+}
+
 #ifdef CONFIG_DRM_AMDGPU_CIK
 static const struct amdgpu_display_funcs dm_dce_v8_0_display_funcs = {
 	.set_vga_render_state = dce_v8_0_set_vga_render_state,
@@ -1252,6 +1303,7 @@ static const struct amdgpu_display_funcs dm_dce_v8_0_display_funcs = {
 	.add_connector = NULL, /* VBIOS parsing. DAL does it. */
 	.stop_mc_access = dce_v8_0_stop_mc_access, /* called unconditionally */
 	.resume_mc_access = dce_v8_0_resume_mc_access, /* called unconditionally */
+	.notify_freesync = amdgpu_notify_freesync,
 };
 #endif
 
@@ -1275,6 +1327,8 @@ static const struct amdgpu_display_funcs dm_dce_v10_0_display_funcs = {
 	.add_connector = NULL, /* VBIOS parsing. DAL does it. */
 	.stop_mc_access = dce_v10_0_stop_mc_access, /* called unconditionally */
 	.resume_mc_access = dce_v10_0_resume_mc_access, /* called unconditionally */
+	.notify_freesync = amdgpu_notify_freesync,
+
 };
 
 static const struct amdgpu_display_funcs dm_dce_v11_0_display_funcs = {
@@ -1297,6 +1351,8 @@ static const struct amdgpu_display_funcs dm_dce_v11_0_display_funcs = {
 	.add_connector = NULL, /* VBIOS parsing. DAL does it. */
 	.stop_mc_access = dce_v11_0_stop_mc_access, /* called unconditionally */
 	.resume_mc_access = dce_v11_0_resume_mc_access, /* called unconditionally */
+	.notify_freesync = amdgpu_notify_freesync,
+
 };
 
 #if defined(CONFIG_DEBUG_KERNEL_DAL)
diff --git a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.h b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.h
index d497b6d..8d4efc0 100644
--- a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.h
+++ b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm.h
@@ -126,6 +126,8 @@ struct amdgpu_display_manager {
 	const struct dc_link *backlight_link;
 
 	struct work_struct mst_hotplug_work;
+
+	struct mod_freesync *freesync_module;
 };
 
 /* basic init/fini API */
diff --git a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c
index 0ab90e4..af5e12c 100644
--- a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c
+++ b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_mst_types.c
@@ -312,6 +312,7 @@ static void dm_dp_destroy_mst_connector(
 
 	aconnector->port = NULL;
 	if (aconnector->dc_sink) {
+		amdgpu_dm_remove_sink_from_freesync_module(connector);
 		dc_link_remove_remote_sink(aconnector->dc_link, aconnector->dc_sink);
 		dc_sink_release(aconnector->dc_sink);
 		aconnector->dc_sink = NULL;
@@ -363,6 +364,10 @@ static void dm_dp_mst_hotplug(struct drm_dp_mst_topology_mgr *mgr)
 					(uint8_t *)edid,
 					(edid->extensions + 1) * EDID_LENGTH,
 					&init_params);
+				if (aconnector->dc_sink)
+					amdgpu_dm_add_sink_to_freesync_module(
+							connector,
+							edid);
 
 				dm_restore_drm_connector_state(connector->dev, connector);
 			} else
diff --git a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c
index d04766c..b276705 100644
--- a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c
+++ b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.c
@@ -35,6 +35,8 @@
 #include "amdgpu_pm.h"
 #include "dm_services_types.h"
 
+#include "drm_edid.h"
+
 // We need to #undef FRAME_SIZE and DEPRECATED because they conflict
 // with ptrace-abi.h's #define's of them.
 #undef FRAME_SIZE
@@ -45,6 +47,8 @@
 #include "amdgpu_dm_types.h"
 #include "amdgpu_dm_mst_types.h"
 
+#include "modules/inc/mod_freesync.h"
+
 struct dm_connector_state {
 	struct drm_connector_state base;
 
@@ -2708,3 +2712,86 @@ connector_not_found:
 
 	return ret;
 }
+
+void amdgpu_dm_add_sink_to_freesync_module(
+		struct drm_connector *connector,
+		struct edid *edid)
+{
+	int i;
+	struct detailed_timing *timing;
+	struct detailed_non_pixel *data;
+	struct detailed_data_monitor_range *range;
+	struct mod_freesync_caps caps = {0};
+	struct amdgpu_connector *amdgpu_connector =
+			to_amdgpu_connector(connector);
+
+	struct drm_device *dev = connector->dev;
+	struct amdgpu_device *adev = dev->dev_private;
+
+	if (!amdgpu_connector->dc_sink) {
+		DRM_ERROR("dc_sink NULL, could not add free_sync module.\n");
+		return;
+	}
+	if (!adev->dm.freesync_module)
+		return;
+	if (edid->version > 1 || (edid->version == 1 && edid->revision > 1)) {
+		for (i = 0; i < 4; i++) {
+
+			timing	= &edid->detailed_timings[i];
+			data	= &timing->data.other_data;
+			range	= &data->data.range;
+			/*
+			 * Check if monitor has continuous frequency mode
+			 */
+			if (data->type != EDID_DETAIL_MONITOR_RANGE)
+				continue;
+			/*
+			 * Check for flag range limits only. If flag == 1 then
+			 * no additional timing information provided.
+			 * Default GTF, GTF Secondary curve and CVT are not
+			 * supported
+			 */
+			if (range->flags != 1)
+				continue;
+
+			amdgpu_connector->min_vfreq = range->min_vfreq;
+			amdgpu_connector->max_vfreq = range->max_vfreq;
+			amdgpu_connector->pixel_clock_mhz =
+				range->pixel_clock_mhz * 10;
+			break;
+		}
+		if (amdgpu_connector->max_vfreq -
+				amdgpu_connector->min_vfreq > 10) {
+			caps.supported = true;
+			caps.min_refresh_in_micro_hz =
+					amdgpu_connector->min_vfreq * 1000000;
+			caps.max_refresh_in_micro_hz =
+					amdgpu_connector->max_vfreq * 1000000;
+		}
+	}
+	mod_freesync_add_sink(adev->dm.freesync_module,
+			amdgpu_connector->dc_sink, &caps);
+
+}
+
+void amdgpu_dm_remove_sink_from_freesync_module(
+		struct drm_connector *connector)
+{
+	struct amdgpu_connector *amdgpu_connector =
+			to_amdgpu_connector(connector);
+
+	struct drm_device *dev = connector->dev;
+	struct amdgpu_device *adev = dev->dev_private;
+
+	if (!amdgpu_connector->dc_sink || adev->dm.freesync_module) {
+		DRM_ERROR("dc_sink NULL or no free_sync module.\n");
+		return;
+	}
+
+	amdgpu_connector->min_vfreq = 0;
+	amdgpu_connector->max_vfreq = 0;
+	amdgpu_connector->pixel_clock_mhz = 0;
+
+	mod_freesync_remove_sink(adev->dm.freesync_module,
+			amdgpu_connector->dc_sink);
+}
diff --git a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.h b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.h
index 7b400d1..15c22fe 100644
--- a/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.h
+++ b/drivers/gpu/drm/amd/dal/amdgpu_dm/amdgpu_dm_types.h
@@ -91,6 +91,13 @@ int amdgpu_dm_connector_mode_valid(
 
 void dm_restore_drm_connector_state(struct drm_device *dev, struct drm_connector *connector);
 
+void amdgpu_dm_add_sink_to_freesync_module(
+		struct drm_connector *connector,
+		struct edid *edid);
+
+void amdgpu_dm_remove_sink_from_freesync_module(
+		struct drm_connector *connector);
+
 extern const struct drm_encoder_helper_funcs amdgpu_dm_encoder_helper_funcs;
 
 #endif		/* __AMDGPU_DM_TYPES_H__ */
-- 
2.7.4

