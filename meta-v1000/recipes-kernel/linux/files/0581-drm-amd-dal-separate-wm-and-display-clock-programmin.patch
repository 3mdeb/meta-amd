From 649bc0b9c245d943058cf1d44d00bf6cdc3f919a Mon Sep 17 00:00:00 2001
From: Eric Yang <eric.yang2@amd.com>
Date: Wed, 15 Jun 2016 13:27:43 -0400
Subject: [PATCH 0581/1722] drm/amd/dal: separate wm and display clock
 programming

move wm programming down to apply_ctx_to_surface and make it
per pipe

Change-Id: I36f3e8460208891f37ead4b257a4c57ec4ef447e
Signed-off-by: Eric Yang <eric.yang2@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/core/dc.c               |   6 +-
 .../drm/amd/dal/dc/dce100/dce100_hw_sequencer.c    |   9 ++
 .../drm/amd/dal/dc/dce110/dce110_hw_sequencer.c    | 110 ++++++++++++++++++---
 .../gpu/drm/amd/dal/dc/dce80/dce80_hw_sequencer.c  |   9 ++
 drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h      |   6 +-
 5 files changed, 123 insertions(+), 17 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc.c b/drivers/gpu/drm/amd/dal/dc/core/dc.c
index 7c42bfc..46111e7 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc.c
@@ -918,7 +918,7 @@ bool dc_commit_surfaces_to_target(
         if (prev_disp_clk < context->bw_results.dispclk_khz) {
 		pplib_apply_display_requirements(core_dc, context,
                                                                 &context->pp_display_cfg);
-                core_dc->hwss.program_bw(core_dc, context);
+                core_dc->hwss.set_display_clock(context);
 	}
 
 	if (current_enabled_surface_count > 0 && new_enabled_surface_count == 0)
@@ -930,8 +930,8 @@ bool dc_commit_surfaces_to_target(
         /* TODO: decouple wm programming and display clock and unhack this condition*/
 
 	/* Lower display clock if necessary */
-        if (prev_disp_clk > context->bw_results.dispclk_khz || new_surface_count > 1) {
-		core_dc->hwss.program_bw(core_dc, context);
+        if (prev_disp_clk > context->bw_results.dispclk_khz) {
+                core_dc->hwss.set_display_clock(context);
 		pplib_apply_display_requirements(core_dc, context,
 						&context->pp_display_cfg);
 	}
diff --git a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_hw_sequencer.c b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_hw_sequencer.c
index 1d73000..a9aeae3 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_hw_sequencer.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_hw_sequencer.c
@@ -229,6 +229,13 @@ static bool dce100_enable_display_power_gating(
 		return false;
 }
 
+static void set_display_mark_for_pipe_if_needed(struct core_dc *dc,
+		struct pipe_ctx *pipe_ctx,
+		struct validate_context *context)
+{
+	/* Do nothing until we have proper bandwitdth calcs */
+}
+
 static void set_displaymarks(
 		const struct core_dc *dc, struct validate_context *context)
 {
@@ -274,6 +281,8 @@ bool dce100_hw_sequencer_construct(struct core_dc *dc)
 	dc->hwss.pipe_control_lock = dce100_pipe_control_lock;
 	dc->hwss.set_blender_mode = dce100_set_blender_mode;
 	dc->hwss.set_displaymarks = set_displaymarks;
+	dc->hwss.set_display_mark_for_pipe_if_needed = set_display_mark_for_pipe_if_needed;
+
 	return true;
 }
 
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
index 4d9af39..b63d594 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
@@ -1052,6 +1052,70 @@ static uint32_t compute_pstate_blackout_duration(
 	return total_dest_line_time_ns;
 }
 
+/* get the index of the pipe_ctx if there were no gaps in the pipe_ctx array*/
+int get_bw_result_idx(
+		struct resource_context *res_ctx,
+		int pipe_idx)
+{
+	int i, collapsed_idx;
+
+	collapsed_idx = 0;
+	for (i = 0; i < pipe_idx; i++) {
+		if (res_ctx->pipe_ctx->stream)
+			collapsed_idx++;
+	}
+	return collapsed_idx;
+}
+
+
+static bool watermark_changed(
+		struct pipe_ctx *pipe_ctx,
+		struct validate_context *context,
+		struct validate_context *old_context)
+{
+	int collapsed_pipe_idx = get_bw_result_idx(&context->res_ctx,
+			pipe_ctx->pipe_idx);
+	int old_collapsed_pipe_idx = get_bw_result_idx(&old_context->res_ctx,
+			pipe_ctx->pipe_idx);
+	struct pipe_ctx *old_pipe_ctx =  &old_context->res_ctx.pipe_ctx[pipe_ctx->pipe_idx];
+
+	if (!old_pipe_ctx->stream)
+		return true;
+
+	if (memcmp(&context->bw_results.nbp_state_change_wm_ns[collapsed_pipe_idx],
+			&old_context->bw_results.nbp_state_change_wm_ns[old_collapsed_pipe_idx],
+			sizeof(struct bw_watermarks)))
+		return true;
+	if (memcmp(&context->bw_results.stutter_exit_wm_ns[collapsed_pipe_idx],
+			&old_context->bw_results.stutter_exit_wm_ns[old_collapsed_pipe_idx],
+			sizeof(struct bw_watermarks)))
+		return true;
+	if (memcmp(&context->bw_results.urgent_wm_ns[collapsed_pipe_idx],
+			&old_context->bw_results.urgent_wm_ns[old_collapsed_pipe_idx],
+			sizeof(struct bw_watermarks)))
+		return true;
+
+	return false;
+}
+
+static void program_wm_for_pipe(struct core_dc *dc,
+		struct pipe_ctx *pipe_ctx,
+		struct validate_context *context)
+{
+	int total_dest_line_time_ns = compute_pstate_blackout_duration(
+			dc->bw_vbios.blackout_duration,
+			pipe_ctx->stream);
+	int bw_result_idx = get_bw_result_idx(&context->res_ctx,
+				pipe_ctx->pipe_idx);
+
+	pipe_ctx->mi->funcs->mem_input_program_display_marks(
+		pipe_ctx->mi,
+		context->bw_results.nbp_state_change_wm_ns[bw_result_idx],
+		context->bw_results.stutter_exit_wm_ns[bw_result_idx],
+		context->bw_results.urgent_wm_ns[bw_result_idx],
+		total_dest_line_time_ns);
+}
+
 static void set_displaymarks(
 	const struct core_dc *dc,
 	struct validate_context *context)
@@ -1078,6 +1142,21 @@ static void set_displaymarks(
 	}
 }
 
+static void set_safe_displaymarks_for_pipe(struct pipe_ctx *pipe_ctx)
+{
+	struct bw_watermarks max_marks = {
+		MAX_WATERMARK, MAX_WATERMARK, MAX_WATERMARK, MAX_WATERMARK };
+	struct bw_watermarks nbp_marks = {
+		SAFE_NBP_MARK, SAFE_NBP_MARK, SAFE_NBP_MARK, SAFE_NBP_MARK };
+
+		pipe_ctx->mi->funcs->mem_input_program_display_marks(
+				pipe_ctx->mi,
+				nbp_marks,
+				max_marks,
+				max_marks,
+				MAX_WATERMARK);
+}
+
 static void set_safe_displaymarks(struct resource_context *res_ctx)
 {
 	uint8_t i;
@@ -1099,17 +1178,6 @@ static void set_safe_displaymarks(struct resource_context *res_ctx)
 	}
 }
 
-static void program_bw(struct core_dc *dc, struct validate_context *context)
-{
-	set_safe_displaymarks(&context->res_ctx);
-	/*TODO: when pplib works*/
-	/*dc_set_clocks_and_clock_state(context);*/
-
-	dc->hwss.set_display_clock(context);
-
-	dc->hwss.set_displaymarks(dc, context);
-}
-
 static void switch_dp_clock_sources(
 	const struct core_dc *dc,
 	struct resource_context *res_ctx)
@@ -1653,6 +1721,19 @@ static void dce110_power_on_pipe_if_needed(
 	}
 }
 
+static void set_display_mark_for_pipe_if_needed(struct core_dc *dc,
+		struct pipe_ctx *pipe_ctx,
+		struct validate_context *context)
+{
+	struct pipe_ctx *old_pipe_ctx =  &dc->current_context->res_ctx.pipe_ctx[pipe_ctx->pipe_idx];
+
+	/* hack for underlay pipe*/
+	if (pipe_ctx->top_pipe && !old_pipe_ctx->top_pipe)
+		set_safe_displaymarks_for_pipe(pipe_ctx);
+	else if (watermark_changed(pipe_ctx, context, dc->current_context))
+		program_wm_for_pipe(dc, pipe_ctx, context);
+}
+
 static void dce110_program_front_end_for_pipe(struct core_dc *dc,
 		struct pipe_ctx *pipe_ctx,
 		struct validate_context *context)
@@ -1664,6 +1745,11 @@ static void dce110_program_front_end_for_pipe(struct core_dc *dc,
 		PIPE_LOCK_CONTROL_BLENDER |
 		PIPE_LOCK_CONTROL_MODE;
 
+	dc->hwss.set_display_mark_for_pipe_if_needed(
+			dc,
+		pipe_ctx,
+		context);
+
 	if (!pipe_ctx->surface->public.flip_immediate)
 		lock_mask |= PIPE_LOCK_CONTROL_SURFACE;
 
@@ -1803,7 +1889,6 @@ static const struct hw_sequencer_funcs dce110_funcs = {
 	.power_down = power_down,
 	.enable_accelerated_mode = enable_accelerated_mode,
 	.enable_timing_synchronization = dce110_enable_timing_synchronization,
-	.program_bw = program_bw,
 	.enable_stream = enable_stream,
 	.disable_stream = disable_stream,
 	.enable_display_pipe_clock_gating = enable_display_pipe_clock_gating,
@@ -1815,6 +1900,7 @@ static const struct hw_sequencer_funcs dce110_funcs = {
 	.clock_gating_power_up = dal_dc_clock_gating_dce110_power_up,/*todo*/
 	.set_display_clock = set_display_clock,
 	.set_displaymarks = set_displaymarks,
+	.set_display_mark_for_pipe_if_needed = set_display_mark_for_pipe_if_needed,
 	.set_drr = set_drr
 };
 
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_hw_sequencer.c b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_hw_sequencer.c
index d2be44b..31e3e2b 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_hw_sequencer.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_hw_sequencer.c
@@ -212,6 +212,14 @@ static bool dce80_enable_display_power_gating(
 		return false;
 }
 
+
+static void set_display_mark_for_pipe_if_needed(struct core_dc *dc,
+		struct pipe_ctx *pipe_ctx,
+		struct validate_context *context)
+{
+	/* Do nothing until we have proper bandwitdth calcs */
+}
+
 static void set_displaymarks(
 		const struct core_dc *dc, struct validate_context *context)
 {
@@ -228,6 +236,7 @@ bool dce80_hw_sequencer_construct(struct core_dc *dc)
 	dc->hwss.pipe_control_lock = dce80_pipe_control_lock;
 	dc->hwss.set_blender_mode = dce80_set_blender_mode;
 	dc->hwss.set_displaymarks = set_displaymarks;
+	dc->hwss.set_display_mark_for_pipe_if_needed = set_display_mark_for_pipe_if_needed;
 
 	return true;
 }
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h b/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h
index 4d76e2e..f9ed99d 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/hw_sequencer.h
@@ -103,8 +103,6 @@ struct hw_sequencer_funcs {
 					struct dc_bios *dcb,
 					enum pipe_gating_control power_gating);
 
-	void (*program_bw)(struct core_dc *dc, struct validate_context *context);
-
 	void (*enable_stream)(struct pipe_ctx *pipe_ctx);
 
 	void (*disable_stream)(struct pipe_ctx *pipe_ctx);
@@ -127,6 +125,10 @@ struct hw_sequencer_funcs {
 				const struct core_dc *dc,
 				struct validate_context *context);
 
+	void (*set_display_mark_for_pipe_if_needed)(struct core_dc *dc,
+			struct pipe_ctx *pipe_ctx,
+			struct validate_context *context);
+
 	void (*set_display_clock)(struct validate_context *context);
 
 	void (*set_drr)(struct pipe_ctx **pipe_ctx, int num_pipes,
-- 
2.7.4

