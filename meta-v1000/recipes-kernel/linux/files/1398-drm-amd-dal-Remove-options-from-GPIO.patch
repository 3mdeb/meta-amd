From 32ba5af9bbcd46b885e07beb7cdbef6ad7e4e475 Mon Sep 17 00:00:00 2001
From: Harry Wentland <harry.wentland@amd.com>
Date: Thu, 20 Oct 2016 20:46:28 -0400
Subject: [PATCH 1398/1722] drm/amd/dal: Remove options from GPIO

These were only used for EN value which is already stored in gpio_pin

Change-Id: I543635ad5dd31ef80722199515f978ed7d8c79fc
Signed-off-by: Harry Wentland <harry.wentland@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/gpio/Makefile           |  2 +-
 .../gpu/drm/amd/dal/dc/gpio/dce110/hw_ddc_dce110.c |  2 +-
 .../gpu/drm/amd/dal/dc/gpio/dce80/hw_ddc_dce80.c   |  2 +-
 drivers/gpu/drm/amd/dal/dc/gpio/gpio_base.c        |  7 +--
 drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.c     | 21 +++----
 drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.h     |  1 -
 drivers/gpu/drm/amd/dal/dc/gpio/hw_ddc.c           | 70 ----------------------
 drivers/gpu/drm/amd/dal/dc/gpio/hw_ddc.h           |  6 --
 drivers/gpu/drm/amd/dal/dc/gpio/hw_gpio.c          |  6 +-
 drivers/gpu/drm/amd/dal/dc/gpio/hw_gpio.h          |  9 +--
 drivers/gpu/drm/amd/dal/include/gpio_interface.h   |  3 +-
 drivers/gpu/drm/amd/dal/include/gpio_types.h       |  4 --
 12 files changed, 24 insertions(+), 109 deletions(-)
 delete mode 100644 drivers/gpu/drm/amd/dal/dc/gpio/hw_ddc.c

diff --git a/drivers/gpu/drm/amd/dal/dc/gpio/Makefile b/drivers/gpu/drm/amd/dal/dc/gpio/Makefile
index 863e1f2..e23dd96 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpio/Makefile
+++ b/drivers/gpu/drm/amd/dal/dc/gpio/Makefile
@@ -2,7 +2,7 @@
 # Makefile for the 'gpio' sub-component of DAL.
 # It provides the control and status of HW GPIO pins.
 
-GPIO = gpio_base.o gpio_service.o hw_ddc.o hw_factory.o \
+GPIO = gpio_base.o gpio_service.o hw_factory.o \
        hw_gpio.o hw_hpd.o hw_translate.o
 
 AMD_DAL_GPIO = $(addprefix $(AMDDALPATH)/dc/gpio/,$(GPIO))
diff --git a/drivers/gpu/drm/amd/dal/dc/gpio/dce110/hw_ddc_dce110.c b/drivers/gpu/drm/amd/dal/dc/gpio/dce110/hw_ddc_dce110.c
index f141b84..4aceb20 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpio/dce110/hw_ddc_dce110.c
+++ b/drivers/gpu/drm/amd/dal/dc/gpio/dce110/hw_ddc_dce110.c
@@ -260,7 +260,7 @@ static enum gpio_result set_config(
 
 static const struct hw_gpio_pin_funcs funcs = {
 	.destroy = destroy,
-	.open = dal_hw_ddc_open,
+	.open = dal_hw_gpio_open,
 	.get_value = dal_hw_gpio_get_value,
 	.set_value = dal_hw_gpio_set_value,
 	.set_config = set_config,
diff --git a/drivers/gpu/drm/amd/dal/dc/gpio/dce80/hw_ddc_dce80.c b/drivers/gpu/drm/amd/dal/dc/gpio/dce80/hw_ddc_dce80.c
index c4e0d44..9093e95 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpio/dce80/hw_ddc_dce80.c
+++ b/drivers/gpu/drm/amd/dal/dc/gpio/dce80/hw_ddc_dce80.c
@@ -259,7 +259,7 @@ static enum gpio_result set_config(
 
 static const struct hw_gpio_pin_funcs funcs = {
 	.destroy = destroy,
-	.open = dal_hw_ddc_open,
+	.open = dal_hw_gpio_open,
 	.get_value = dal_hw_gpio_get_value,
 	.set_value = dal_hw_gpio_set_value,
 	.set_config = set_config,
diff --git a/drivers/gpu/drm/amd/dal/dc/gpio/gpio_base.c b/drivers/gpu/drm/amd/dal/dc/gpio/gpio_base.c
index 5a65c0c..d42eb3d 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpio/gpio_base.c
+++ b/drivers/gpu/drm/amd/dal/dc/gpio/gpio_base.c
@@ -53,13 +53,12 @@ enum gpio_result dal_gpio_open(
 	struct gpio *gpio,
 	enum gpio_mode mode)
 {
-	return dal_gpio_open_ex(gpio, mode, NULL);
+	return dal_gpio_open_ex(gpio, mode);
 }
 
 enum gpio_result dal_gpio_open_ex(
 	struct gpio *gpio,
-	enum gpio_mode mode,
-	void *options)
+	enum gpio_mode mode)
 {
 	if (gpio->pin) {
 		ASSERT_CRITICAL(false);
@@ -69,7 +68,7 @@ enum gpio_result dal_gpio_open_ex(
 	gpio->mode = mode;
 
 	return dal_gpio_service_open(
-		gpio->service, gpio->id, gpio->en, mode, options, &gpio->pin);
+		gpio->service, gpio->id, gpio->en, mode, &gpio->pin);
 }
 
 enum gpio_result dal_gpio_get_value(
diff --git a/drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.c b/drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.c
index 01fdc1c..c6d5bd1 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.c
+++ b/drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.c
@@ -226,7 +226,6 @@ enum gpio_result dal_gpio_service_open(
 	enum gpio_id id,
 	uint32_t en,
 	enum gpio_mode mode,
-	void *options,
 	struct hw_gpio_pin **ptr)
 {
 	struct hw_gpio_pin *pin;
@@ -277,7 +276,7 @@ enum gpio_result dal_gpio_service_open(
 		return GPIO_RESULT_NON_SPECIFIC_ERROR;
 	}
 
-	if (!pin->funcs->open(pin, mode, options)) {
+	if (!pin->funcs->open(pin, mode)) {
 		ASSERT_CRITICAL(false);
 		dal_gpio_service_close(service, &pin);
 		return GPIO_RESULT_OPEN_FAILED;
@@ -477,18 +476,18 @@ enum gpio_result dal_ddc_open(
 {
 	enum gpio_result result;
 
-	struct gpio_ddc_open_options data_options;
-	struct gpio_ddc_open_options clock_options;
 	struct gpio_config_data config_data;
+	struct hw_gpio *hw_data;
+	struct hw_gpio *hw_clock;
 
-	result = dal_gpio_open_ex(ddc->pin_data, mode, &data_options);
+	result = dal_gpio_open_ex(ddc->pin_data, mode);
 
 	if (result != GPIO_RESULT_OK) {
 		BREAK_TO_DEBUGGER();
 		return result;
 	}
 
-	result = dal_gpio_open_ex(ddc->pin_clock, mode, &clock_options);
+	result = dal_gpio_open_ex(ddc->pin_clock, mode);
 
 	if (result != GPIO_RESULT_OK) {
 		BREAK_TO_DEBUGGER();
@@ -507,10 +506,12 @@ enum gpio_result dal_ddc_open(
 		config_data.type = GPIO_CONFIG_TYPE_DDC;
 
 	config_data.config.ddc.type = config_type;
-	config_data.config.ddc.data_en_bit_present =
-		data_options.en_bit_present;
-	config_data.config.ddc.clock_en_bit_present =
-		clock_options.en_bit_present;
+
+	hw_data = FROM_HW_GPIO_PIN(ddc->pin_data->pin);
+	hw_clock = FROM_HW_GPIO_PIN(ddc->pin_clock->pin);
+
+	config_data.config.ddc.data_en_bit_present = hw_data->store.en != 0;
+	config_data.config.ddc.clock_en_bit_present = hw_clock->store.en != 0;
 
 	result = dal_gpio_set_config(ddc->pin_data, &config_data);
 
diff --git a/drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.h b/drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.h
index a17c438..c7f3081 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.h
+++ b/drivers/gpu/drm/amd/dal/dc/gpio/gpio_service.h
@@ -47,7 +47,6 @@ enum gpio_result dal_gpio_service_open(
 	enum gpio_id id,
 	uint32_t en,
 	enum gpio_mode mode,
-	void *options,
 	struct hw_gpio_pin **ptr);
 
 void dal_gpio_service_close(
diff --git a/drivers/gpu/drm/amd/dal/dc/gpio/hw_ddc.c b/drivers/gpu/drm/amd/dal/dc/gpio/hw_ddc.c
deleted file mode 100644
index ce895f0..0000000
--- a/drivers/gpu/drm/amd/dal/dc/gpio/hw_ddc.c
+++ /dev/null
@@ -1,70 +0,0 @@
-/*
- * Copyright 2012-15 Advanced Micro Devices, Inc.
- *
- * Permission is hereby granted, free of charge, to any person obtaining a
- * copy of this software and associated documentation files (the "Software"),
- * to deal in the Software without restriction, including without limitation
- * the rights to use, copy, modify, merge, publish, distribute, sublicense,
- * and/or sell copies of the Software, and to permit persons to whom the
- * Software is furnished to do so, subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be included in
- * all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
- * THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
- * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
- * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
- * OTHER DEALINGS IN THE SOFTWARE.
- *
- * Authors: AMD
- *
- */
-
-#include "dm_services.h"
-
-#include "include/gpio_types.h"
-#include "hw_gpio.h"
-#include "hw_ddc.h"
-
-#include "reg_helper.h"
-#include "gpio_regs.h"
-
-#undef FN
-#define FN(reg_name, field_name) \
-	gpio->regs->field_name ## _shift, gpio->regs->field_name ## _mask
-
-#define CTX \
-	gpio->base.ctx
-#define REG(reg)\
-	(gpio->regs->reg)
-
-#define FROM_HW_GPIO(ptr) \
-	container_of((ptr), struct hw_ddc, base)
-
-#define FROM_HW_GPIO_PIN(ptr) \
-	FROM_HW_GPIO(container_of((ptr), struct hw_gpio, base))
-
-bool dal_hw_ddc_open(
-	struct hw_gpio_pin *ptr,
-	enum gpio_mode mode,
-	void *options)
-{
-	struct hw_ddc *pin = FROM_HW_GPIO_PIN(ptr);
-	struct hw_gpio *gpio = &pin->base;
-	uint32_t en;
-
-	if (!options) {
-		BREAK_TO_DEBUGGER();
-		return false;
-	}
-
-	/* get the EN bit before overwriting it */
-	REG_GET(EN_reg, EN, &en);
-
-	((struct gpio_ddc_open_options *)options)->en_bit_present = (en != 0);
-
-	return dal_hw_gpio_open(ptr, mode, options);
-}
diff --git a/drivers/gpu/drm/amd/dal/dc/gpio/hw_ddc.h b/drivers/gpu/drm/amd/dal/dc/gpio/hw_ddc.h
index bc4cce9..e522900 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpio/hw_ddc.h
+++ b/drivers/gpu/drm/amd/dal/dc/gpio/hw_ddc.h
@@ -38,10 +38,4 @@ struct hw_ddc {
 #define HW_DDC_FROM_BASE(hw_gpio) \
 	container_of((HW_GPIO_FROM_BASE(hw_gpio)), struct hw_ddc, base)
 
-bool dal_hw_ddc_open(
-	struct hw_gpio_pin *ptr,
-	enum gpio_mode mode,
-	void *options);
-
-
 #endif
diff --git a/drivers/gpu/drm/amd/dal/dc/gpio/hw_gpio.c b/drivers/gpu/drm/amd/dal/dc/gpio/hw_gpio.c
index 1af5cb8..4cdcdfb 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpio/hw_gpio.c
+++ b/drivers/gpu/drm/amd/dal/dc/gpio/hw_gpio.c
@@ -39,9 +39,6 @@
 #define REG(reg)\
 	(gpio->regs->reg)
 
-#define FROM_HW_GPIO_PIN(ptr) \
-	container_of((ptr), struct hw_gpio, base)
-
 static void store_registers(
 	struct hw_gpio *gpio)
 {
@@ -62,8 +59,7 @@ static void restore_registers(
 
 bool dal_hw_gpio_open(
 	struct hw_gpio_pin *ptr,
-	enum gpio_mode mode,
-	void *options)
+	enum gpio_mode mode)
 {
 	struct hw_gpio *pin = FROM_HW_GPIO_PIN(ptr);
 
diff --git a/drivers/gpu/drm/amd/dal/dc/gpio/hw_gpio.h b/drivers/gpu/drm/amd/dal/dc/gpio/hw_gpio.h
index 70e1561..fb41ee2 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpio/hw_gpio.h
+++ b/drivers/gpu/drm/amd/dal/dc/gpio/hw_gpio.h
@@ -28,6 +28,9 @@
 
 #include "gpio_regs.h"
 
+#define FROM_HW_GPIO_PIN(ptr) \
+	container_of((ptr), struct hw_gpio, base)
+
 struct addr_mask {
 	uint32_t addr;
 	uint32_t mask;
@@ -47,8 +50,7 @@ struct hw_gpio_pin_funcs {
 		struct hw_gpio_pin **ptr);
 	bool (*open)(
 		struct hw_gpio_pin *pin,
-		enum gpio_mode mode,
-		void *options);
+		enum gpio_mode mode);
 	enum gpio_result (*get_value)(
 		const struct hw_gpio_pin *pin,
 		uint32_t *value);
@@ -115,8 +117,7 @@ bool dal_hw_gpio_construct(
 
 bool dal_hw_gpio_open(
 	struct hw_gpio_pin *pin,
-	enum gpio_mode mode,
-	void *options);
+	enum gpio_mode mode);
 
 enum gpio_result dal_hw_gpio_get_value(
 	const struct hw_gpio_pin *pin,
diff --git a/drivers/gpu/drm/amd/dal/include/gpio_interface.h b/drivers/gpu/drm/amd/dal/include/gpio_interface.h
index a084d79..e4fd310 100644
--- a/drivers/gpu/drm/amd/dal/include/gpio_interface.h
+++ b/drivers/gpu/drm/amd/dal/include/gpio_interface.h
@@ -38,8 +38,7 @@ enum gpio_result dal_gpio_open(
 
 enum gpio_result dal_gpio_open_ex(
 	struct gpio *gpio,
-	enum gpio_mode mode,
-	void *options);
+	enum gpio_mode mode);
 
 /* Get high or low from the pin */
 enum gpio_result dal_gpio_get_value(
diff --git a/drivers/gpu/drm/amd/dal/include/gpio_types.h b/drivers/gpu/drm/amd/dal/include/gpio_types.h
index 8b2db41..8dd46ed 100644
--- a/drivers/gpu/drm/amd/dal/include/gpio_types.h
+++ b/drivers/gpu/drm/amd/dal/include/gpio_types.h
@@ -329,8 +329,4 @@ struct gpio_config_data {
 	} config;
 };
 
-struct gpio_ddc_open_options {
-	bool en_bit_present;
-};
-
 #endif
-- 
2.7.4

