From 514f4fd2c77a5ae53839e1ec009fbd0f84ca4ac6 Mon Sep 17 00:00:00 2001
From: Tony Cheng <tony.cheng@amd.com>
Date: Mon, 12 Sep 2016 17:04:36 -0400
Subject: [PATCH 1074/1722] drm/amd/dal: remove deadcode in audio

- remove input/output signal as they are not used.  it's probably there to support blocking audio for VGA and DVI in DAL2.  in DAL3 resource knows what signal type support audio.

- remove disable_az_clock_gating from audio. FEATURE_LIGHT_SLEEP is default to false, which means aduio_dce80.disable_az_clock_gating never get called.  dce11 disable_az_clock_gating is not implemented

- remove channel splitting programming from audio

- remove audio enumeration as enumeratino is managed by resource.

- remove audio feature as dig mapping should be manage by resource.

Change-Id: I0da7e8664e62a226966f50cfb7672e2d9cfed9f2
Signed-off-by: Tony Cheng <tony.cheng@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 .../gpu/drm/amd/dal/dc/adapter/adapter_service.c   |   2 -
 drivers/gpu/drm/amd/dal/dc/audio/audio.h           |   6 -
 drivers/gpu/drm/amd/dal/dc/audio/audio_base.c      | 118 +-----------------
 .../gpu/drm/amd/dal/dc/audio/dce110/audio_dce110.c |  23 ----
 .../amd/dal/dc/audio/dce110/hw_ctx_audio_dce110.c  |   7 --
 .../gpu/drm/amd/dal/dc/audio/dce80/audio_dce80.c   |  33 -----
 .../amd/dal/dc/audio/dce80/hw_ctx_audio_dce80.c    | 136 ---------------------
 drivers/gpu/drm/amd/dal/dc/audio/hw_ctx_audio.h    |  29 -----
 .../amd/dal/include/adapter_service_interface.h    |   1 -
 drivers/gpu/drm/amd/dal/include/audio_interface.h  |  52 --------
 drivers/gpu/drm/amd/dal/include/audio_types.h      |  12 --
 11 files changed, 1 insertion(+), 418 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.c b/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.c
index c96cc2cd..9883920 100644
--- a/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.c
+++ b/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.c
@@ -96,7 +96,6 @@ static const struct feature_source_entry feature_entry_table[] = {
 	{FEATURE_DP_SINK_DETECT_POLL_DATA_PIN, false, true},
 	{FEATURE_UNDERFLOW_INTERRUPT, false, true},
 	{FEATURE_ALLOW_WATERMARK_ADJUSTMENT, false, true},
-	{FEATURE_LIGHT_SLEEP, false, true},
 	{FEATURE_DCP_DITHER_FRAME_RANDOM_ENABLE, false, true},
 	{FEATURE_DCP_DITHER_RGB_RANDOM_ENABLE, false, true},
 	{FEATURE_DCP_DITHER_HIGH_PASS_RANDOM_ENABLE, false, true},
@@ -431,7 +430,6 @@ static bool override_default_parameters(
 	}
 
 	switch (feature_entry_table[idx].feature_id) {
-	check_bool_feature(LIGHT_SLEEP);
 	check_bool_feature(MAXIMIZE_STUTTER_MARKS);
 	check_bool_feature(MAXIMIZE_URGENCY_WATERMARKS);
 	check_bool_feature(USE_MAX_DISPLAY_CLK);
diff --git a/drivers/gpu/drm/amd/dal/dc/audio/audio.h b/drivers/gpu/drm/amd/dal/dc/audio/audio.h
index a821afc..cf8d507 100644
--- a/drivers/gpu/drm/amd/dal/dc/audio/audio.h
+++ b/drivers/gpu/drm/amd/dal/dc/audio/audio.h
@@ -101,8 +101,6 @@ struct audio_funcs {
 		const struct audio_pll_info *pll_info);
 
 	/* options and features supported by Audio */
-	struct audio_feature_support (*get_supported_features)(
-		struct audio *audio);
 
 	/*
 	 *check_audio_bandwidth
@@ -125,13 +123,9 @@ struct audio {
 
 	/*external structures - get service from external*/
 	struct graphics_object_id id;
-	struct adapter_service *adapter_service;
 	/* audio HW context */
 	struct hw_ctx_audio *hw_ctx;
 	struct dc_context *ctx;
-	/* audio supports input and output signals */
-	uint32_t input_signals;
-	uint32_t output_signals;
 };
 
 /* - functions defined by audio.h will be used by audio component only.
diff --git a/drivers/gpu/drm/amd/dal/dc/audio/audio_base.c b/drivers/gpu/drm/amd/dal/dc/audio/audio_base.c
index e61076a..165bfb5 100644
--- a/drivers/gpu/drm/amd/dal/dc/audio/audio_base.c
+++ b/drivers/gpu/drm/amd/dal/dc/audio/audio_base.c
@@ -111,37 +111,6 @@ static enum audio_result initialize(
 	return AUDIO_RESULT_OK;
 }
 
-static void enable_channel_splitting_mapping(
-	struct audio *audio,
-	enum engine_id engine_id,
-	enum signal_type signal,
-	const struct audio_channel_associate_info *audio_mapping,
-	bool enable)
-{
-	/*DCE specific, must be implemented in derived*/
-	BREAK_TO_DEBUGGER();
-}
-
-/* get current multi channel split. */
-static enum audio_result get_channel_splitting_mapping(
-	struct audio *audio,
-	enum engine_id engine_id,
-	struct audio_channel_associate_info *audio_mapping)
-{
-	/*DCE specific, must be implemented in derived*/
-	BREAK_TO_DEBUGGER();
-	return AUDIO_RESULT_OK;
-}
-
-/* set payload value for the unsolicited response */
-static void set_unsolicited_response_payload(
-	struct audio *audio,
-	enum audio_payload payload)
-{
-	/*DCE specific, must be implemented in derived*/
-	BREAK_TO_DEBUGGER();
-}
-
 /* update audio wall clock source */
 static void setup_audio_wall_dto(
 	struct audio *audio,
@@ -153,19 +122,6 @@ static void setup_audio_wall_dto(
 	BREAK_TO_DEBUGGER();
 }
 
-static struct audio_feature_support get_supported_features(struct audio *audio)
-{
-	/*DCE specific, must be implemented in derived*/
-	struct audio_feature_support features;
-
-	memset(&features, 0, sizeof(features));
-
-	features.ENGINE_DIGA = 1;
-	features.ENGINE_DIGB = 1;
-
-	return features;
-}
-
 static const struct audio_funcs audio_funcs = {
 	.destroy = destroy,
 	.setup = setup,
@@ -175,7 +131,6 @@ static const struct audio_funcs audio_funcs = {
 	.mute = mute,
 	.initialize = initialize,
 	.setup_audio_wall_dto = setup_audio_wall_dto,
-	.get_supported_features = get_supported_features,
 };
 
 /***** SCOPE : declare in audio.h. use within dal-audio. *****/
@@ -184,34 +139,16 @@ bool dal_audio_construct_base(
 	struct audio *audio,
 	const struct audio_init_data *init_data)
 {
-	enum signal_type signals = SIGNAL_TYPE_HDMI_TYPE_A;
-
 	ASSERT(init_data->as != NULL);
 
 	/* base hook functions */
 	audio->funcs = &audio_funcs;
 
-	/*setup pointers to get service from dal service compoenents*/
-	audio->adapter_service = init_data->as;
-
 	audio->ctx = init_data->ctx;
 
 	/* save audio endpoint number to identify object creating */
 	audio->id = init_data->audio_stream_id;
 
-	/* Fill supported signals. !!! be aware that android definition is
-	 * already shift to vector.
-	 */
-	signals |= SIGNAL_TYPE_DISPLAY_PORT;
-	signals |= SIGNAL_TYPE_DISPLAY_PORT_MST;
-	signals |= SIGNAL_TYPE_EDP;
-	signals |= SIGNAL_TYPE_DISPLAY_PORT;
-	signals |= SIGNAL_TYPE_WIRELESS;
-
-	/* Audio supports same set for input and output signals */
-	audio->input_signals = signals;
-	audio->output_signals = signals;
-
 	return true;
 }
 
@@ -221,34 +158,6 @@ void dal_audio_destruct_base(
 {
 }
 
-/* Enumerate Graphics Object supported Input/Output Signal Types */
-uint32_t dal_audio_enumerate_input_signals(
-	struct audio *audio)
-{
-	return audio->input_signals;
-}
-
-uint32_t dal_audio_enumerate_output_signals(
-	struct audio *audio)
-{
-	return audio->output_signals;
-}
-
-/*  Check if signal supported by GraphicsObject  */
-bool dal_audio_is_input_signal_supported(
-	struct audio *audio,
-	enum signal_type signal)
-{
-	return (signal & audio->output_signals) != 0;
-}
-
-bool dal_audio_is_output_signal_supported(
-	struct audio *audio,
-	enum signal_type signal)
-{
-	return (signal & audio->input_signals) != 0;
-}
-
 /***** SCOPE : declare in dal\include  *****/
 
 /* audio object creator triage. memory allocate and release will be
@@ -257,12 +166,8 @@ bool dal_audio_is_output_signal_supported(
 struct audio *dal_audio_create(
 	const struct audio_init_data *init_data)
 {
-	struct adapter_service *as;
+	struct adapter_service *as = init_data->as;
 
-	if (init_data->as == NULL)
-		return NULL;
-
-	as = init_data->as;
 	switch (dal_adapter_service_get_dce_version(as)) {
 #if defined(CONFIG_DRM_AMD_DAL_DCE8_0)
 	case DCE_VERSION_8_0:
@@ -309,12 +214,6 @@ void dal_audio_destroy(
 	*audio = NULL;
 }
 
-const struct graphics_object_id dal_audio_get_graphics_object_id(
-	const struct audio *audio)
-{
-	return audio->id;
-}
-
 /* enable azalia audio endpoint. This function call hw_ctx directly
  *not overwitten at audio level.
  */
@@ -355,16 +254,6 @@ void dal_audio_check_audio_bandwidth(
  * not overwitten at audio level.
  */
 
-/*assign GTC group and enable GTC value embedding*/
-void dal_audio_enable_gtc_embedding_with_group(
-	struct audio *audio,
-	uint32_t group_num,
-	uint32_t audio_latency)
-{
-	audio->hw_ctx->funcs->enable_gtc_embedding_with_group(
-		audio->hw_ctx, group_num, audio_latency);
-}
-
 /* perform power up sequence (boot up, resume, recovery) */
 enum audio_result dal_audio_power_up(
 	struct audio *audio)
@@ -434,8 +323,3 @@ void dal_audio_setup_audio_wall_dto(
 	audio->funcs->setup_audio_wall_dto(audio, signal, crtc_info, pll_info);
 }
 
-struct audio_feature_support dal_audio_get_supported_features(
-	struct audio *audio)
-{
-	return audio->funcs->get_supported_features(audio);
-}
diff --git a/drivers/gpu/drm/amd/dal/dc/audio/dce110/audio_dce110.c b/drivers/gpu/drm/amd/dal/dc/audio/dce110/audio_dce110.c
index 0dfbd8b..b7baad5 100644
--- a/drivers/gpu/drm/amd/dal/dc/audio/dce110/audio_dce110.c
+++ b/drivers/gpu/drm/amd/dal/dc/audio/dce110/audio_dce110.c
@@ -320,28 +320,6 @@ static void setup_audio_wall_dto(
 		audio->hw_ctx, signal, crtc_info, pll_info);
 }
 
-/**
-* get_supported_features
-*
-* @brief
-*  options and features supported by Audio
-*  returns supported engines, signals.
-*  features are reported for HW audio/Azalia block rather then Audio object
-*  itself the difference for DCE6.x is that MultiStream Audio is now supported
-*
-*/
-static struct audio_feature_support get_supported_features(struct audio *audio)
-{
-	struct audio_feature_support afs = {0};
-
-	afs.ENGINE_DIGA = 1;
-	afs.ENGINE_DIGB = 1;
-	afs.ENGINE_DIGC = 1;
-	afs.MULTISTREAM_AUDIO = 1;
-
-	return afs;
-}
-
 static const struct audio_funcs funcs = {
 	.destroy = destroy,
 	.setup = setup,
@@ -351,7 +329,6 @@ static const struct audio_funcs funcs = {
 	.mute = mute,
 	.initialize = initialize,
 	.setup_audio_wall_dto = setup_audio_wall_dto,
-	.get_supported_features = get_supported_features,
 };
 
 static bool construct(
diff --git a/drivers/gpu/drm/amd/dal/dc/audio/dce110/hw_ctx_audio_dce110.c b/drivers/gpu/drm/amd/dal/dc/audio/dce110/hw_ctx_audio_dce110.c
index 3e7e393..24ef235 100644
--- a/drivers/gpu/drm/amd/dal/dc/audio/dce110/hw_ctx_audio_dce110.c
+++ b/drivers/gpu/drm/amd/dal/dc/audio/dce110/hw_ctx_audio_dce110.c
@@ -1729,17 +1729,10 @@ static const struct hw_ctx_audio_funcs funcs = {
 		disable_dp_audio,
 	.setup_azalia =
 		setup_azalia,
-	.disable_az_clock_gating = NULL,
 	.unmute_azalia_audio =
 		unmute_azalia_audio,
 	.mute_azalia_audio =
 		mute_azalia_audio,
-	.setup_channel_splitting_mapping =
-		setup_channel_splitting_mapping,
-	.get_channel_splitting_mapping =
-		get_channel_splitting_mapping,
-	.set_unsolicited_response_payload =
-		set_unsolicited_response_payload,
 	.hw_initialize =
 		hw_initialize,
 	.get_azalia_clock_info_hdmi =
diff --git a/drivers/gpu/drm/amd/dal/dc/audio/dce80/audio_dce80.c b/drivers/gpu/drm/amd/dal/dc/audio/dce80/audio_dce80.c
index 9fb9c33..b4fb9ed 100644
--- a/drivers/gpu/drm/amd/dal/dc/audio/dce80/audio_dce80.c
+++ b/drivers/gpu/drm/amd/dal/dc/audio/dce80/audio_dce80.c
@@ -275,10 +275,6 @@ static enum audio_result initialize(
 	/* override HW default settings */
 	audio->hw_ctx->funcs->hw_initialize(audio->hw_ctx);
 
-	if (dal_adapter_service_is_feature_supported(audio->adapter_service,
-						     FEATURE_LIGHT_SLEEP))
-		audio->hw_ctx->funcs->disable_az_clock_gating(audio->hw_ctx);
-
 	return AUDIO_RESULT_OK;
 }
 
@@ -303,34 +299,6 @@ static void setup_audio_wall_dto(
 		audio->hw_ctx, signal, crtc_info, pll_info);
 }
 
-/**
-* GetSupportedFeatures
-*
-* @brief
-*  options and features supported by Audio
-*  returns supported engines, signals.
-*  features are reported for HW audio/Azalia block rather then Audio object
-*  itself the difference for DCE6.x is that MultiStream Audio is now supported
-*
-* @param
-*  NONE
-*/
-static struct audio_feature_support get_supported_features(struct audio *audio)
-{
-	struct audio_feature_support afs = {0};
-
-	afs.ENGINE_DIGA = 1;
-	afs.ENGINE_DIGB = 1;
-	afs.ENGINE_DIGC = 1;
-	afs.ENGINE_DIGD = 1;
-	afs.ENGINE_DIGE = 1;
-	afs.ENGINE_DIGF = 1;
-	afs.ENGINE_DIGG = 1;
-	afs.MULTISTREAM_AUDIO = 1;
-
-	return afs;
-}
-
 static const struct audio_funcs funcs = {
 	.destroy = destroy,
 	.setup = setup,
@@ -340,7 +308,6 @@ static const struct audio_funcs funcs = {
 	.mute = mute,
 	.initialize = initialize,
 	.setup_audio_wall_dto = setup_audio_wall_dto,
-	.get_supported_features = get_supported_features,
 };
 
 static bool construct(
diff --git a/drivers/gpu/drm/amd/dal/dc/audio/dce80/hw_ctx_audio_dce80.c b/drivers/gpu/drm/amd/dal/dc/audio/dce80/hw_ctx_audio_dce80.c
index bab744e..edca4d0 100644
--- a/drivers/gpu/drm/amd/dal/dc/audio/dce80/hw_ctx_audio_dce80.c
+++ b/drivers/gpu/drm/amd/dal/dc/audio/dce80/hw_ctx_audio_dce80.c
@@ -1433,121 +1433,6 @@ static void mute_azalia_audio(
 	dm_write_reg(hw_ctx->ctx, addr, value);
 }
 
-/* enable channel splitting mapping */
-static void setup_channel_splitting_mapping(
-	const struct hw_ctx_audio *hw_ctx,
-	enum engine_id engine_id,
-	enum signal_type signal,
-	const struct audio_channel_associate_info *audio_mapping,
-	bool enable)
-{
-	uint32_t value = 0;
-
-	if ((audio_mapping == NULL || audio_mapping->u32all == 0) && enable)
-		return;
-
-	value = audio_mapping->u32all;
-
-	if (enable == false)
-		/*0xFFFFFFFF;*/
-		value = MULTI_CHANNEL_SPLIT_NO_ASSO_INFO;
-
-	write_indirect_azalia_reg(
-		hw_ctx,
-		ixAZALIA_F0_CODEC_PIN_ASSOCIATION_INFO,
-		value);
-}
-
-/* get current channel spliting */
-static bool get_channel_splitting_mapping(
-	const struct hw_ctx_audio *hw_ctx,
-	enum engine_id engine_id,
-	struct audio_channel_associate_info *audio_mapping)
-{
-	uint32_t value = 0;
-
-	if (audio_mapping == NULL)
-		return false;
-
-	value = read_indirect_azalia_reg(
-		hw_ctx,
-		ixAZALIA_F0_CODEC_PIN_ASSOCIATION_INFO);
-
-	/*0xFFFFFFFF*/
-	if (get_reg_field_value(value,
-			AZALIA_F0_CODEC_PIN_ASSOCIATION_INFO,
-			ASSOCIATION_INFO) !=
-			MULTI_CHANNEL_SPLIT_NO_ASSO_INFO) {
-		uint32_t multi_channel01_enable = 0;
-		uint32_t multi_channel23_enable = 0;
-		uint32_t multi_channel45_enable = 0;
-		uint32_t multi_channel67_enable = 0;
-		/* get the one we set.*/
-		audio_mapping->u32all = value;
-
-		/* check each enable status*/
-		value = read_indirect_azalia_reg(
-			hw_ctx,
-			ixAZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_ENABLE);
-
-		multi_channel01_enable = get_reg_field_value(value,
-		AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_ENABLE,
-		MULTICHANNEL01_ENABLE);
-
-		multi_channel23_enable = get_reg_field_value(value,
-		AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_ENABLE,
-		MULTICHANNEL23_ENABLE);
-
-		multi_channel45_enable = get_reg_field_value(value,
-		AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_ENABLE,
-		MULTICHANNEL45_ENABLE);
-
-		multi_channel67_enable = get_reg_field_value(value,
-		AZALIA_F0_CODEC_PIN_CONTROL_MULTICHANNEL_ENABLE,
-		MULTICHANNEL67_ENABLE);
-
-		if (multi_channel01_enable == 0 &&
-			multi_channel23_enable == 0 &&
-			multi_channel45_enable == 0 &&
-			multi_channel67_enable == 0)
-			dal_logger_write(hw_ctx->ctx->logger,
-				LOG_MAJOR_HW_TRACE,
-				LOG_MINOR_COMPONENT_AUDIO,
-				"Audio driver did not enable multi-channel\n");
-
-		return true;
-	}
-
-	return false;
-}
-
-/* set the payload value for the unsolicited response */
-static void set_unsolicited_response_payload(
-	const struct hw_ctx_audio *hw_ctx,
-	enum audio_payload payload)
-{
-	/* set the payload value for the unsolicited response
-	 Jack presence is not required to be enabled */
-	uint32_t value = 0;
-
-	value = read_indirect_azalia_reg(
-		hw_ctx,
-		ixAZALIA_F0_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_FORCE);
-
-	set_reg_field_value(value, payload,
-		AZALIA_F0_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_FORCE,
-		UNSOLICITED_RESPONSE_PAYLOAD);
-
-	set_reg_field_value(value, 1,
-		AZALIA_F0_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_FORCE,
-		UNSOLICITED_RESPONSE_FORCE);
-
-	write_indirect_azalia_reg(
-		hw_ctx,
-		ixAZALIA_F0_CODEC_PIN_CONTROL_UNSOLICITED_RESPONSE_FORCE,
-		value);
-}
-
 /* initialize HW state */
 static void hw_initialize(
 	const struct hw_ctx_audio *hw_ctx)
@@ -1660,19 +1545,6 @@ static void disable_gtc_embedding(
 		value);
 }
 
- /* Disable Azalia Clock Gating Feature */
-static void disable_az_clock_gating(
-	const struct hw_ctx_audio *hw_ctx)
-{
-	uint32_t value;
-
-	value = dm_read_reg(hw_ctx->ctx,
-			mmAZALIA_CONTROLLER_CLOCK_GATING);
-	set_reg_field_value(value, 0, AZALIA_CONTROLLER_CLOCK_GATING, ENABLE_CLOCK_GATING);
-	dm_write_reg(hw_ctx->ctx,
-			mmAZALIA_CONTROLLER_CLOCK_GATING, value);
-}
-
 /* search pixel clock value for Azalia HDMI Audio */
 static bool get_azalia_clock_info_hdmi(
 	const struct hw_ctx_audio *hw_ctx,
@@ -1741,18 +1613,10 @@ static const struct hw_ctx_audio_funcs funcs = {
 		disable_dp_audio,
 	.setup_azalia =
 		setup_azalia,
-	.disable_az_clock_gating =
-		disable_az_clock_gating,
 	.unmute_azalia_audio =
 		unmute_azalia_audio,
 	.mute_azalia_audio =
 		mute_azalia_audio,
-	.setup_channel_splitting_mapping =
-		setup_channel_splitting_mapping,
-	.get_channel_splitting_mapping =
-		get_channel_splitting_mapping,
-	.set_unsolicited_response_payload =
-		set_unsolicited_response_payload,
 	.hw_initialize =
 		hw_initialize,
 	.get_azalia_clock_info_hdmi =
diff --git a/drivers/gpu/drm/amd/dal/dc/audio/hw_ctx_audio.h b/drivers/gpu/drm/amd/dal/dc/audio/hw_ctx_audio.h
index 22f9d75..d6beb67 100644
--- a/drivers/gpu/drm/amd/dal/dc/audio/hw_ctx_audio.h
+++ b/drivers/gpu/drm/amd/dal/dc/audio/hw_ctx_audio.h
@@ -110,41 +110,12 @@ struct hw_ctx_audio_funcs {
 		const struct hw_ctx_audio *hw_ctx,
 		enum engine_id engine_id);
 
-	/* enable channel splitting mapping */
-	void (*setup_channel_splitting_mapping)(
-		const struct hw_ctx_audio *hw_ctx,
-		enum engine_id engine_id,
-		enum signal_type signal,
-		const struct audio_channel_associate_info *audio_mapping,
-		bool enable);
-
-	/* get current channel spliting */
-	bool (*get_channel_splitting_mapping)(
-		const struct hw_ctx_audio *hw_ctx,
-		enum engine_id engine_id,
-		struct audio_channel_associate_info *audio_mapping);
-
-	/* set the payload value for the unsolicited response */
-	void (*set_unsolicited_response_payload)(
-		const struct hw_ctx_audio *hw_ctx,
-		enum audio_payload payload);
-
 	/* initialize HW state */
 	void (*hw_initialize)(
 		const struct hw_ctx_audio *hw_ctx);
 
 	/* check_audio_bandwidth */
 
-	/* Assign GTC group and enable GTC value embedding */
-	void (*enable_gtc_embedding_with_group)(
-		const struct hw_ctx_audio *hw_ctx,
-		uint32_t groupNum,
-		uint32_t audioLatency);
-
-	/* Disable Azalia Clock Gating Feature */
-	void (*disable_az_clock_gating)(
-		const struct hw_ctx_audio *hw_ctx);
-
 	/* ~~~~  protected: ~~~~*/
 
 	/* calc_max_audio_packets_per_line */
diff --git a/drivers/gpu/drm/amd/dal/include/adapter_service_interface.h b/drivers/gpu/drm/amd/dal/include/adapter_service_interface.h
index a6f4e4c..5b9d364 100644
--- a/drivers/gpu/drm/amd/dal/include/adapter_service_interface.h
+++ b/drivers/gpu/drm/amd/dal/include/adapter_service_interface.h
@@ -68,7 +68,6 @@ enum adapter_feature_id {
 	FEATURE_DP_SINK_DETECT_POLL_DATA_PIN,
 	FEATURE_UNDERFLOW_INTERRUPT,
 	FEATURE_ALLOW_WATERMARK_ADJUSTMENT,
-	FEATURE_LIGHT_SLEEP,
 	FEATURE_DCP_DITHER_FRAME_RANDOM_ENABLE,
 	FEATURE_DCP_DITHER_RGB_RANDOM_ENABLE,
 	FEATURE_DCP_DITHER_HIGH_PASS_RANDOM_ENABLE,
diff --git a/drivers/gpu/drm/amd/dal/include/audio_interface.h b/drivers/gpu/drm/amd/dal/include/audio_interface.h
index ef740a2..1515bb5 100644
--- a/drivers/gpu/drm/amd/dal/include/audio_interface.h
+++ b/drivers/gpu/drm/amd/dal/include/audio_interface.h
@@ -60,26 +60,6 @@ struct audio *dal_audio_create(
 void dal_audio_destroy(
 	struct audio **audio);
 
-/****** graphics object interface ******/
-const struct graphics_object_id dal_audio_get_graphics_object_id(
-	const struct audio *audio);
-
-/* Enumerate Graphics Object supported Input/Output Signal Types */
-uint32_t dal_audio_enumerate_input_signals(
-	struct audio *audio);
-
-uint32_t dal_audio_enumerate_output_signals(
-	struct audio *audio);
-
-/*  Check if signal supported by GraphicsObject  */
-bool dal_audio_is_input_signal_supported(
-	struct audio *audio,
-	enum signal_type signal);
-
-bool dal_audio_is_output_signal_supported(
-	struct audio *audio,
-	enum signal_type signal);
-
 /***** programming interface *****/
 
 /* perform power up sequence (boot up, resume, recovery) */
@@ -132,9 +112,6 @@ enum audio_result dal_audio_mute(
 
 /***** information interface *****/
 
-struct audio_feature_support dal_audio_get_supported_features(
-	struct audio *audio);
-
 /* get audio bandwidth information */
 void dal_audio_check_audio_bandwidth(
 	struct audio *audio,
@@ -143,35 +120,6 @@ void dal_audio_check_audio_bandwidth(
 	enum signal_type signal,
 	union audio_sample_rates *sample_rates);
 
-/* Enable multi channel split */
-void dal_audio_enable_channel_splitting_mapping(
-	struct audio *audio,
-	enum engine_id engine_id,
-	enum signal_type signal,
-	const struct audio_channel_associate_info *audio_mapping,
-	bool enable);
-
-/* get current multi channel split. */
-enum audio_result dal_audio_get_channel_splitting_mapping(
-	struct audio *audio,
-	enum engine_id engine_id,
-	struct audio_channel_associate_info *audio_mapping);
-
-/* set payload value for the unsolicited response */
-void dal_audio_set_unsolicited_response_payload(
-	struct audio *audio,
-	enum audio_payload payload);
-
-/*Assign GTC group and enable GTC value embedding*/
-void dal_audio_enable_gtc_embedding_with_group(
-	struct audio *audio,
-	uint32_t group_num,
-	uint32_t audio_latency);
-
-/* Disable GTC value embedding */
-void dal_audio_disable_gtc_embedding(
-	struct audio *audio);
-
 /* Update audio wall clock source */
 void dal_audio_setup_audio_wall_dto(
 	struct audio *audio,
diff --git a/drivers/gpu/drm/amd/dal/include/audio_types.h b/drivers/gpu/drm/amd/dal/include/audio_types.h
index f08b609..7cf9358 100644
--- a/drivers/gpu/drm/amd/dal/include/audio_types.h
+++ b/drivers/gpu/drm/amd/dal/include/audio_types.h
@@ -127,18 +127,6 @@ struct audio_output {
 	struct audio_pll_info pll_info;
 };
 
-struct audio_feature_support {
-	/* supported engines*/
-	uint32_t ENGINE_DIGA:1;
-	uint32_t ENGINE_DIGB:1;
-	uint32_t ENGINE_DIGC:1;
-	uint32_t ENGINE_DIGD:1;
-	uint32_t ENGINE_DIGE:1;
-	uint32_t ENGINE_DIGF:1;
-	uint32_t ENGINE_DIGG:1;
-	uint32_t MULTISTREAM_AUDIO:1;
-};
-
 enum audio_payload {
 	CHANNEL_SPLIT_MAPPINGCHANG = 0x9,
 };
-- 
2.7.4

