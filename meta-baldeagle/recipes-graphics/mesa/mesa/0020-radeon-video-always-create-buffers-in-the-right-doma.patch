From 208c5c41bf579303c93c9040e18e187afb9ebd3a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Christian=20K=C3=B6nig?= <christian.koenig@amd.com>
Date: Tue, 21 Jan 2014 11:49:06 -0700
Subject: [PATCH 20/27] radeon/video: always create buffers in the right
 domain
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Christian KÃ¶nig <christian.koenig@amd.com>
---
 src/gallium/drivers/radeon/radeon_uvd.c      |    6 +++---
 src/gallium/drivers/radeon/radeon_vce.c      |    8 ++++----
 src/gallium/drivers/radeon/radeon_vce_v2_0.c |    4 ++--
 src/gallium/drivers/radeon/radeon_video.c    |    9 ++++++---
 src/gallium/drivers/radeon/radeon_video.h    |    4 +++-
 5 files changed, 18 insertions(+), 13 deletions(-)

diff --git a/src/gallium/drivers/radeon/radeon_uvd.c b/src/gallium/drivers/radeon/radeon_uvd.c
index e59a08d..ba73e08 100644
--- a/src/gallium/drivers/radeon/radeon_uvd.c
+++ b/src/gallium/drivers/radeon/radeon_uvd.c
@@ -799,12 +799,12 @@ struct pipe_video_codec *ruvd_create_decoder(struct pipe_context *context,
 	bs_buf_size = width * height * 512 / (16 * 16);
 	for (i = 0; i < NUM_BUFFERS; ++i) {
 		unsigned msg_fb_size = align(sizeof(struct ruvd_msg), 0x1000) + 0x1000;
-		if (!rvid_create_buffer(dec->ws, &dec->msg_fb_buffers[i], msg_fb_size)) {
+		if (!rvid_create_buffer(dec->ws, &dec->msg_fb_buffers[i], msg_fb_size, RADEON_DOMAIN_VRAM)) {
 			RVID_ERR("Can't allocated message buffers.\n");
 			goto error;
 		}
 
-		if (!rvid_create_buffer(dec->ws, &dec->bs_buffers[i], bs_buf_size)) {
+		if (!rvid_create_buffer(dec->ws, &dec->bs_buffers[i], bs_buf_size, RADEON_DOMAIN_GTT)) {
 			RVID_ERR("Can't allocated bitstream buffers.\n");
 			goto error;
 		}
@@ -813,7 +813,7 @@ struct pipe_video_codec *ruvd_create_decoder(struct pipe_context *context,
 		rvid_clear_buffer(dec->ws, dec->cs, &dec->bs_buffers[i]);
 	}
 
-	if (!rvid_create_buffer(dec->ws, &dec->dpb, dpb_size)) {
+	if (!rvid_create_buffer(dec->ws, &dec->dpb, dpb_size, RADEON_DOMAIN_VRAM)) {
 		RVID_ERR("Can't allocated dpb.\n");
 		goto error;
 	}
diff --git a/src/gallium/drivers/radeon/radeon_vce.c b/src/gallium/drivers/radeon/radeon_vce.c
index fd0b24e..ae2dc7d 100644
--- a/src/gallium/drivers/radeon/radeon_vce.c
+++ b/src/gallium/drivers/radeon/radeon_vce.c
@@ -85,7 +85,7 @@ static void rvce_destroy(struct pipe_video_codec *encoder)
 	struct rvce_encoder *enc = (struct rvce_encoder*)encoder;
 	if (enc->stream_handle) {
 		struct rvid_buffer fb;
-		rvid_create_buffer(enc->ws, &fb, 512);
+		rvid_create_buffer(enc->ws, &fb, 512, RADEON_DOMAIN_GTT);
 		enc->fb = &fb;
 		enc->session(enc);
 		enc->feedback(enc);
@@ -119,7 +119,7 @@ static void rvce_begin_frame(struct pipe_video_codec *encoder,
 	if (!enc->stream_handle) {
 		struct rvid_buffer fb;
 		enc->stream_handle = rvid_alloc_stream_handle();
-		rvid_create_buffer(enc->ws, &fb, 512);
+		rvid_create_buffer(enc->ws, &fb, 512, RADEON_DOMAIN_GTT);
 		enc->fb = &fb;
 		enc->session(enc);
 		enc->create(enc);
@@ -151,7 +151,7 @@ static void rvce_encode_bitstream(struct pipe_video_codec *encoder,
 	enc->bs_size = destination->width0;
 
 	*fb = enc->fb = CALLOC_STRUCT(rvid_buffer);
-	if (!rvid_create_buffer(enc->ws, enc->fb, 512)) {
+	if (!rvid_create_buffer(enc->ws, enc->fb, 512, RADEON_DOMAIN_GTT)) {
 		RVID_ERR("Can't create feedback buffer.\n");
 		return;
 	}
@@ -235,7 +235,7 @@ struct pipe_video_codec *rvce_create_encoder(struct pipe_context *context,
 
 	enc->ws->cs_set_flush_callback(enc->cs, rvce_cs_flush, enc);
 
-	if (!rvid_create_buffer(enc->ws, &enc->cpb, CPB_SIZE)) {
+	if (!rvid_create_buffer(enc->ws, &enc->cpb, CPB_SIZE, RADEON_DOMAIN_VRAM)) {
 		RVID_ERR("Can't create CPB buffer.\n");
 		goto error;
 	}
diff --git a/src/gallium/drivers/radeon/radeon_vce_v2_0.c b/src/gallium/drivers/radeon/radeon_vce_v2_0.c
index 668a4b5..8b49c27 100644
--- a/src/gallium/drivers/radeon/radeon_vce_v2_0.c
+++ b/src/gallium/drivers/radeon/radeon_vce_v2_0.c
@@ -79,7 +79,7 @@ static void create(struct rvce_encoder *enc)
 static void feedback(struct rvce_encoder *enc)
 {
 	RVCE_BEGIN(0x05000005); // feedback buffer
-	RVCE_WRITE(enc->fb->cs_handle, RADEON_DOMAIN_GTT); // feedbackRingAddressHi
+	RVCE_WRITE(enc->fb->cs_handle, enc->fb->domain); // feedbackRingAddressHi
 	RVCE_CS(0x00000000); // feedbackRingAddressLo
 	RVCE_CS(0x00000001); // feedbackRingSize
 	RVCE_END();
@@ -232,7 +232,7 @@ static void encode(struct rvce_encoder *enc)
 	RVCE_END();
 
 	RVCE_BEGIN(0x05000001); // context buffer
-	RVCE_READWRITE(enc->cpb.cs_handle, RADEON_DOMAIN_VRAM); // encodeContextAddressHi
+	RVCE_READWRITE(enc->cpb.cs_handle, enc->cpb.domain); // encodeContextAddressHi
 	RVCE_CS(0x00000000); // encodeContextAddressLo
 	RVCE_END();
 
diff --git a/src/gallium/drivers/radeon/radeon_video.c b/src/gallium/drivers/radeon/radeon_video.c
index fdc7d21..e3aaabe 100644
--- a/src/gallium/drivers/radeon/radeon_video.c
+++ b/src/gallium/drivers/radeon/radeon_video.c
@@ -59,9 +59,12 @@ unsigned rvid_alloc_stream_handle()
 }
 
 /* create a buffer in the winsys */
-bool rvid_create_buffer(struct radeon_winsys *ws, struct rvid_buffer *buffer, unsigned size)
+bool rvid_create_buffer(struct radeon_winsys *ws, struct rvid_buffer *buffer,
+			unsigned size, enum radeon_bo_domain domain)
 {
-	buffer->buf = ws->buffer_create(ws, size, 4096, false, RADEON_DOMAIN_GTT | RADEON_DOMAIN_VRAM);
+	buffer->domain = domain;
+
+	buffer->buf = ws->buffer_create(ws, size, 4096, false, domain);
 	if (!buffer->buf)
 		return false;
 
@@ -87,7 +90,7 @@ bool rvid_resize_buffer(struct radeon_winsys *ws, struct radeon_winsys_cs *cs,
 	struct rvid_buffer old_buf = *new_buf;
 	void *src = NULL, *dst = NULL;
 
-	if (!rvid_create_buffer(ws, new_buf, new_size))
+	if (!rvid_create_buffer(ws, new_buf, new_size, new_buf->domain))
 		goto error;
 
 	src = ws->buffer_map(old_buf.cs_handle, cs, PIPE_TRANSFER_READ);
diff --git a/src/gallium/drivers/radeon/radeon_video.h b/src/gallium/drivers/radeon/radeon_video.h
index 85bdb78..5b5611c 100644
--- a/src/gallium/drivers/radeon/radeon_video.h
+++ b/src/gallium/drivers/radeon/radeon_video.h
@@ -40,6 +40,7 @@
 /* video buffer representation */
 struct rvid_buffer
 {
+	enum radeon_bo_domain		domain;
 	struct pb_buffer*		buf;
 	struct radeon_winsys_cs_handle*	cs_handle;
 };
@@ -48,7 +49,8 @@ struct rvid_buffer
 unsigned rvid_alloc_stream_handle(void);
 
 /* create a buffer in the winsys */
-bool rvid_create_buffer(struct radeon_winsys *ws, struct rvid_buffer *buffer, unsigned size);
+bool rvid_create_buffer(struct radeon_winsys *ws, struct rvid_buffer *buffer,
+			unsigned size, enum radeon_bo_domain domain);
 
 /* destroy a buffer */
 void rvid_destroy_buffer(struct rvid_buffer *buffer);
-- 
1.7.9.5

