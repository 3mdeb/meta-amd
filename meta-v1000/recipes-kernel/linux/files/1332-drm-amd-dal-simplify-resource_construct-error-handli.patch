From 43a17db553a20aa0e2155f3f76baee33ec469807 Mon Sep 17 00:00:00 2001
From: Tony Cheng <tony.cheng@amd.com>
Date: Sat, 15 Oct 2016 00:08:22 -0400
Subject: [PATCH 1332/1722] drm/amd/dal: simplify resource_construct error
 handling by using resource_destruct

instead of bug prone unrolling of constructed resources

Change-Id: I413b139762bc721f0fa7c16309a3da35e71b6f4a
Signed-off-by: Tony Cheng <tony.cheng@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
---
 .../gpu/drm/amd/dal/dc/dce100/dce100_resource.c    | 76 +++++----------------
 .../gpu/drm/amd/dal/dc/dce110/dce110_resource.c    | 77 +++++-----------------
 .../gpu/drm/amd/dal/dc/dce112/dce112_resource.c    | 75 +++++----------------
 drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c  | 76 +++++----------------
 4 files changed, 63 insertions(+), 241 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
index 0207a27..f4b1eca 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
@@ -836,14 +836,14 @@ static bool construct(
 	if (pool->base.dp_clock_source == NULL) {
 		dm_error("DC: failed to create dp clock source!\n");
 		BREAK_TO_DEBUGGER();
-		goto clk_src_create_fail;
+		goto res_create_fail;
 	}
 
 	for (i = 0; i < pool->base.clk_src_count; i++) {
 		if (pool->base.clock_sources[i] == NULL) {
 			dm_error("DC: failed to create clock sources!\n");
 			BREAK_TO_DEBUGGER();
-			goto clk_src_create_fail;
+			goto res_create_fail;
 		}
 	}
 
@@ -851,7 +851,7 @@ static bool construct(
 	if (pool->base.display_clock == NULL) {
 		dm_error("DC: failed to create display clock!\n");
 		BREAK_TO_DEBUGGER();
-		goto disp_clk_create_fail;
+		goto res_create_fail;
 	}
 
 
@@ -871,7 +871,7 @@ static bool construct(
 		init_data.ctx = dc->ctx;
 		pool->base.irqs = dal_irq_service_dce110_create(&init_data);
 		if (!pool->base.irqs)
-			goto irqs_create_fail;
+			goto res_create_fail;
 	}
 
 	/*************************************************
@@ -887,7 +887,7 @@ static bool construct(
 	if (pool->base.scaler_filter == NULL) {
 		BREAK_TO_DEBUGGER();
 		dm_error("DC: failed to create filter!\n");
-		goto filter_create_fail;
+		goto res_create_fail;
 	}
 
 	for (i = 0; i < pool->base.pipe_count; i++) {
@@ -900,7 +900,7 @@ static bool construct(
 		if (pool->base.timing_generators[i] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create tg!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 
 		pool->base.mis[i] = dce100_mem_input_create(ctx, as, i,
@@ -909,7 +909,7 @@ static bool construct(
 			BREAK_TO_DEBUGGER();
 			dm_error(
 				"DC: failed to create memory input!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 
 		pool->base.ipps[i] = dce100_ipp_create(ctx, i,
@@ -918,7 +918,7 @@ static bool construct(
 			BREAK_TO_DEBUGGER();
 			dm_error(
 				"DC: failed to create input pixel processor!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 
 		pool->base.transforms[i] = dce100_transform_create(
@@ -927,7 +927,7 @@ static bool construct(
 			BREAK_TO_DEBUGGER();
 			dm_error(
 				"DC: failed to create transform!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 		pool->base.transforms[i]->funcs->transform_set_scaler_filter(
 				pool->base.transforms[i],
@@ -938,7 +938,7 @@ static bool construct(
 			BREAK_TO_DEBUGGER();
 			dm_error(
 				"DC: failed to create output pixel processor!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 	}
 
@@ -957,7 +957,7 @@ static bool construct(
 		if (pool->base.audios[i] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create DPPs!\n");
-			goto audio_create_fail;
+			goto res_create_fail;
 		}
 		pool->base.audio_count++;
 	}
@@ -972,7 +972,7 @@ static bool construct(
 			if (pool->base.stream_enc[i] == NULL) {
 				BREAK_TO_DEBUGGER();
 				dm_error("DC: failed to create stream_encoder!\n");
-				goto stream_enc_create_fail;
+				goto res_create_fail;
 			}
 		}
 	}
@@ -985,63 +985,19 @@ static bool construct(
 		if (pool->base.stream_enc[pool->base.stream_enc_count] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create stream_encoder!\n");
-			goto stream_enc_create_fail;
+			goto res_create_fail;
 		}
 		pool->base.stream_enc_count++;
 	}
 
 	/* Create hardware sequencer */
 	if (!dce100_hw_sequencer_construct(dc))
-		goto stream_enc_create_fail;
+		goto res_create_fail;
 
 	return true;
 
-stream_enc_create_fail:
-	for (i = 0; i < pool->base.stream_enc_count; i++) {
-		if (pool->base.stream_enc[i] != NULL)
-			dm_free(DCE110STRENC_FROM_STRENC(pool->base.stream_enc[i]));
-	}
-
-audio_create_fail:
-	for (i = 0; i < pool->base.pipe_count; i++) {
-		if (pool->base.audios[i] != NULL)
-			dce_aud_destroy(&pool->base.audios[i]);
-	}
-
-controller_create_fail:
-	for (i = 0; i < pool->base.pipe_count; i++) {
-		if (pool->base.opps[i] != NULL)
-			dce100_opp_destroy(&pool->base.opps[i]);
-
-		if (pool->base.transforms[i] != NULL)
-			dce100_transform_destroy(&pool->base.transforms[i]);
-
-		if (pool->base.ipps[i] != NULL)
-			dce110_ipp_destroy(&pool->base.ipps[i]);
-
-		if (pool->base.mis[i] != NULL) {
-			dm_free(TO_DCE110_MEM_INPUT(pool->base.mis[i]));
-			pool->base.mis[i] = NULL;
-		}
-
-		if (pool->base.timing_generators[i] != NULL)	{
-			dm_free(DCE110TG_FROM_TG(pool->base.timing_generators[i]));
-			pool->base.timing_generators[i] = NULL;
-		}
-	}
-
-filter_create_fail:
-	dal_irq_service_destroy(&pool->base.irqs);
-
-irqs_create_fail:
-	dal_display_clock_destroy(&pool->base.display_clock);
-
-disp_clk_create_fail:
-clk_src_create_fail:
-	for (i = 0; i < pool->base.clk_src_count; i++) {
-		if (pool->base.clock_sources[i] != NULL)
-			dce100_clock_source_destroy(&pool->base.clock_sources[i]);
-	}
+res_create_fail:
+	destruct(pool);
 
 	return false;
 }
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
index 39713ba..57e0fca 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
@@ -1152,14 +1152,14 @@ static bool construct(
 	if (pool->base.dp_clock_source == NULL) {
 		dm_error("DC: failed to create dp clock source!\n");
 		BREAK_TO_DEBUGGER();
-		goto clk_src_create_fail;
+		goto res_create_fail;
 	}
 
 	for (i = 0; i < pool->base.clk_src_count; i++) {
 		if (pool->base.clock_sources[i] == NULL) {
 			dm_error("DC: failed to create clock sources!\n");
 			BREAK_TO_DEBUGGER();
-			goto clk_src_create_fail;
+			goto res_create_fail;
 		}
 	}
 
@@ -1167,7 +1167,7 @@ static bool construct(
 	if (pool->base.display_clock == NULL) {
 		dm_error("DC: failed to create display clock!\n");
 		BREAK_TO_DEBUGGER();
-		goto disp_clk_create_fail;
+		goto res_create_fail;
 	}
 
 	/* get static clock information for PPLIB or firmware, save
@@ -1187,14 +1187,14 @@ static bool construct(
 		init_data.ctx = dc->ctx;
 		pool->base.irqs = dal_irq_service_dce110_create(&init_data);
 		if (!pool->base.irqs)
-			goto irqs_create_fail;
+			goto res_create_fail;
 	}
 
 	pool->base.scaler_filter = dal_scaler_filter_create(ctx);
 	if (pool->base.scaler_filter == NULL) {
 		BREAK_TO_DEBUGGER();
 		dm_error("DC: failed to create filter!\n");
-		goto filter_create_fail;
+		goto res_create_fail;
 	}
 
 	for (i = 0; i < pool->base.pipe_count; i++) {
@@ -1203,7 +1203,7 @@ static bool construct(
 		if (pool->base.timing_generators[i] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create tg!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 
 		pool->base.mis[i] = dce110_mem_input_create(ctx, as, i,
@@ -1212,7 +1212,7 @@ static bool construct(
 			BREAK_TO_DEBUGGER();
 			dm_error(
 				"DC: failed to create memory input!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 
 		pool->base.ipps[i] = dce110_ipp_create(ctx, i, &dce110_ipp_reg_offsets[i]);
@@ -1220,7 +1220,7 @@ static bool construct(
 			BREAK_TO_DEBUGGER();
 			dm_error(
 				"DC: failed to create input pixel processor!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 
 		pool->base.transforms[i] = dce110_transform_create(
@@ -1229,7 +1229,7 @@ static bool construct(
 			BREAK_TO_DEBUGGER();
 			dm_error(
 				"DC: failed to create transform!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 		pool->base.transforms[i]->funcs->transform_set_scaler_filter(
 				pool->base.transforms[i],
@@ -1240,7 +1240,7 @@ static bool construct(
 			BREAK_TO_DEBUGGER();
 			dm_error(
 				"DC: failed to create output pixel processor!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 	}
 
@@ -1260,7 +1260,7 @@ static bool construct(
 		if (pool->base.audios[i] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create audio!\n");
-			goto audio_create_fail;
+			goto res_create_fail;
 		}
 		pool->base.audio_count++;
 	}
@@ -1278,7 +1278,7 @@ static bool construct(
 			if (pool->base.stream_enc[i] == NULL) {
 				BREAK_TO_DEBUGGER();
 				dm_error("DC: failed to create stream_encoder!\n");
-				goto stream_enc_create_fail;
+				goto res_create_fail;
 			}
 		}
 	}
@@ -1292,7 +1292,7 @@ static bool construct(
 		if (pool->base.stream_enc[pool->base.stream_enc_count] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create stream_encoder!\n");
-			goto stream_enc_create_fail;
+			goto res_create_fail;
 		}
 		pool->base.stream_enc_count++;
 	}
@@ -1300,7 +1300,7 @@ static bool construct(
 
 	/* Create hardware sequencer */
 	if (!dce110_hw_sequencer_construct(dc))
-		goto stream_enc_create_fail;
+		goto res_create_fail;
 
 	bw_calcs_init(&dc->bw_dceip, &dc->bw_vbios, BW_CALCS_VERSION_CARRIZO);
 
@@ -1308,53 +1308,8 @@ static bool construct(
 
 	return true;
 
-stream_enc_create_fail:
-	for (i = 0; i < pool->base.stream_enc_count; i++) {
-		if (pool->base.stream_enc[i] != NULL)
-			dm_free(DCE110STRENC_FROM_STRENC(pool->base.stream_enc[i]));
-	}
-
-audio_create_fail:
-	for (i = 0; i < pool->base.pipe_count; i++) {
-		if (pool->base.audios[i] != NULL)
-			dce_aud_destroy(&pool->base.audios[i]);
-	}
-
-controller_create_fail:
-	for (i = 0; i < pool->base.pipe_count; i++) {
-		if (pool->base.opps[i] != NULL)
-			pool->base.opps[i]->funcs->opp_destroy(&pool->base.opps[i]);
-
-		if (pool->base.transforms[i] != NULL)
-			dce110_transform_destroy(&pool->base.transforms[i]);
-
-		if (pool->base.ipps[i] != NULL)
-			dce110_ipp_destroy(&pool->base.ipps[i]);
-
-		if (pool->base.mis[i] != NULL) {
-			dm_free(TO_DCE110_MEM_INPUT(pool->base.mis[i]));
-			pool->base.mis[i] = NULL;
-		}
-
-		if (pool->base.timing_generators[i] != NULL)	{
-			dm_free(DCE110TG_FROM_TG(pool->base.timing_generators[i]));
-			pool->base.timing_generators[i] = NULL;
-		}
-	}
-
-filter_create_fail:
-	dal_irq_service_destroy(&pool->base.irqs);
-
-irqs_create_fail:
-	dal_display_clock_destroy(&pool->base.display_clock);
-
-disp_clk_create_fail:
-clk_src_create_fail:
-	for (i = 0; i < pool->base.clk_src_count; i++) {
-		if (pool->base.clock_sources[i] != NULL)
-			dce110_clock_source_destroy(&pool->base.clock_sources[i]);
-	}
-
+res_create_fail:
+	destruct(pool);
 	return false;
 }
 
diff --git a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
index 64aeacf..f4ace37 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
@@ -1181,7 +1181,7 @@ static bool construct(
 		if (pool->base.clock_sources[i] == NULL) {
 			dm_error("DC: failed to create clock sources!\n");
 			BREAK_TO_DEBUGGER();
-			goto clk_src_create_fail;
+			goto res_create_fail;
 		}
 	}
 
@@ -1191,7 +1191,7 @@ static bool construct(
 	if (pool->base.display_clock == NULL) {
 		dm_error("DC: failed to create display clock!\n");
 		BREAK_TO_DEBUGGER();
-		goto disp_clk_create_fail;
+		goto res_create_fail;
 	}
 
 
@@ -1212,14 +1212,14 @@ static bool construct(
 		init_data.ctx = dc->ctx;
 		pool->base.irqs = dal_irq_service_dce110_create(&init_data);
 		if (!pool->base.irqs)
-			goto irqs_create_fail;
+			goto res_create_fail;
 	}
 
 	pool->base.scaler_filter = dal_scaler_filter_create(ctx);
 	if (pool->base.scaler_filter == NULL) {
 		BREAK_TO_DEBUGGER();
 		dm_error("DC: failed to create filter!\n");
-		goto filter_create_fail;
+		goto res_create_fail;
 	}
 
 	for (i = 0; i < pool->base.pipe_count; i++) {
@@ -1232,7 +1232,7 @@ static bool construct(
 		if (pool->base.timing_generators[i] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create tg!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 
 		pool->base.mis[i] = dce112_mem_input_create(
@@ -1244,7 +1244,7 @@ static bool construct(
 			BREAK_TO_DEBUGGER();
 			dm_error(
 				"DC: failed to create memory input!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 
 		pool->base.ipps[i] = dce112_ipp_create(
@@ -1255,7 +1255,7 @@ static bool construct(
 			BREAK_TO_DEBUGGER();
 			dm_error(
 				"DC:failed to create input pixel processor!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 
 		pool->base.transforms[i] = dce112_transform_create(
@@ -1266,7 +1266,7 @@ static bool construct(
 			BREAK_TO_DEBUGGER();
 			dm_error(
 				"DC: failed to create transform!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 		pool->base.transforms[i]->funcs->transform_set_scaler_filter(
 				pool->base.transforms[i],
@@ -1280,7 +1280,7 @@ static bool construct(
 			BREAK_TO_DEBUGGER();
 			dm_error(
 				"DC:failed to create output pixel processor!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 	}
 
@@ -1300,7 +1300,7 @@ static bool construct(
 		if (pool->base.audios[i] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create audio!\n");
-			goto audio_create_fail;
+			goto res_create_fail;
 		}
 		pool->base.audio_count++;
 	}
@@ -1316,7 +1316,7 @@ static bool construct(
 			if (pool->base.stream_enc[i] == NULL) {
 				BREAK_TO_DEBUGGER();
 				dm_error("DC: failed to create stream_encoder!\n");
-				goto stream_enc_create_fail;
+				goto res_create_fail;
 			}
 		}
 	}
@@ -1328,14 +1328,14 @@ static bool construct(
 		if (pool->base.stream_enc[pool->base.stream_enc_count] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create stream_encoder!\n");
-			goto stream_enc_create_fail;
+			goto res_create_fail;
 		}
 		pool->base.stream_enc_count++;
 	}
 
 	/* Create hardware sequencer */
 	if (!dce112_hw_sequencer_construct(dc))
-		goto stream_enc_create_fail;
+		goto res_create_fail;
 
 	bw_calcs_init(&dc->bw_dceip, &dc->bw_vbios, BW_CALCS_VERSION_BAFFIN);
 
@@ -1343,53 +1343,8 @@ static bool construct(
 
 	return true;
 
-stream_enc_create_fail:
-	for (i = 0; i < pool->base.stream_enc_count; i++) {
-		if (pool->base.stream_enc[i] != NULL)
-			dm_free(DCE110STRENC_FROM_STRENC(pool->base.stream_enc[i]));
-	}
-
-audio_create_fail:
-	for (i = 0; i < pool->base.pipe_count; i++) {
-		if (pool->base.audios[i] != NULL)
-			dce_aud_destroy(&pool->base.audios[i]);
-	}
-
-controller_create_fail:
-	for (i = 0; i < pool->base.pipe_count; i++) {
-		if (pool->base.opps[i] != NULL)
-			dce112_opp_destroy(&pool->base.opps[i]);
-
-		if (pool->base.transforms[i] != NULL)
-			dce112_transform_destroy(&pool->base.transforms[i]);
-
-		if (pool->base.ipps[i] != NULL)
-			dce112_ipp_destroy(&pool->base.ipps[i]);
-
-		if (pool->base.mis[i] != NULL) {
-			dm_free(TO_DCE110_MEM_INPUT(pool->base.mis[i]));
-			pool->base.mis[i] = NULL;
-		}
-
-		if (pool->base.timing_generators[i] != NULL) {
-			dm_free(DCE110TG_FROM_TG(pool->base.timing_generators[i]));
-			pool->base.timing_generators[i] = NULL;
-		}
-	}
-
-filter_create_fail:
-	dal_irq_service_destroy(&pool->base.irqs);
-
-irqs_create_fail:
-	dal_display_clock_destroy(&pool->base.display_clock);
-
-disp_clk_create_fail:
-clk_src_create_fail:
-	for (i = 0; i < pool->base.clk_src_count; i++) {
-		if (pool->base.clock_sources[i] != NULL)
-			dce112_clock_source_destroy(&pool->base.clock_sources[i]);
-	}
-
+res_create_fail:
+	destruct(pool);
 	return false;
 }
 
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
index ff0e68d..5cd6250 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
@@ -836,14 +836,14 @@ static bool construct(
 	if (pool->base.dp_clock_source == NULL) {
 		dm_error("DC: failed to create dp clock source!\n");
 		BREAK_TO_DEBUGGER();
-		goto clk_src_create_fail;
+		goto res_create_fail;
 	}
 
 	for (i = 0; i < pool->base.clk_src_count; i++) {
 		if (pool->base.clock_sources[i] == NULL) {
 			dm_error("DC: failed to create clock sources!\n");
 			BREAK_TO_DEBUGGER();
-			goto clk_src_create_fail;
+			goto res_create_fail;
 		}
 	}
 
@@ -851,7 +851,7 @@ static bool construct(
 	if (pool->base.display_clock == NULL) {
 		dm_error("DC: failed to create display clock!\n");
 		BREAK_TO_DEBUGGER();
-		goto disp_clk_create_fail;
+		goto res_create_fail;
 	}
 
 
@@ -869,14 +869,14 @@ static bool construct(
 		init_data.ctx = dc->ctx;
 		pool->base.irqs = dal_irq_service_dce80_create(&init_data);
 		if (!pool->base.irqs)
-			goto irqs_create_fail;
+			goto res_create_fail;
 	}
 
 	pool->base.scaler_filter = dal_scaler_filter_create(ctx);
 	if (pool->base.scaler_filter == NULL) {
 		BREAK_TO_DEBUGGER();
 		dm_error("DC: failed to create filter!\n");
-		goto filter_create_fail;
+		goto res_create_fail;
 	}
 
 	for (i = 0; i < pool->base.pipe_count; i++) {
@@ -885,7 +885,7 @@ static bool construct(
 		if (pool->base.timing_generators[i] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create tg!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 
 		pool->base.mis[i] = dce80_mem_input_create(ctx, as, i,
@@ -893,14 +893,14 @@ static bool construct(
 		if (pool->base.mis[i] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create memory input!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 
 		pool->base.ipps[i] = dce80_ipp_create(ctx, i, &ipp_reg_offsets[i]);
 		if (pool->base.ipps[i] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create input pixel processor!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 
 		pool->base.transforms[i] = dce80_transform_create(
@@ -908,7 +908,7 @@ static bool construct(
 		if (pool->base.transforms[i] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create transform!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 		pool->base.transforms[i]->funcs->transform_set_scaler_filter(
 				pool->base.transforms[i],
@@ -918,7 +918,7 @@ static bool construct(
 		if (pool->base.opps[i] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create output pixel processor!\n");
-			goto controller_create_fail;
+			goto res_create_fail;
 		}
 	}
 
@@ -938,7 +938,7 @@ static bool construct(
 		if (pool->base.audios[i] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create audio!\n");
-			goto audio_create_fail;
+			goto res_create_fail;
 		}
 		pool->base.audio_count++;
 	}
@@ -953,7 +953,7 @@ static bool construct(
 			if (pool->base.stream_enc[i] == NULL) {
 				BREAK_TO_DEBUGGER();
 				dm_error("DC: failed to create stream_encoder!\n");
-				goto stream_enc_create_fail;
+				goto res_create_fail;
 			}
 		}
 	}
@@ -965,63 +965,19 @@ static bool construct(
 		if (pool->base.stream_enc[pool->base.stream_enc_count] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create stream_encoder!\n");
-			goto stream_enc_create_fail;
+			goto res_create_fail;
 		}
 		pool->base.stream_enc_count++;
 	}
 
 	/* Create hardware sequencer */
 	if (!dce80_hw_sequencer_construct(dc))
-		goto stream_enc_create_fail;
+		goto res_create_fail;
 
 	return true;
 
-stream_enc_create_fail:
-	for (i = 0; i < pool->base.stream_enc_count; i++) {
-		if (pool->base.stream_enc[i] != NULL)
-			dm_free(DCE110STRENC_FROM_STRENC(pool->base.stream_enc[i]));
-	}
-
-audio_create_fail:
-	for (i = 0; i < pool->base.pipe_count; i++) {
-		if (pool->base.audios[i] != NULL)
-			dce_aud_destroy(&pool->base.audios[i]);
-	}
-
-controller_create_fail:
-	for (i = 0; i < pool->base.pipe_count; i++) {
-		if (pool->base.opps[i] != NULL)
-			dce80_opp_destroy(&pool->base.opps[i]);
-
-		if (pool->base.transforms[i] != NULL)
-			dce80_transform_destroy(&pool->base.transforms[i]);
-
-		if (pool->base.ipps[i] != NULL)
-			dce80_ipp_destroy(&pool->base.ipps[i]);
-
-		if (pool->base.mis[i] != NULL) {
-			dm_free(TO_DCE110_MEM_INPUT(pool->base.mis[i]));
-			pool->base.mis[i] = NULL;
-		}
-		if (pool->base.timing_generators[i] != NULL)	{
-			dm_free(DCE110TG_FROM_TG(pool->base.timing_generators[i]));
-			pool->base.timing_generators[i] = NULL;
-		}
-	}
-
-filter_create_fail:
-	dal_irq_service_destroy(&pool->base.irqs);
-
-irqs_create_fail:
-	dal_display_clock_destroy(&pool->base.display_clock);
-
-disp_clk_create_fail:
-clk_src_create_fail:
-	for (i = 0; i < pool->base.clk_src_count; i++) {
-		if (pool->base.clock_sources[i] != NULL)
-			dce80_clock_source_destroy(&pool->base.clock_sources[i]);
-	}
-
+res_create_fail:
+	destruct(pool);
 	return false;
 }
 
-- 
2.7.4

