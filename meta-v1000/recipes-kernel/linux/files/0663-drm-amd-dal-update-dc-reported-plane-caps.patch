From d3e2af33b037ade2073d95274ca7059f521d7e93 Mon Sep 17 00:00:00 2001
From: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Date: Mon, 25 Jul 2016 17:28:10 -0400
Subject: [PATCH 0663/1722] drm/amd/dal: update dc reported plane caps

Signed-off-by: Dmytro Laktyushkin <Dmytro.Laktyushkin@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/calcs/bandwidth_calcs.c | 24 +++++++++++-----------
 drivers/gpu/drm/amd/dal/dc/dc.h                    |  2 +-
 .../gpu/drm/amd/dal/dc/dce110/dce110_resource.c    |  5 +++--
 drivers/gpu/drm/amd/dal/include/scaler_types.h     |  3 ++-
 4 files changed, 18 insertions(+), 16 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/calcs/bandwidth_calcs.c b/drivers/gpu/drm/amd/dal/dc/calcs/bandwidth_calcs.c
index d826390..8768aa2 100644
--- a/drivers/gpu/drm/amd/dal/dc/calcs/bandwidth_calcs.c
+++ b/drivers/gpu/drm/amd/dal/dc/calcs/bandwidth_calcs.c
@@ -4177,7 +4177,7 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[6], bw_int_to_fixed(1000)));
 
-		if (ctx->dc->caps.max_underlays) {
+		if (ctx->dc->caps.max_slave_planes) {
 			calcs_output->nbp_state_change_wm_ns[3].a_mark =
 				bw_fixed_to_int(bw_mul(bw_results_internal->
 					nbp_state_change_watermark[0], bw_int_to_fixed(1000)));
@@ -4207,7 +4207,7 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->stutter_exit_wm_ns[2].a_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[6], bw_int_to_fixed(1000)));
-		if (ctx->dc->caps.max_underlays) {
+		if (ctx->dc->caps.max_slave_planes) {
 			calcs_output->stutter_exit_wm_ns[3].a_mark =
 				bw_fixed_to_int(bw_mul(bw_results_internal->
 					stutter_exit_watermark[0], bw_int_to_fixed(1000)));
@@ -4237,7 +4237,7 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->urgent_wm_ns[2].a_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[6], bw_int_to_fixed(1000)));
-		if (ctx->dc->caps.max_underlays) {
+		if (ctx->dc->caps.max_slave_planes) {
 			calcs_output->urgent_wm_ns[3].a_mark =
 				bw_fixed_to_int(bw_mul(bw_results_internal->
 					urgent_watermark[0], bw_int_to_fixed(1000)));
@@ -4273,7 +4273,7 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[6], bw_int_to_fixed(1000)));
 
-		if (ctx->dc->caps.max_underlays) {
+		if (ctx->dc->caps.max_slave_planes) {
 			calcs_output->nbp_state_change_wm_ns[3].b_mark =
 				bw_fixed_to_int(bw_mul(bw_results_internal->
 					nbp_state_change_watermark[0], bw_int_to_fixed(1000)));
@@ -4303,7 +4303,7 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->stutter_exit_wm_ns[2].b_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[6], bw_int_to_fixed(1000)));
-		if (ctx->dc->caps.max_underlays) {
+		if (ctx->dc->caps.max_slave_planes) {
 			calcs_output->stutter_exit_wm_ns[3].b_mark =
 				bw_fixed_to_int(bw_mul(bw_results_internal->
 					stutter_exit_watermark[0], bw_int_to_fixed(1000)));
@@ -4333,7 +4333,7 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->urgent_wm_ns[2].b_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[6], bw_int_to_fixed(1000)));
-		if (ctx->dc->caps.max_underlays) {
+		if (ctx->dc->caps.max_slave_planes) {
 			calcs_output->urgent_wm_ns[3].b_mark =
 				bw_fixed_to_int(bw_mul(bw_results_internal->
 					urgent_watermark[0], bw_int_to_fixed(1000)));
@@ -4369,7 +4369,7 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->nbp_state_change_wm_ns[2].c_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[6], bw_int_to_fixed(1000)));
-		if (ctx->dc->caps.max_underlays) {
+		if (ctx->dc->caps.max_slave_planes) {
 			calcs_output->nbp_state_change_wm_ns[3].c_mark =
 				bw_fixed_to_int(bw_mul(bw_results_internal->
 					nbp_state_change_watermark[0], bw_int_to_fixed(1000)));
@@ -4398,7 +4398,7 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->stutter_exit_wm_ns[2].c_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[6], bw_int_to_fixed(1000)));
-		if (ctx->dc->caps.max_underlays) {
+		if (ctx->dc->caps.max_slave_planes) {
 			calcs_output->stutter_exit_wm_ns[3].c_mark =
 				bw_fixed_to_int(bw_mul(bw_results_internal->
 					stutter_exit_watermark[0], bw_int_to_fixed(1000)));
@@ -4428,7 +4428,7 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->urgent_wm_ns[2].c_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[6], bw_int_to_fixed(1000)));
-		if (ctx->dc->caps.max_underlays) {
+		if (ctx->dc->caps.max_slave_planes) {
 			calcs_output->urgent_wm_ns[3].c_mark =
 				bw_fixed_to_int(bw_mul(bw_results_internal->
 					urgent_watermark[0], bw_int_to_fixed(1000)));
@@ -4464,7 +4464,7 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->nbp_state_change_wm_ns[2].d_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				nbp_state_change_watermark[6], bw_int_to_fixed(1000)));
-		if (ctx->dc->caps.max_underlays) {
+		if (ctx->dc->caps.max_slave_planes) {
 			calcs_output->nbp_state_change_wm_ns[3].d_mark =
 				bw_fixed_to_int(bw_mul(bw_results_internal->
 					nbp_state_change_watermark[0], bw_int_to_fixed(1000)));
@@ -4492,7 +4492,7 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->stutter_exit_wm_ns[2].d_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				stutter_exit_watermark[6], bw_int_to_fixed(1000)));
-		if (ctx->dc->caps.max_underlays) {
+		if (ctx->dc->caps.max_slave_planes) {
 			calcs_output->stutter_exit_wm_ns[3].d_mark =
 				bw_fixed_to_int(bw_mul(bw_results_internal->
 					stutter_exit_watermark[0], bw_int_to_fixed(1000)));
@@ -4521,7 +4521,7 @@ bool bw_calcs(struct dc_context *ctx, const struct bw_calcs_dceip *dceip,
 		calcs_output->urgent_wm_ns[2].d_mark =
 			bw_fixed_to_int(bw_mul(bw_results_internal->
 				urgent_watermark[6], bw_int_to_fixed(1000)));
-		if (ctx->dc->caps.max_underlays) {
+		if (ctx->dc->caps.max_slave_planes) {
 			calcs_output->urgent_wm_ns[3].d_mark =
 				bw_fixed_to_int(bw_mul(bw_results_internal->
 					urgent_watermark[0], bw_int_to_fixed(1000)));
diff --git a/drivers/gpu/drm/amd/dal/dc/dc.h b/drivers/gpu/drm/amd/dal/dc/dc.h
index a1a82eb..5636059 100644
--- a/drivers/gpu/drm/amd/dal/dc/dc.h
+++ b/drivers/gpu/drm/amd/dal/dc/dc.h
@@ -44,7 +44,7 @@ struct dc_caps {
 	uint32_t max_targets;
 	uint32_t max_links;
 	uint32_t max_audios;
-	uint32_t max_underlays;
+	uint32_t max_slave_planes;
 	uint32_t max_downscale_ratio;
 	uint32_t i2c_speed_in_khz;
 };
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
index 8aa529b..b9b4761 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
@@ -1018,8 +1018,9 @@ static void underlay_create(struct dc_context *ctx, struct resource_pool *pool)
 			pool->scaler_filter);
 	pool->pipe_count++;
 
-	// update the public caps to indicate an underlay is available
-	ctx->dc->caps.max_underlays = 1;
+	/* update the public caps to indicate an underlay is available */
+	ctx->dc->caps.max_slave_planes = 1;
+	ctx->dc->caps.max_slave_planes = 1;
 }
 
 static void bw_calcs_data_update_from_pplib(struct core_dc *dc)
diff --git a/drivers/gpu/drm/amd/dal/include/scaler_types.h b/drivers/gpu/drm/amd/dal/include/scaler_types.h
index 0a31277..3ff2b7b 100644
--- a/drivers/gpu/drm/amd/dal/include/scaler_types.h
+++ b/drivers/gpu/drm/amd/dal/include/scaler_types.h
@@ -49,7 +49,8 @@ enum filter_type {
 };
 
 enum ram_filter_type {
-	FILTER_TYPE_RGB_Y_VERTICAL	= 0, /* 0 - RGB/Y Vertical filter */
+	FILTER_TYPE_RGB_Y_VERTICAL	= 0, /* 0 - RGB/Y
+	 Vertical filter */
 	FILTER_TYPE_CBCR_VERTICAL	= 1, /* 1 - CbCr  Vertical filter */
 	FILTER_TYPE_RGB_Y_HORIZONTAL	= 2, /* 1 - RGB/Y Horizontal filter */
 	FILTER_TYPE_CBCR_HORIZONTAL	= 3, /* 3 - CbCr  Horizontal filter */
-- 
2.7.4

