From e2adf42c6093b270ea2ec607ae73f1b94bbc7e7f Mon Sep 17 00:00:00 2001
From: Harry Wentland <harry.wentland@amd.com>
Date: Tue, 26 Apr 2016 16:24:29 -0400
Subject: [PATCH 0456/1722] drm/amd/dal: Pass output size params into scaler

Signed-off-by: Harry Wentland <harry.wentland@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
Signed-off-by: Kalyan Alle <kalyan.alle@amd.com>
---
 .../gpu/drm/amd/dal/dc/dce110/dce110_transform.h   |   2 +-
 .../drm/amd/dal/dc/dce110/dce110_transform_scl.c   |   4 +-
 .../gpu/drm/amd/dal/dc/dce110/dce110_transform_v.c |   2 +-
 drivers/gpu/drm/amd/dal/dc/dce80/dce80_transform.h |   2 +-
 .../gpu/drm/amd/dal/dc/dce80/dce80_transform_scl.c |   4 +-
 drivers/gpu/drm/amd/dal/dc/inc/hw/transform.h      | 113 ++++++++++++++++++++-
 6 files changed, 119 insertions(+), 8 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform.h b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform.h
index 6fa273c8..a5b3f8f 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform.h
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform.h
@@ -58,7 +58,7 @@ bool dce110_transform_set_scaler(
 
 void dce110_transform_set_scaler_bypass(
 		struct transform *xfm,
-		const struct rect *size);
+		const struct output_size_params *output_size);
 
 void dce110_transform_set_scaler_filter(
 	struct transform *xfm,
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_scl.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_scl.c
index 3bc450c..3353e91 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_scl.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_scl.c
@@ -90,7 +90,7 @@ static bool setup_scaling_configuration(
 	dm_write_reg(ctx, addr, value);
 
 	if (data->taps.h_taps + data->taps.v_taps <= 2) {
-		dce110_transform_set_scaler_bypass(&xfm110->base, &data->viewport);
+		dce110_transform_set_scaler_bypass(&xfm110->base, NULL);
 		return false;
 	}
 
@@ -686,7 +686,7 @@ bool dce110_transform_set_scaler(
 
 void dce110_transform_set_scaler_bypass(
 		struct transform *xfm,
-		const struct rect *size)
+		const struct output_size_params *output_size)
 {
 	struct dce110_transform *xfm110 = TO_DCE110_TRANSFORM(xfm);
 	uint32_t sclv_mode;
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_v.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_v.c
index 5312037..1ec5a01 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_v.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_transform_v.c
@@ -455,7 +455,7 @@ static void program_scl_ratios_inits(
 
 static void dce110_transform_v_set_scalerv_bypass(
 		struct transform *xfm,
-		const struct rect *size)
+		const struct output_size_params *output_size)
 {
 	uint32_t addr = mmSCLV_MODE;
 	uint32_t value = dm_read_reg(xfm->ctx, addr);
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_transform.h b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_transform.h
index fc6eb4b..45e64e6 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_transform.h
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_transform.h
@@ -58,7 +58,7 @@ bool dce80_transform_set_scaler(
 
 void dce80_transform_set_scaler_bypass(
 		struct transform *xfm,
-		const struct rect *size);
+		const struct output_size_params *output_size);
 
 void dce80_transform_set_scaler_filter(
 	struct transform *xfm,
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_transform_scl.c b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_transform_scl.c
index 3134446..a0b8e9d 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_transform_scl.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_transform_scl.c
@@ -83,7 +83,7 @@ static bool setup_scaling_configuration(
 	uint32_t value;
 
 	if (data->taps.h_taps + data->taps.v_taps <= 2) {
-		dce80_transform_set_scaler_bypass(&xfm80->base, &data->viewport);
+		dce80_transform_set_scaler_bypass(&xfm80->base, NULL);
 		return false;
 	}
 
@@ -687,7 +687,7 @@ bool dce80_transform_set_scaler(
 
 void dce80_transform_set_scaler_bypass(
 		struct transform *xfm,
-		const struct rect *size)
+		const struct output_size_params *output_size)
 {
 	struct dce80_transform *xfm80 = TO_DCE80_TRANSFORM(xfm);
 	uint32_t sclv_mode;
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/hw/transform.h b/drivers/gpu/drm/amd/dal/dc/inc/hw/transform.h
index 57e54f9..2f33fb4 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/hw/transform.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/hw/transform.h
@@ -144,6 +144,117 @@ struct scaler_data {
 	enum pixel_format format;
 };
 
+
+// Enums
+// TODO: Recommend these enums to be added to .h file
+enum dscl_coef_filter_type_sel {
+	SCL_COEF_LUMA_VERT_FILTER,      // Luma (G/Y) Vertical filter
+	SCL_COEF_LUMA_HORZ_FILTER,      // Luma (G/Y) Horizontal filter
+	SCL_COEF_CHROMA_VERT_FILTER,    // Chroma (CbCr/RB) Vertical filter
+	SCL_COEF_CHROMA_HORZ_FILTER,    // Chroma (CbCr/RB) Horizontal filter
+	SCL_COEF_ALPHA_VERT_FILTER,     // Alpha Vertical filter
+	SCL_COEF_ALPHA_HORZ_FILTER      // Alpha Horizontal filter
+};
+
+enum scaling_mode_sel {
+	SCALING_AUTO_444,
+	SCALING_MANUAL_444,
+	SCALING_MANUAL_420,
+	SCALING_OFF_MANUAL_REPLICATION,             // Only 4:4:4
+	SCALING_OFF_AUTO_CENTER_NO_REPLICATION,     // Only 4:4:4
+	SCALING_OFF_AUTO_CENTER_AUTO_REPLICATION    // Only 4:4:4
+};
+
+enum color_space_sel {
+	COLOR_SPACE_RGB, COLOR_SPACE_YCBCR
+};
+
+enum dscl_mode_sel {
+	DSCL_MODE_SCALING_444_BYPASS, // Scaling bypass for both luma and chroma path in 4:4:4
+	DSCL_MODE_SCALING_444_RGB_ENABLE, // Scaling enable for both luma and chroma path in 4:4:4 RGB
+	DSCL_MODE_SCALING_444_YCBCR_ENABLE, // Scaling enable for both luma and chroma path in 4:4:4 YCbCr
+	DSCL_MODE_SCALING_420_YCBCR_ENABLE, // Scaling enable for both luma and chroma path in 4:2:0 YCbCr
+	DSCL_MODE_SCALING_420_LUMA_BYPASS, // Scaling bypass for the luma path but scaling enable for the chroma path in 4:2:0 YCbCr
+	DSCL_MODE_SCALING_420_CHROMA_BYPASS, // Scaling bypass for the chroma path but scaling enable for the luma path in 4:2:0
+	DSCL_MODE_DSCL_BYPASS,   // DSCL bypass without going through Line Buffer
+	DSCL_MODE_UNSUPPORTED
+};
+
+enum dscl_autocal_mode {
+	AUTOCAL_MODE_OFF,           // AutoCal off
+	AUTOCAL_MODE_AUTOSCALE, // Autocal calculate the scaling ratio and initial phase and the DSCL_MODE_SEL must be set to 1
+	AUTOCAL_MODE_AUTOCENTER, // Autocal perform auto centering without replication and the DSCL_MODE_SEL must be set to 0
+	AUTOCAL_MODE_AUTOREPLICATE, // Autocal perform auto centering and auto replication and the DSCL_MODE_SEL must be set to 0
+	AUTOCAL_MODE_UNSUPPORTED
+};
+
+enum lb_memory_config {
+	LB_MEMORY_CONFIG_0, // Enable all 3 pieces of memory
+	LB_MEMORY_CONFIG_1, // Enable only the first piece of memory
+	LB_MEMORY_CONFIG_2, // Enable only the second piece of memory
+	LB_MEMORY_CONFIG_3 // Only applicable in 4:2:0 mode, enable all 3 pieces of memory and the last piece of chroma memory used for the luma storage
+};
+
+// Structs
+// TODO: Recommend these structs to be added to .h file
+struct otg_blanking {
+	uint32_t h_blank_start;
+	uint32_t h_blank_end;
+	uint32_t v_blank_start;
+	uint32_t v_blank_end;
+};
+
+struct scaler_2tap_mode {
+	bool h_2tap_hardcode_coef_en;
+	bool v_2tap_hardcode_coef_en;
+	bool h_2tap_sharp_en;
+	bool v_2tap_sharp_en;
+	uint32_t h_2tap_sharp_factor;
+	uint32_t v_2tap_sharp_factor;
+};
+
+struct input_size_params {
+	uint32_t recin_width;
+	uint32_t recin_height;
+	uint32_t recin_width_c;
+	uint32_t recin_height_c;
+};
+
+struct output_size_params {
+	uint32_t recout_width;
+	uint32_t recout_height;
+	uint32_t recout_start_x;
+	uint32_t recout_start_y;
+	uint32_t otg_active_width; // MPC width:  OTG non-blank, includes overscan
+	uint32_t otg_active_height; // MPC height: OTG non-blank, includes overscan
+};
+
+struct line_buffer_params {
+	bool alpha_en;
+	bool pixel_expan_mode;
+	bool interleave_en;
+	uint32_t dynamic_pixel_depth;
+	enum lb_pixel_depth depth;
+	enum lb_memory_config memory_config;
+};
+
+struct replication_factors {
+	uint32_t h_manual_rep_factor;
+	uint32_t v_manual_rep_factor;
+};
+
+struct scaler_boundary_mode {
+	bool boundary_mode; // Default to repeat edge pixel
+	uint32_t black_offset_rgb_y;
+	uint32_t black_offset_cbcr;
+};
+
+struct autoscale_params {
+	uint32_t autocal_num_pipe;
+	uint32_t autocal_pipe_id;
+};
+
+
 struct transform_funcs {
 	bool (*transform_power_up)(
 		struct transform *xfm);
@@ -154,7 +265,7 @@ struct transform_funcs {
 
 	void (*transform_set_scaler_bypass)(
 		struct transform *xfm,
-		const struct rect *size);
+		const struct output_size_params *output_size);
 
 	void (*transform_set_scaler_filter)(
 		struct transform *xfm,
-- 
2.7.4

