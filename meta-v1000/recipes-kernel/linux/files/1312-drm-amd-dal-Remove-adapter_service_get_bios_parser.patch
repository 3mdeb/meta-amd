From 1fbde164f29a062fecce3546ab436c1e8f8c5008 Mon Sep 17 00:00:00 2001
From: Harry Wentland <harry.wentland@amd.com>
Date: Wed, 12 Oct 2016 15:10:57 -0400
Subject: [PATCH 1312/1722] drm/amd/dal: Remove adapter_service_get_bios_parser

Silly pointless redirection.

Change-Id: Iadb3f5ac9cbb8dd67d860cad20012377b9d38de3
Signed-off-by: Harry Wentland <harry.wentland@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
---
 .../gpu/drm/amd/dal/dc/adapter/adapter_service.c   | 49 +++++++---------------
 .../gpu/drm/amd/dal/dc/dce100/dce100_resource.c    | 10 ++---
 .../drm/amd/dal/dc/dce110/dce110_hw_sequencer.c    | 36 ++++------------
 .../drm/amd/dal/dc/dce110/dce110_link_encoder.c    |  3 +-
 .../gpu/drm/amd/dal/dc/dce110/dce110_resource.c    | 10 ++---
 .../amd/dal/dc/dce110/dce110_timing_generator.c    |  2 +-
 .../amd/dal/dc/dce110/dce110_timing_generator_v.c  |  2 +-
 .../gpu/drm/amd/dal/dc/dce112/dce112_resource.c    | 47 ++++++++++-----------
 .../gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c  |  3 +-
 drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c  | 10 ++---
 .../drm/amd/dal/dc/dce80/dce80_timing_generator.c  |  2 +-
 .../amd/dal/dc/gpu/dce110/display_clock_dce110.c   |  2 +-
 .../amd/dal/dc/gpu/dce112/display_clock_dce112.c   |  2 +-
 .../drm/amd/dal/dc/gpu/dce80/display_clock_dce80.c |  2 +-
 14 files changed, 67 insertions(+), 113 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.c b/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.c
index 7cce615..cc09643 100644
--- a/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.c
+++ b/drivers/gpu/drm/amd/dal/dc/adapter/adapter_service.c
@@ -227,7 +227,7 @@ static void initialize_backlight_caps(
 	struct platform_info_params params;
 	bool custom_curve_present = false;
 	bool custom_min_max_present = false;
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
+	struct dc_bios *dcb = as->ctx->dc_bios;
 
 	if (!(PM_GET_EXTENDED_BRIGHNESS_CAPS & as->platform_methods_mask)) {
 			dal_logger_write(as->ctx->logger,
@@ -541,7 +541,7 @@ static bool get_hpd_info(struct adapter_service *as,
 	struct graphics_object_id id,
 	struct graphics_object_hpd_info *info)
 {
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
+	struct dc_bios *dcb = as->ctx->dc_bios;
 
 	return BP_RESULT_OK == dcb->funcs->get_hpd_info(dcb, id, info);
 }
@@ -681,7 +681,7 @@ static struct hw_ctx_adapter_service *create_hw_ctx(
 static void adapter_service_destruct(
 	struct adapter_service *as)
 {
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
+	struct dc_bios *dcb = as->ctx->dc_bios;
 
 	dal_adapter_service_destroy_hw_ctx(&as->hw_ctx);
 	dal_i2caux_destroy(&as->i2caux);
@@ -928,7 +928,7 @@ struct graphics_object_id dal_adapter_service_get_src_obj(
 	uint32_t index)
 {
 	struct graphics_object_id src_object_id;
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
+	struct dc_bios *dcb = as->ctx->dc_bios;
 
 	if (is_wireless_object(id))
 		src_object_id = wireless_get_src_obj_id(as, id, index);
@@ -952,7 +952,7 @@ bool dal_adapter_service_get_device_tag(
 		uint32_t device_tag_index,
 		struct connector_device_tag_info *info)
 {
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
+	struct dc_bios *dcb = as->ctx->dc_bios;
 
 	if (BP_RESULT_OK == dcb->funcs->get_device_tag(dcb,
 			connector_object_id, device_tag_index, info))
@@ -965,7 +965,7 @@ bool dal_adapter_service_get_device_tag(
 bool dal_adapter_service_is_device_id_supported(struct adapter_service *as,
 		struct device_id id)
 {
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
+	struct dc_bios *dcb = as->ctx->dc_bios;
 
 	return dcb->funcs->is_device_id_supported(dcb, id);
 }
@@ -981,7 +981,7 @@ uint8_t dal_adapter_service_get_clock_sources_num(
 	struct firmware_info fw_info;
 	uint32_t max_clk_src = 0;
 	uint32_t num = as->asic_cap->data[ASIC_DATA_CLOCKSOURCES_NUM];
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
+	struct dc_bios *dcb = as->ctx->dc_bios;
 
 	/*
 	 * Check is system supports the use of the External clock source
@@ -1053,26 +1053,6 @@ bool dal_adapter_service_is_feature_supported(struct adapter_service *as,
 }
 
 /*
- * dal_adapter_service_get_i2c_info
- *
- * Get I2C information from BIOS
- */
-bool dal_adapter_service_get_i2c_info(
-	struct adapter_service *as,
-	struct graphics_object_id id,
-	struct graphics_object_i2c_info *i2c_info)
-{
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
-
-	if (!i2c_info) {
-		ASSERT_CRITICAL(false);
-		return false;
-	}
-
-	return BP_RESULT_OK == dcb->funcs->get_i2c_info(dcb, id, i2c_info);
-}
-
-/*
  * dal_adapter_service_obtain_ddc
  *
  * Obtain DDC
@@ -1083,8 +1063,9 @@ struct ddc *dal_adapter_service_obtain_ddc(
 {
 	struct graphics_object_i2c_info i2c_info;
 	struct gpio_ddc_hw_info hw_info;
+	struct dc_bios *dcb = as->ctx->dc_bios;
 
-	if (!dal_adapter_service_get_i2c_info(as, id, &i2c_info))
+	if (BP_RESULT_OK != dcb->funcs->get_i2c_info(dcb, id, &i2c_info))
 		return NULL;
 
 	hw_info.ddc_channel = i2c_info.i2c_line;
@@ -1119,7 +1100,7 @@ struct irq *dal_adapter_service_obtain_hpd_irq(
 	struct graphics_object_id id)
 {
 	enum bp_result bp_result;
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
+	struct dc_bios *dcb = as->ctx->dc_bios;
 	struct graphics_object_hpd_info hpd_info;
 	struct gpio_pin_info pin_info;
 
@@ -1161,7 +1142,7 @@ uint32_t dal_adapter_service_get_ss_info_num(
 	struct adapter_service *as,
 	enum as_signal_type signal)
 {
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
+	struct dc_bios *dcb = as->ctx->dc_bios;
 
 	return dcb->funcs->get_ss_entry_number(dcb, signal);
 }
@@ -1177,7 +1158,7 @@ bool dal_adapter_service_get_ss_info(
 	uint32_t idx,
 	struct spread_spectrum_info *info)
 {
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
+	struct dc_bios *dcb = as->ctx->dc_bios;
 
 	enum bp_result bp_result = dcb->funcs->get_spread_spectrum_info(dcb,
 			signal, idx, info);
@@ -1270,7 +1251,7 @@ bool dal_adapter_service_get_firmware_info(
 	struct adapter_service *as,
 	struct firmware_info *info)
 {
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
+	struct dc_bios *dcb = as->ctx->dc_bios;
 
 	return dcb->funcs->get_firmware_info(dcb, info) == BP_RESULT_OK;
 }
@@ -1392,7 +1373,7 @@ bool dal_adapter_service_get_embedded_panel_info(
 	struct embedded_panel_info *info)
 {
 	enum bp_result result;
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
+	struct dc_bios *dcb = as->ctx->dc_bios;
 
 	if (info == NULL)
 		/*TODO: add DALASSERT_MSG here*/
@@ -1487,7 +1468,7 @@ bool dal_adapter_service_get_encoder_cap_info(
 {
 	struct bp_encoder_cap_info bp_cap_info = {0};
 	enum bp_result result;
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
+	struct dc_bios *dcb = as->ctx->dc_bios;
 
 	if (NULL == info) {
 		ASSERT_CRITICAL(false);
diff --git a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
index 2cf3be4..03ff18e 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce100/dce100_resource.c
@@ -806,7 +806,7 @@ static bool construct(
 	pool->base.stream_engines.engine.ENGINE_ID_DIGE = 1;
 	pool->base.stream_engines.engine.ENGINE_ID_DIGF = 1;
 
-	bp = dal_adapter_service_get_bios_parser(as);
+	bp = ctx->dc_bios;
 
 	if (dal_adapter_service_get_firmware_info(as, &info) &&
 		info.external_clock_source_frequency_for_dp != 0) {
@@ -970,8 +970,8 @@ static bool construct(
 		/* TODO: rework fragile code*/
 		if (pool->base.stream_engines.u_all & 1 << i) {
 			pool->base.stream_enc[i] = dce100_stream_encoder_create(
-				i, dc->ctx,
-				dal_adapter_service_get_bios_parser(as),
+				i, ctx,
+				ctx->dc_bios,
 				&stream_enc_regs[i]);
 			if (pool->base.stream_enc[i] == NULL) {
 				BREAK_TO_DEBUGGER();
@@ -984,8 +984,8 @@ static bool construct(
 	for (i = 0; i < num_virtual_links; i++) {
 		pool->base.stream_enc[pool->base.stream_enc_count] =
 			virtual_stream_encoder_create(
-				dc->ctx,
-				dal_adapter_service_get_bios_parser(as));
+				ctx,
+				ctx->dc_bios);
 		if (pool->base.stream_enc[pool->base.stream_enc_count] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create stream_encoder!\n");
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
index 636f9fc..848e7b2 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_hw_sequencer.c
@@ -491,7 +491,7 @@ static enum dc_status bios_parser_crtc_source_select(
 	crtc_source_select.sink_signal = pipe_ctx->stream->signal;
 	crtc_source_select.display_output_bit_depth = PANEL_8BIT_COLOR;
 
-	dcb = dal_adapter_service_get_bios_parser(sink->link->adapter_srv);
+	dcb = sink->ctx->dc_bios;
 
 	if (BP_RESULT_OK != dcb->funcs->crtc_source_select(
 		dcb,
@@ -502,15 +502,6 @@ static enum dc_status bios_parser_crtc_source_select(
 	return DC_OK;
 }
 
-
-static void update_bios_scratch_critical_state(struct adapter_service *as,
-		bool state)
-{
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(as);
-
-	dcb->funcs->set_scratch_critical_state(dcb, state);
-}
-
 static void update_info_frame(struct pipe_ctx *pipe_ctx)
 {
 	if (dc_is_hdmi_signal(pipe_ctx->stream->signal))
@@ -934,15 +925,10 @@ static void disable_vga_and_power_gate_all_controllers(
 {
 	int i;
 	struct timing_generator *tg;
-	struct dc_bios *dcb;
-	struct dc_context *ctx;
-
-	dcb = dal_adapter_service_get_bios_parser(
-			dc->res_pool->adapter_srv);
+	struct dc_context *ctx = dc->ctx;
 
 	for (i = 0; i < dc->res_pool->pipe_count; i++) {
 		tg = dc->res_pool->timing_generators[i];
-		ctx = dc->ctx;
 
 		tg->funcs->disable_vga(tg);
 
@@ -965,10 +951,6 @@ static void disable_vga_and_power_gate_all_controllers(
  */
 static void enable_accelerated_mode(struct core_dc *dc)
 {
-	struct dc_bios *dcb;
-
-	dcb = dal_adapter_service_get_bios_parser(dc->res_pool->adapter_srv);
-
 	power_down_all_hw_blocks(dc);
 
 	disable_vga_and_power_gate_all_controllers(dc);
@@ -1345,6 +1327,7 @@ static enum dc_status apply_ctx_to_hw(
 		struct core_dc *dc,
 		struct validate_context *context)
 {
+	struct dc_bios *dcb = dc->ctx->dc_bios;
 	enum dc_status status;
 	int i;
 	bool programmed_audio_dto = false;
@@ -1377,13 +1360,12 @@ static enum dc_status apply_ctx_to_hw(
 		return DC_OK;
 
 	/* Apply new context */
-	update_bios_scratch_critical_state(context->res_ctx.pool->adapter_srv, true);
+	dcb->funcs->set_scratch_critical_state(dcb, true);
 
 	for (i = 0; i < MAX_PIPES; i++) {
 		struct pipe_ctx *pipe_ctx_old =
 					&dc->current_context->res_ctx.pipe_ctx[i];
 		struct pipe_ctx *pipe_ctx = &context->res_ctx.pipe_ctx[i];
-		struct dc_bios *dcb;
 
 		if (pipe_ctx->stream == NULL || pipe_ctx->top_pipe)
 			continue;
@@ -1395,11 +1377,8 @@ static enum dc_status apply_ctx_to_hw(
 			continue;
 		}
 
-		dcb = dal_adapter_service_get_bios_parser(
-				context->res_ctx.pool->adapter_srv);
-
 		dc->hwss.enable_display_power_gating(
-				dc, i, dcb,
+				dc, i, dc->ctx->dc_bios,
 				PIPE_GATING_CONTROL_DISABLE);
 	}
 
@@ -1491,7 +1470,7 @@ static enum dc_status apply_ctx_to_hw(
 	/* TODO dc_set_clocks_and_clock_state(context); to save power */
 	set_clock_state(dc, context, &clocks_state, true);
 
-	update_bios_scratch_critical_state(context->res_ctx.pool->adapter_srv, false);
+	dcb->funcs->set_scratch_critical_state(dcb, false);
 
 	switch_dp_clock_sources(dc, &context->res_ctx);
 
@@ -1832,8 +1811,7 @@ static void dce110_power_on_pipe_if_needed(
 		struct validate_context *context)
 {
 	struct pipe_ctx *old_pipe_ctx = &dc->current_context->res_ctx.pipe_ctx[pipe_ctx->pipe_idx];
-	struct dc_bios *dcb = dal_adapter_service_get_bios_parser(
-					context->res_ctx.pool->adapter_srv);
+	struct dc_bios *dcb = dc->ctx->dc_bios;
 	struct tg_color black_color = {0};
 
 	if (!old_pipe_ctx->stream && pipe_ctx->stream) {
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
index 6e3429b..b1f519f 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_link_encoder.c
@@ -150,8 +150,7 @@ static enum bp_result link_transmitter_control(
 	struct bp_transmitter_control *cntl)
 {
 	enum bp_result result;
-	struct dc_bios *bp = dal_adapter_service_get_bios_parser(
-					enc110->base.adapter_service);
+	struct dc_bios *bp = enc110->base.ctx->dc_bios;
 
 	result = bp->funcs->transmitter_control(bp, cntl);
 
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
index c4c9cb86..220073b 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
@@ -1131,7 +1131,7 @@ static bool construct(
 	pool->base.stream_engines.engine.ENGINE_ID_DIGE = 1;
 	pool->base.stream_engines.engine.ENGINE_ID_DIGF = 1;
 
-	bp = dal_adapter_service_get_bios_parser(as);
+	bp = ctx->dc_bios;
 
 	if (dal_adapter_service_get_firmware_info(as, &info) &&
 		info.external_clock_source_frequency_for_dp != 0) {
@@ -1275,8 +1275,8 @@ static bool construct(
 		/* TODO: rework fragile code*/
 		if (pool->base.stream_engines.u_all & 1 << i) {
 			pool->base.stream_enc[i] = dce110_stream_encoder_create(
-				i, dc->ctx,
-				dal_adapter_service_get_bios_parser(as),
+				i, ctx,
+				ctx->dc_bios,
 				&stream_enc_regs[i]);
 			if (pool->base.stream_enc[i] == NULL) {
 				BREAK_TO_DEBUGGER();
@@ -1289,8 +1289,8 @@ static bool construct(
 	for (i = 0; i < num_virtual_links; i++) {
 		pool->base.stream_enc[pool->base.stream_enc_count] =
 			virtual_stream_encoder_create(
-				dc->ctx,
-				dal_adapter_service_get_bios_parser(as));
+				ctx,
+				ctx->dc_bios);
 
 		if (pool->base.stream_enc[pool->base.stream_enc_count] == NULL) {
 			BREAK_TO_DEBUGGER();
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator.c
index 16ec6d9..d29e9ec 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator.c
@@ -1603,7 +1603,7 @@ bool dce110_timing_generator_construct(
 	tg110->base.funcs = &dce110_tg_funcs;
 
 	tg110->base.ctx = ctx;
-	tg110->base.bp = dal_adapter_service_get_bios_parser(as);
+	tg110->base.bp = ctx->dc_bios;
 
 	tg110->max_h_total = CRTC_H_TOTAL__CRTC_H_TOTAL_MASK + 1;
 	tg110->max_v_total = CRTC_V_TOTAL__CRTC_V_TOTAL_MASK + 1;
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator_v.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator_v.c
index b2661a0..55a1186 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator_v.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_timing_generator_v.c
@@ -733,7 +733,7 @@ bool dce110_timing_generator_v_construct(
 	tg110->base.funcs = &dce110_tg_v_funcs;
 
 	tg110->base.ctx = ctx;
-	tg110->base.bp = dal_adapter_service_get_bios_parser(as);
+	tg110->base.bp = ctx->dc_bios;
 
 	tg110->max_h_total = CRTC_H_TOTAL__CRTC_H_TOTAL_MASK + 1;
 	tg110->max_v_total = CRTC_V_TOTAL__CRTC_V_TOTAL_MASK + 1;
diff --git a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
index d506622..f4f1468 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
@@ -1096,40 +1096,41 @@ static bool construct(
 
 	pool->base.clock_sources[DCE112_CLK_SRC_PLL0] =
 			dce112_clock_source_create(
-		ctx, dal_adapter_service_get_bios_parser(adapter_serv),
-		CLOCK_SOURCE_COMBO_PHY_PLL0,
-		&dce112_clk_src_reg_offsets[0], false);
+				ctx, ctx->dc_bios,
+				CLOCK_SOURCE_COMBO_PHY_PLL0,
+				&dce112_clk_src_reg_offsets[0], false);
 	pool->base.clock_sources[DCE112_CLK_SRC_PLL1] =
 			dce112_clock_source_create(
-		ctx, dal_adapter_service_get_bios_parser(adapter_serv),
-		CLOCK_SOURCE_COMBO_PHY_PLL1,
-		&dce112_clk_src_reg_offsets[1], false);
+				ctx, ctx->dc_bios,
+				CLOCK_SOURCE_COMBO_PHY_PLL1,
+				&dce112_clk_src_reg_offsets[1], false);
 	pool->base.clock_sources[DCE112_CLK_SRC_PLL2] =
 			dce112_clock_source_create(
-		ctx, dal_adapter_service_get_bios_parser(adapter_serv),
-		CLOCK_SOURCE_COMBO_PHY_PLL2,
-		&dce112_clk_src_reg_offsets[2], false);
+				ctx, ctx->dc_bios,
+				CLOCK_SOURCE_COMBO_PHY_PLL2,
+				&dce112_clk_src_reg_offsets[2], false);
 	pool->base.clock_sources[DCE112_CLK_SRC_PLL3] =
 			dce112_clock_source_create(
-		ctx, dal_adapter_service_get_bios_parser(adapter_serv),
-		CLOCK_SOURCE_COMBO_PHY_PLL3,
-		&dce112_clk_src_reg_offsets[3], false);
+				ctx, ctx->dc_bios,
+				CLOCK_SOURCE_COMBO_PHY_PLL3,
+				&dce112_clk_src_reg_offsets[3], false);
 	pool->base.clock_sources[DCE112_CLK_SRC_PLL4] =
 			dce112_clock_source_create(
-		ctx, dal_adapter_service_get_bios_parser(adapter_serv),
-		CLOCK_SOURCE_COMBO_PHY_PLL4,
-		&dce112_clk_src_reg_offsets[4], false);
+				ctx, ctx->dc_bios,
+				CLOCK_SOURCE_COMBO_PHY_PLL4,
+				&dce112_clk_src_reg_offsets[4], false);
 	pool->base.clock_sources[DCE112_CLK_SRC_PLL5] =
 			dce112_clock_source_create(
-		ctx, dal_adapter_service_get_bios_parser(adapter_serv),
-		CLOCK_SOURCE_COMBO_PHY_PLL5,
-		&dce112_clk_src_reg_offsets[5], false);
+				ctx, ctx->dc_bios,
+				CLOCK_SOURCE_COMBO_PHY_PLL5,
+				&dce112_clk_src_reg_offsets[5], false);
 	pool->base.clk_src_count = DCE112_CLK_SRC_TOTAL;
 
 	pool->base.dp_clock_source =  dce112_clock_source_create(
-		ctx, dal_adapter_service_get_bios_parser(adapter_serv),
+		ctx, ctx->dc_bios,
 		CLOCK_SOURCE_ID_DP_DTO, &dce112_clk_src_reg_offsets[0], true);
 
+
 	for (i = 0; i < pool->base.clk_src_count; i++) {
 		if (pool->base.clock_sources[i] == NULL) {
 			dm_error("DC: failed to create clock sources!\n");
@@ -1266,9 +1267,8 @@ static bool construct(
 		if (pool->base.stream_engines.u_all & 1 << i) {
 			pool->base.stream_enc[i] =
 				dce112_stream_encoder_create(
-					i, dc->ctx,
-					dal_adapter_service_get_bios_parser(
-						adapter_serv),
+					i, ctx,
+					ctx->dc_bios,
 					&stream_enc_regs[i]);
 			if (pool->base.stream_enc[i] == NULL) {
 				BREAK_TO_DEBUGGER();
@@ -1281,8 +1281,7 @@ static bool construct(
 	for (i = 0; i < num_virtual_links; i++) {
 		pool->base.stream_enc[pool->base.stream_enc_count] =
 			virtual_stream_encoder_create(
-				dc->ctx, dal_adapter_service_get_bios_parser(
-								adapter_serv));
+				ctx, ctx->dc_bios);
 		if (pool->base.stream_enc[pool->base.stream_enc_count] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create stream_encoder!\n");
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c
index 79e859e..bec2b45 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_link_encoder.c
@@ -79,8 +79,7 @@ static enum bp_result link_transmitter_control(
 	struct bp_transmitter_control *cntl)
 {
 	enum bp_result result;
-	struct dc_bios *bp = dal_adapter_service_get_bios_parser(
-					enc110->base.adapter_service);
+	struct dc_bios *bp = enc110->base.ctx->dc_bios;
 
 	result = bp->funcs->transmitter_control(bp, cntl);
 
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
index 8404ac6..cd3d709 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
@@ -806,7 +806,7 @@ static bool construct(
 	pool->base.stream_engines.engine.ENGINE_ID_DIGE = 1;
 	pool->base.stream_engines.engine.ENGINE_ID_DIGF = 1;
 
-	bp = dal_adapter_service_get_bios_parser(as);
+	bp = ctx->dc_bios;
 
 	if (dal_adapter_service_get_firmware_info(as, &info) &&
 		info.external_clock_source_frequency_for_dp != 0) {
@@ -951,9 +951,8 @@ static bool construct(
 	for (i = 0; i < pool->base.stream_enc_count; i++) {
 		if (pool->base.stream_engines.u_all & 1 << i) {
 			pool->base.stream_enc[i] = dce80_stream_encoder_create(
-					i, dc->ctx,
-					dal_adapter_service_get_bios_parser(
-						as),
+					i, ctx,
+					ctx->dc_bios,
 					&stream_enc_regs[i]);
 
 			if (pool->base.stream_enc[i] == NULL) {
@@ -967,8 +966,7 @@ static bool construct(
 	for (i = 0; i < num_virtual_links; i++) {
 		pool->base.stream_enc[pool->base.stream_enc_count] =
 			virtual_stream_encoder_create(
-				dc->ctx, dal_adapter_service_get_bios_parser(
-								as));
+				ctx, ctx->dc_bios);
 		if (pool->base.stream_enc[pool->base.stream_enc_count] == NULL) {
 			BREAK_TO_DEBUGGER();
 			dm_error("DC: failed to create stream_encoder!\n");
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_timing_generator.c b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_timing_generator.c
index 76cbfc4..206c4ec 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_timing_generator.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_timing_generator.c
@@ -171,7 +171,7 @@ bool dce80_timing_generator_construct(
 	tg110->base.funcs = &dce80_tg_funcs;
 
 	tg110->base.ctx = ctx;
-	tg110->base.bp = dal_adapter_service_get_bios_parser(as);
+	tg110->base.bp = ctx->dc_bios;
 
 	tg110->max_h_total = CRTC_H_TOTAL__CRTC_H_TOTAL_MASK + 1;
 	tg110->max_v_total = CRTC_V_TOTAL__CRTC_V_TOTAL_MASK + 1;
diff --git a/drivers/gpu/drm/amd/dal/dc/gpu/dce110/display_clock_dce110.c b/drivers/gpu/drm/amd/dal/dc/gpu/dce110/display_clock_dce110.c
index f4f6e2e..1f5bed8 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpu/dce110/display_clock_dce110.c
+++ b/drivers/gpu/drm/amd/dal/dc/gpu/dce110/display_clock_dce110.c
@@ -861,7 +861,7 @@ static void set_clock(
 {
 	struct bp_pixel_clock_parameters pxl_clk_params;
 	struct display_clock_dce110 *dc = DCLCK110_FROM_BASE(base);
-	struct dc_bios *bp = dal_adapter_service_get_bios_parser(base->as);
+	struct dc_bios *bp = base->ctx->dc_bios;
 
 	/* Prepare to program display clock*/
 	memset(&pxl_clk_params, 0, sizeof(pxl_clk_params));
diff --git a/drivers/gpu/drm/amd/dal/dc/gpu/dce112/display_clock_dce112.c b/drivers/gpu/drm/amd/dal/dc/gpu/dce112/display_clock_dce112.c
index 089712c..77ccb92 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpu/dce112/display_clock_dce112.c
+++ b/drivers/gpu/drm/amd/dal/dc/gpu/dce112/display_clock_dce112.c
@@ -784,7 +784,7 @@ void dispclk_dce112_set_clock(
 {
 	struct bp_set_dce_clock_parameters dce_clk_params;
 	struct display_clock_dce112 *dc = DCLCK112_FROM_BASE(base);
-	struct dc_bios *bp = dal_adapter_service_get_bios_parser(base->as);
+	struct dc_bios *bp = base->ctx->dc_bios;
 
 	/* Prepare to program display clock*/
 	memset(&dce_clk_params, 0, sizeof(dce_clk_params));
diff --git a/drivers/gpu/drm/amd/dal/dc/gpu/dce80/display_clock_dce80.c b/drivers/gpu/drm/amd/dal/dc/gpu/dce80/display_clock_dce80.c
index 3809e62..109e249 100644
--- a/drivers/gpu/drm/amd/dal/dc/gpu/dce80/display_clock_dce80.c
+++ b/drivers/gpu/drm/amd/dal/dc/gpu/dce80/display_clock_dce80.c
@@ -470,7 +470,7 @@ static void set_clock(
 {
 	struct bp_pixel_clock_parameters pxl_clk_params;
 	struct display_clock_dce80 *disp_clk = FROM_DISPLAY_CLOCK(dc);
-	struct dc_bios *bp = dal_adapter_service_get_bios_parser(dc->as);
+	struct dc_bios *bp = dc->ctx->dc_bios;
 
 	/* Prepare to program display clock*/
 	memset(&pxl_clk_params, 0, sizeof(pxl_clk_params));
-- 
2.7.4

