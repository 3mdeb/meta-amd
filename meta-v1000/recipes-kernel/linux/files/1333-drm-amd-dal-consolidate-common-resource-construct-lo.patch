From 02201b9da76395abbfebaa9dab9b5b2adfdac7dc Mon Sep 17 00:00:00 2001
From: Tony Cheng <tony.cheng@amd.com>
Date: Sat, 15 Oct 2016 00:58:25 -0400
Subject: [PATCH 1333/1722] drm/amd/dal: consolidate common resource construct
 logic

- move audio and virtual_stream_encoder to base resource
- also added DC_ERR macro to make print + asset easier

Change-Id: If5a5dfbadf15f8e58707f5cf71388e5f32449832
Signed-off-by: Tony Cheng <tony.cheng@amd.com>
Acked-by: Harry Wentland <harry.wentland@amd.com>
---
 drivers/gpu/drm/amd/dal/dc/core/dc_resource.c      | 48 +++++++++++++++++++
 .../gpu/drm/amd/dal/dc/dce110/dce110_resource.c    | 56 ++++++++--------------
 .../gpu/drm/amd/dal/dc/dce112/dce112_resource.c    | 52 +++++++-------------
 drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c  | 51 +++++++-------------
 drivers/gpu/drm/amd/dal/dc/dm_services.h           |  6 +++
 drivers/gpu/drm/amd/dal/dc/inc/resource.h          | 17 +++++++
 6 files changed, 126 insertions(+), 104 deletions(-)

diff --git a/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c b/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
index 0748d97..c5956e8 100644
--- a/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/core/dc_resource.c
@@ -34,6 +34,8 @@
 #include "set_mode_types.h"
 #include "adapter_service_interface.h"
 
+#include "virtual/virtual_stream_encoder.h"
+
 #include "dce80/dce80_resource.h"
 #include "dce100/dce100_resource.h"
 #include "dce110/dce110_resource.h"
@@ -97,6 +99,52 @@ struct resource_pool *dc_create_resource_pool(struct adapter_service *adapter_se
 	return false;
 }
 
+
+bool resource_construct(
+	struct adapter_service *adapter_serv,
+	unsigned int num_virtual_links,
+	struct core_dc *dc,
+	struct resource_pool *pool,
+	const struct resource_caps *caps,
+	const struct resource_create_funcs *create_funcs)
+{
+	struct dc_context *ctx = dc->ctx;
+	int i;
+
+	pool->audio_count = 0;
+	for (i = 0; i < pool->pipe_count && i < caps->num_audio; i++) {
+		struct graphics_object_id obj_id;
+
+		obj_id = dal_adapter_service_enum_audio_object(adapter_serv, i);
+		if (false == dal_graphics_object_id_is_valid(obj_id)) {
+			/* no more valid audio objects */
+			break;
+		}
+
+		pool->audios[i] = create_funcs->create_audio(ctx, i);
+
+		if (pool->audios[i] == NULL) {
+			DC_ERR("DC: failed to create audio!\n");
+			return false;
+		}
+		pool->audio_count++;
+	}
+
+	for (i = 0; i < num_virtual_links; i++) {
+		pool->stream_enc[pool->stream_enc_count] =
+			virtual_stream_encoder_create(
+					ctx, ctx->dc_bios);
+		if (pool->stream_enc[pool->stream_enc_count] == NULL) {
+			DC_ERR("DC: failed to create stream_encoder!\n");
+			return false;
+		}
+		pool->stream_enc_count++;
+	}
+
+	return true;
+}
+
+
 void resource_unreference_clock_source(
 		struct resource_context *res_ctx,
 		struct clock_source *clock_source)
diff --git a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
index 57e0fca..38805c7 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce110/dce110_resource.c
@@ -31,7 +31,6 @@
 #include "resource.h"
 #include "dce110/dce110_resource.h"
 #include "include/irq_service_interface.h"
-#include "../virtual/virtual_stream_encoder.h"
 #include "dce/dce_audio.h"
 #include "dce110/dce110_timing_generator.h"
 #include "irq/dce110/irq_service_dce110.h"
@@ -311,6 +310,22 @@ static const struct dce110_clk_src_reg_offsets dce110_clk_src_reg_offsets[] = {
 	}
 };
 
+
+static const struct resource_caps res_cap = {
+	.num_audio = 4,
+};
+
+static struct audio *create_audio(
+		struct dc_context *ctx, unsigned int inst)
+{
+	return dce_audio_create(ctx, inst,
+			&audio_regs[inst], &audio_shift, &audio_mask);
+}
+
+static const struct resource_create_funcs res_create_funcs = {
+	.create_audio = create_audio,
+};
+
 static struct timing_generator *dce110_timing_generator_create(
 		struct adapter_service *as,
 		struct dc_context *ctx,
@@ -1244,28 +1259,6 @@ static bool construct(
 		}
 	}
 
-	pool->base.audio_count = 0;
-	for (i = 0; i < pool->base.pipe_count; i++) {
-		struct graphics_object_id obj_id;
-
-		obj_id = dal_adapter_service_enum_audio_object(as, i);
-		if (false == dal_graphics_object_id_is_valid(obj_id)) {
-			/* no more valid audio objects */
-			break;
-		}
-
-		pool->base.audios[i] = dce_audio_create(
-				ctx, i, &audio_regs[i], &audio_shift, &audio_mask);
-
-		if (pool->base.audios[i] == NULL) {
-			BREAK_TO_DEBUGGER();
-			dm_error("DC: failed to create audio!\n");
-			goto res_create_fail;
-		}
-		pool->base.audio_count++;
-	}
-
-	/* TODO: failure? */
 	underlay_create(ctx, &pool->base);
 
 	for (i = 0; i < pool->base.stream_enc_count; i++) {
@@ -1283,20 +1276,9 @@ static bool construct(
 		}
 	}
 
-	for (i = 0; i < num_virtual_links; i++) {
-		pool->base.stream_enc[pool->base.stream_enc_count] =
-			virtual_stream_encoder_create(
-				ctx,
-				ctx->dc_bios);
-
-		if (pool->base.stream_enc[pool->base.stream_enc_count] == NULL) {
-			BREAK_TO_DEBUGGER();
-			dm_error("DC: failed to create stream_encoder!\n");
-			goto res_create_fail;
-		}
-		pool->base.stream_enc_count++;
-	}
-
+	if (!resource_construct(as, num_virtual_links, dc, &pool->base,
+			&res_cap, &res_create_funcs))
+		goto res_create_fail;
 
 	/* Create hardware sequencer */
 	if (!dce110_hw_sequencer_construct(dc))
diff --git a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
index f4ace37..f70d357 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce112/dce112_resource.c
@@ -31,7 +31,6 @@
 #include "resource.h"
 #include "include/irq_service_interface.h"
 #include "include/adapter_service_interface.h"
-#include "../virtual/virtual_stream_encoder.h"
 #include "dce110/dce110_resource.h"
 #include "dce110/dce110_timing_generator.h"
 #include "dce112/dce112_mem_input.h"
@@ -360,6 +359,21 @@ static const struct dce112_clk_src_reg_offsets dce112_clk_src_reg_offsets[] = {
 	}
 };
 
+static const struct resource_caps res_cap = {
+	.num_audio = 6,
+};
+
+static struct audio *create_audio(
+		struct dc_context *ctx, unsigned int inst)
+{
+	return dce_audio_create(ctx, inst,
+			&audio_regs[inst], &audio_shift, &audio_mask);
+}
+
+static const struct resource_create_funcs res_create_funcs = {
+	.create_audio = create_audio,
+};
+
 static struct timing_generator *dce112_timing_generator_create(
 		struct adapter_service *as,
 		struct dc_context *ctx,
@@ -1104,7 +1118,6 @@ static void bw_calcs_data_update_from_pplib(struct core_dc *dc)
 	dm_pp_notify_wm_clock_changes(dc->ctx, &clk_ranges);
 }
 
-
 static bool construct(
 	struct adapter_service *adapter_serv,
 	uint8_t num_virtual_links,
@@ -1284,27 +1297,6 @@ static bool construct(
 		}
 	}
 
-	pool->base.audio_count = 0;
-	for (i = 0; i < pool->base.pipe_count; i++) {
-		struct graphics_object_id obj_id;
-
-		obj_id = dal_adapter_service_enum_audio_object(adapter_serv, i);
-		if (false == dal_graphics_object_id_is_valid(obj_id)) {
-			/* no more valid audio objects */
-			break;
-		}
-
-		pool->base.audios[i] = dce_audio_create(
-			ctx, i, &audio_regs[i], &audio_shift, &audio_mask);
-
-		if (pool->base.audios[i] == NULL) {
-			BREAK_TO_DEBUGGER();
-			dm_error("DC: failed to create audio!\n");
-			goto res_create_fail;
-		}
-		pool->base.audio_count++;
-	}
-
 	for (i = 0; i < pool->base.stream_enc_count; i++) {
 		/* TODO: rework fragile code*/
 		if (pool->base.stream_engines.u_all & 1 << i) {
@@ -1321,17 +1313,9 @@ static bool construct(
 		}
 	}
 
-	for (i = 0; i < num_virtual_links; i++) {
-		pool->base.stream_enc[pool->base.stream_enc_count] =
-			virtual_stream_encoder_create(
-				ctx, ctx->dc_bios);
-		if (pool->base.stream_enc[pool->base.stream_enc_count] == NULL) {
-			BREAK_TO_DEBUGGER();
-			dm_error("DC: failed to create stream_encoder!\n");
-			goto res_create_fail;
-		}
-		pool->base.stream_enc_count++;
-	}
+	if (!resource_construct(adapter_serv, num_virtual_links, dc,
+			&pool->base, &res_cap, &res_create_funcs))
+		goto res_create_fail;
 
 	/* Create hardware sequencer */
 	if (!dce112_hw_sequencer_construct(dc))
diff --git a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
index 5cd6250..2960294b 100644
--- a/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
+++ b/drivers/gpu/drm/amd/dal/dc/dce80/dce80_resource.c
@@ -31,7 +31,6 @@
 #include "resource.h"
 #include "include/irq_service_interface.h"
 #include "include/adapter_service_interface.h"
-#include "../virtual/virtual_stream_encoder.h"
 #include "irq/dce80/irq_service_dce80.h"
 #include "dce110/dce110_timing_generator.h"
 #include "dce110/dce110_mem_input.h"
@@ -325,6 +324,21 @@ static const struct dce110_clk_src_reg_offsets dce80_clk_src_reg_offsets[] = {
 	}
 };
 
+static const struct resource_caps res_cap = {
+	.num_audio = 6,
+};
+
+struct audio *create_audio(
+		struct dc_context *ctx, unsigned int inst)
+{
+	return dce_audio_create(ctx, inst,
+			&audio_regs[inst], &audio_shift, &audio_mask);
+}
+
+static const struct resource_create_funcs res_create_funcs = {
+	.create_audio = create_audio,
+};
+
 static struct timing_generator *dce80_timing_generator_create(
 		struct adapter_service *as,
 		struct dc_context *ctx,
@@ -922,27 +936,6 @@ static bool construct(
 		}
 	}
 
-	pool->base.audio_count = 0;
-	for (i = 0; i < pool->base.pipe_count; i++) {
-		struct graphics_object_id obj_id;
-
-		obj_id = dal_adapter_service_enum_audio_object(as, i);
-		if (false == dal_graphics_object_id_is_valid(obj_id)) {
-			/* no more valid audio objects */
-			break;
-		}
-
-		pool->base.audios[i] = dce_audio_create(
-				ctx, i, &audio_regs[i], &audio_shift, &audio_mask);
-
-		if (pool->base.audios[i] == NULL) {
-			BREAK_TO_DEBUGGER();
-			dm_error("DC: failed to create audio!\n");
-			goto res_create_fail;
-		}
-		pool->base.audio_count++;
-	}
-
 	for (i = 0; i < pool->base.stream_enc_count; i++) {
 		if (pool->base.stream_engines.u_all & 1 << i) {
 			pool->base.stream_enc[i] = dce80_stream_encoder_create(
@@ -958,17 +951,9 @@ static bool construct(
 		}
 	}
 
-	for (i = 0; i < num_virtual_links; i++) {
-		pool->base.stream_enc[pool->base.stream_enc_count] =
-			virtual_stream_encoder_create(
-				ctx, ctx->dc_bios);
-		if (pool->base.stream_enc[pool->base.stream_enc_count] == NULL) {
-			BREAK_TO_DEBUGGER();
-			dm_error("DC: failed to create stream_encoder!\n");
-			goto res_create_fail;
-		}
-		pool->base.stream_enc_count++;
-	}
+	if (!resource_construct(as, num_virtual_links, dc, &pool->base,
+			&res_cap, &res_create_funcs))
+		goto res_create_fail;
 
 	/* Create hardware sequencer */
 	if (!dce80_hw_sequencer_construct(dc))
diff --git a/drivers/gpu/drm/amd/dal/dc/dm_services.h b/drivers/gpu/drm/amd/dal/dc/dm_services.h
index 6dcf86a..04349c7 100644
--- a/drivers/gpu/drm/amd/dal/dc/dm_services.h
+++ b/drivers/gpu/drm/amd/dal/dc/dm_services.h
@@ -405,4 +405,10 @@ long dm_get_tgid(void);
 
 #endif /* CONFIG_DEBUG_KERNEL || CONFIG_DEBUG_DRIVER */
 
+
+#define DC_ERR(err_msg)  do { \
+	BREAK_TO_DEBUGGER(); \
+	dm_error(err_msg); \
+} while (0)
+
 #endif /* __DM_SERVICES_H__ */
diff --git a/drivers/gpu/drm/amd/dal/dc/inc/resource.h b/drivers/gpu/drm/amd/dal/dc/inc/resource.h
index 4254f32..8e250cf 100644
--- a/drivers/gpu/drm/amd/dal/dc/inc/resource.h
+++ b/drivers/gpu/drm/amd/dal/dc/inc/resource.h
@@ -36,6 +36,23 @@
 enum dce_version resource_parse_asic_id(
 		struct hw_asic_id asic_id);
 
+struct resource_caps {
+	int num_audio;
+};
+
+struct resource_create_funcs {
+	struct audio *(*create_audio)(
+			struct dc_context *ctx, unsigned int inst);
+};
+
+bool resource_construct(
+	struct adapter_service *adapter_serv,
+	unsigned int num_virtual_links,
+	struct core_dc *dc,
+	struct resource_pool *pool,
+	const struct resource_caps *caps,
+	const struct resource_create_funcs *create_funcs);
+
 struct resource_pool *dc_create_resource_pool(struct adapter_service *adapter_serv,
 				struct core_dc *dc,
 				int num_virtual_links,
-- 
2.7.4

